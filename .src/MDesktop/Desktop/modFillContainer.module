' Gambas module file

Public Sub FillComboBoxOnKeyRelease(ComboBox1 As ComboBox, sList As String[])

  If Key.Code = Key.BackSpace Then
    ComboBox1.Clear
  Else
    If ComboBox1.Pos = 0 Then
      ComboBox1.Text = ""
      ComboBox1.Clear
    Else
      If Key.Code = Key.Down Then
        ComboBox1.Clear
        If Not ComboBox1.Count Then
          ComboBox1.List = sList
        Endif
        ComboBox1.Popup
      Endif
    Endif
  Endif

End

Public Sub RestrictCombo(cmb As ComboBox)

  Dim xlist As String[]

  If Len(Trim(cmb.Text)) Then
    xlist = cmb.List
    If xlist.Exist(cmb.Text) = False Then
      cmb.SetFocus
    Endif
  Endif

End

''Use on comboBox_KeyRelease()
Public Sub AutoFillComboBox(ComboBoxItems As ComboBox)

  Dim i As Integer
  Dim textToCursor As String
  Dim textPosition As Integer

  Inc Application.Busy
  If Key.Code = Key.Down Then
    ComboBoxItems.Popup
    textPosition = ComboBoxItems.Pos
    textToCursor = Mid(ComboBoxItems.Text, 1, textPosition)
    For i = 0 To ComboBoxItems.Count - 1
      If LCase(ComboBoxItems[i].Text) Like LCase(textToCursor) & "*" Then
        ComboBoxItems.Index = i
        Break
      Endif
    Next

  Else If Key.Code = Key.BackSpace Then
    If ComboBoxItems.Pos = 0 Then
    Else
      textPosition = ComboBoxItems.Pos - 1
      textToCursor = Mid(ComboBoxItems.Text, 1, textPosition)
      For i = 0 To ComboBoxItems.Count - 1
        If LCase(ComboBoxItems[i].Text) Like LCase(textToCursor) & "*" Then
          ComboBoxItems.Text = ComboBoxItems[i].Text
          ComboBoxItems.Pos = textPosition
          ComboBoxItems.Select(textPosition, Len(ComboBoxItems.Text) - textPosition)
          Break
        Endif
      Next
    Endif

  Else
    If ComboBoxItems.Pos = 0 Then
    Else
      textPosition = ComboBoxItems.Pos
      textToCursor = Mid(ComboBoxItems.Text, 1, textPosition)
      For i = 0 To ComboBoxItems.Count - 1
        If LCase(ComboBoxItems[i].Text) Like LCase(textToCursor) & "*" Then
          ComboBoxItems.Text = ComboBoxItems[i].Text
          ComboBoxItems.Pos = textPosition
          ComboBoxItems.Select(textPosition, Len(ComboBoxItems.Text) - textPosition)
          Break
        Endif
      Next
    Endif

  Endif
  Dec Application.Busy

End

'use on key release
Public Sub RestrictComboToContent(ComboBoxItems As ComboBox)

  Dim i As Integer
  Dim m As Integer
  Dim n As Integer
  Dim txt As String

  If Key.Code = Key.Space Then
    ComboBoxItems.Text = ""
  Else
    n = 0
    txt = Mid(ComboBoxItems.Text, 1, ComboBoxItems.Pos)
    m = Len(txt)
    If m > 0 Then
      For i = 0 To ComboBoxItems.Count - 1
        If Left(ComboBoxItems[i].Text, m) = txt Then
          n = n + 1
        Endif
      Next
      If n = 0 Then
        ComboBoxItems.Text = Left(txt, m - 1)
        AutoFillComboBox(ComboBoxItems)
      Endif
    Endif
  Endif

End

Public Sub ComboInsertNotItem(cmbdisctype As ComboBox, xscheme As String)

  If xscheme Then
    If Not cmbdisctype.List.Exist(xscheme) Then
      cmbdisctype.Add(xscheme)
    Endif
    cmbdisctype.Text = xscheme
  Else
    cmbdisctype.Text = ""
  Endif

End

'''--------------------------------- LISTBOX   -------------------------------------------------
Public Sub FillListBox(ListBox1 As ListBox, res As Result, index As Boolean)

  If res.Available Then
    ListBox1.List = modControlSub.GetDirectFillresult(res)
    If index = True Then
      ListBox1.Index = 0
    Endif
  Endif

End

Public Function GetItemIndexListBox(ListBox1 As ListBox, sItem As String) As Integer

  Dim xx As Integer
  Dim i As Integer

  For i = 0 To ListBox1.List.Count - 1
    If ListBox1[i].Text = sItem Then
      xx = i
      Break
    Endif
  Next
  Return xx

End

Public Function GetSelectedItemsListBox(ListBox1 As ListBox) As String[]

  Dim xList As String[]
  Dim i As Integer

  xList = New String[]
  For i = 0 To ListBox1.Count - 1
    If ListBox1[i].Selected = True Then
      xList.Add(ListBox1[i].Text)
    Endif
  Next

  Return xList

End

'''------------------------------------ List View --------------------------------------------------------------------------------
Public Sub FillListViewFromArray(ListBox1 As ListView, sArry As String[])

  Dim pic1 As Picture
  Dim i As Integer
  Dim xx As String

  pic1 = Picture["icons/unchecked.png"]
  ListBox1.Clear()
  i = 1
  For Each xx In sArry
    If Len(xx) Then
      ListBox1.Add(CStr(i), xx, pic1)
      i = i + 1
    Endif
  Next

End

Public Sub FillListView(ListBox1 As ListView, res As Result)

  Dim pic1 As Picture
  Dim i As Integer

  pic1 = Picture["icons/unchecked.png"]
  ListBox1.Clear
  i = 1
  If res.Available Then
    For Each res
      If Len(res!col) Then
        ListBox1.Add(CStr(i), res!col, pic1)
        i = i + 1
      Endif
    Next
  Endif

End

Public Sub ShowCheckedListView(ListBox1 As ListView)

  Dim pic1 As Picture
  Dim pic2 As Picture

  pic1 = Picture["icons/unchecked.png"]
  pic2 = Picture["icons/checked.png"]

  If ListBox1.Current.Picture = pic1 Then
    ListBox1.Current.Picture = pic2
  Else If ListBox1.Current.Picture = pic2 Then
    ListBox1.Current.Picture = pic1
  Endif

End

'''------------------------------------------ TREEVIEW  -------------------------------------------------------------------------
Public Sub ExpandClickTreeView(TreeView1 As TreeView)

  If TreeView1.Current.Expanded = True Then
    TreeView1.Current.Expanded = False
  Else
    TreeView1.Current.Expanded = True
  Endif

End

Public Sub ExpandAllTreeView(TreeView1 As TreeView)

  With TreeView1
    .MoveFirst
    While .Available
      .Item.Expanded = True
      .MoveNext
    Wend
  End With

End

Public Sub ExpandClickColumnView(TreeView1 As ColumnView)

  If TreeView1.Current.Expanded = True Then
    TreeView1.Current.Expanded = False
  Else
    TreeView1.Current.Expanded = True
  Endif

End

Public Sub FillTreeView(sCon As Connection, TreeView1 As TreeView, key1 As String, str1 As String, key2 As String, str2 As String, key3 As String, str3 As String, key4 As String, str4 As String, txt1 As String, txt2 As String, txt3 As String, txt4 As String)                           ''

  Dim res1 As Result
  Dim i As Integer
  Dim sKey1 As String

  Dim res2 As Result
  Dim j As Integer
  Dim sKey2 As String

  Dim res3 As Result
  Dim k As Integer
  Dim sKey3 As String

  Dim res4 As Result
  Dim l As Integer
  Dim sKey4 As String

  Dim pic1 As Picture
  Dim pic2 As Picture
  Dim pic3 As Picture
  Dim pic4 As Picture

  pic1 = Picture["icons/coll1.png"]
  pic2 = Picture["icons/coll2.png"]
  pic3 = Picture["icons/coll3.png"]
  pic4 = Picture["icons/coll4.png"]

  TreeView1.Clear()
  If txt1 = "" Then
    res1 = sCon.Exec(str1)
  Else If txt1 Then
    res1 = sCon.Exec(str1, txt1)
  Endif
  If res1.Available = True Then
    res1.MoveFirst
    For i = 1 To res1.Count
      If key1 = "" Then
        sKey1 = CStr(i) & "@" & res1!fldparent
      Else
        sKey1 = key1
      Endif
      TreeView1.Add(sKey1, res1!fldparent, pic1)

      If str2 Then
        If txt2 = "" Then
          res2 = sCon.Exec(str2, res1!fldparent)
        Else If txt2 Then
          res2 = sCon.Exec(str2, res1!fldparent, txt2)
        Endif
        If res2.Available Then
          res2.MoveFirst
          For j = 1 To res2.Count
            If key2 = "" Then
              sKey2 = CStr(i) & "@" & CStr(j) & "@" & res2!fldparent
            Else
              sKey2 = key2
            Endif
            TreeView1.Add(sKey2, res2!fldparent, pic2, sKey1)

            If str3 Then
              If txt3 = "" Then
                res3 = sCon.Exec(str3, res2!fldparent)
              Else If txt3 Then
                res3 = sCon.Exec(str3, res2!fldparent, txt3)
              Endif
              If res3.Available Then
                res3.MoveFirst
                For k = 1 To res3.Count
                  If key3 = "" Then
                    sKey3 = CStr(i) & "@" & CStr(j) & "@" & CStr(k) & "@" & res3!fldparent
                  Else
                    sKey3 = key3
                  Endif
                  TreeView1.Add(sKey3, res3!fldparent, pic3, sKey2)

                  If str4 Then
                    If txt4 = "" Then
                      res4 = sCon.Exec(str4, res3!fldparent)
                    Else If txt4 Then
                      res4 = sCon.Exec(str4, res3!fldparent, txt4)
                    Endif
                    If res4.Available Then
                      res4.MoveFirst
                      For l = 1 To res4.Count
                        If key4 = "" Then
                          sKey4 = CStr(i) & "@" & CStr(j) & "@" & CStr(k) & "@" & CStr(l) & "@" & res4!fldparent
                        Else
                          sKey4 = key4
                        Endif
                        TreeView1.Add(sKey4, res4!fldparent, pic4, sKey3)
                        res4.MoveNext
                      Next
                    Endif
                  Endif

                  res3.MoveNext
                Next
              Endif
            Endif

            res2.MoveNext
          Next
        Endif
      Endif

      res1.MoveNext
    Next
  Endif

End

'get key of above treeview
Public Function GetTextFromTreeKey(strKey As String) As String

  Dim xx As String
  Dim ss As Integer

  ss = RInStr(strKey, "@") + 1
  xx = Mid(strKey, ss, Len(strKey) - 1)

  Return xx

End

''used in TreeViewCode()
Public Sub CreateTreeViewFromCSV(TreeView1 As TreeView, sPath As String, sMark As String, sLevel As Integer, showText As Boolean)

  Dim pic1 As Picture
  Dim pic2 As Picture
  Dim pic3 As Picture
  Dim pic4 As Picture

  Dim aColl1 As Collection
  Dim aColl2 As Collection
  Dim aColl3 As Collection
  Dim aColl4 As Collection

  Dim hFile As File
  Dim sLine As String
  Dim asx As String[]

  pic1 = Picture["icons/coll1.png"]
  pic2 = Picture["icons/coll2.png"]
  pic3 = Picture["icons/coll3.png"]
  pic4 = Picture["icons/coll4.png"]

  aColl1 = New Collection
  aColl2 = New Collection
  aColl3 = New Collection
  aColl4 = New Collection

  TreeView1.Clear()
  hFile = Open sPath
  modBasic.DebugString("Open File " & sPath)
  For Each sLine In hFile.Lines
    asx = Split(sLine, sMark)

    If aColl1.Exist(asx[0]) = False Then
      aColl1.Add(True, asx[0])
      If showText = True And If sLevel = 1 Then
        TreeView1.Add(asx[0], asx[1], pic1)
      Else
        TreeView1.Add(asx[0], asx[0], pic1)
      Endif
    Endif

    If sLevel > 1 Then
      If aColl2.Exist(asx[0] & "@" & asx[1]) = False Then
        aColl2.Add(True, asx[0] & "@" & asx[1])
        If showText = True And If sLevel = 2 Then
          TreeView1.Add(asx[1], asx[2], pic2, asx[0])
        Else
          TreeView1.Add(asx[0] & "@" & asx[1], asx[1], pic2, asx[0])
        Endif
      Endif
    Endif

    If sLevel > 2 Then
      If aColl3.Exist(asx[0] & "@" & asx[1] & "@" & asx[2]) = False Then
        aColl3.Add(True, asx[0] & "@" & asx[1] & "@" & asx[2])
        If showText = True And If sLevel = 3 Then
          TreeView1.Add(asx[2], asx[3], pic3, asx[0] & "@" & asx[1])
        Else
          TreeView1.Add(asx[0] & "@" & asx[1] & "@" & asx[2], asx[2], pic3, asx[0] & "@" & asx[1])
        Endif
      Endif
    Endif

    If sLevel > 3 Then
      If aColl4.Exist(asx[0] & "@" & asx[1] & "@" & asx[2] & "@" & asx[3]) = False Then
        aColl4.Add(True, asx[0] & "@" & asx[1] & "@" & asx[2] & "@" & asx[3])
        If showText = True And If sLevel = 4 Then
          TreeView1.Add(asx[3], asx[4], pic4, asx[0] & "@" & asx[1] & "@" & asx[2])
        Else
          TreeView1.Add(asx[0] & "@" & asx[1] & "@" & asx[2] & "@" & asx[3], asx[3], pic4, asx[0] & "@" & asx[1] & "@" & asx[2])
        Endif
      Endif
    Endif

  Next
  hFile.Close()

End

Public Sub ShowMenuTreeMain(frm As Form, pnlleft As Panel)

  Dim TreeView1 As TreeView
  Dim xmenu As Menu
  Dim ymenu As Menu
  Dim zmenu As Menu

  Dim pic1 As Picture
  Dim pic2 As Picture
  Dim pic3 As Picture

  pic1 = Picture["icons/coll1.png"]
  pic2 = Picture["icons/coll2.png"]
  pic3 = Picture["icons/coll3.png"]

  TreeView1 = New TreeView(pnlleft)
  TreeView1.Background = Color.Yellow
  TreeView1.Expand = True
  For Each xmenu In frm.Menus
    TreeView1.Add(xmenu.Name, xmenu.Caption, pic1)
    For Each ymenu In xmenu.Children
      TreeView1.Add(ymenu.Name, ymenu.Caption, pic2, xmenu.Name)
      If ymenu.Children.Count Then
        For Each zmenu In ymenu.Children
          TreeView1.Add(zmenu.Name, zmenu.Caption, pic3, ymenu.Name)
        Next
      Endif
    Next
  Next

End
