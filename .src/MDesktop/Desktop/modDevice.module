' Gambas module file

Public Sub DesktopOpenFile(sFile As String)

  Dim xscript As String
  Dim xexec As String
  Dim arcmd As String[]

  xscript = modBasic.$DefaultViewPath
  If xscript Then
    xexec = modBasic.$DefaultViewShell
    If xexec Then
      arcmd = [xexec, xscript, sFile]
    Else
      arcmd = [xscript, sFile]
    Endif
    modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
    Exec arcmd
  Else
    Desktop.Open(sFile)
  Endif

End

Public Sub GetQRCOdeForm(sText As String)

  Dim hForm As FmQRScan

  hForm = New FmQRScan(sText)
  hForm.Show

End

Public Sub ViewDicomFile(sPath As String)

  Dim xdicom As String
  Dim xengin As String
  Dim arcmd As String[]

  xdicom = modSettings.ShowSettingFromFIle("DicomViewer/Default")
  If xdicom Then
    xengin = xdicom
  Else
    xengin = "aeskulap"
  Endif
  arcmd = [xengin, sPath]
  modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
  Exec arcmd Wait

End

''-------------------bar code ----------------------
Public Function ChooseBarCodeSource() As String

  Dim device As String
  Dim xsource As String
  Dim sPath As String
  Dim enc As String

  device = modSettings.ShowSettingFromFIle("BarCodeSettings/Device")
  xsource = modSettings.ShowSettingFromFIle("BarCodeSettings/Source")
  If Not device Then
    device = "/dev/video0"
  Endif

  If device Then
    If xsource = "Video" Then
      enc = modCodeRead.GetBarCodeFromVideo(device)
    Else If xsource = "Image" Then
      sPath = modImage.GetWebCamValue(device)
      If sPath Then
        enc = modCodeRead.GetBarCodeString(sPath)
      Endif
    Else
      enc = InputBox(("Get Bar Code Device output here"), "Bar Code", "")
    Endif
  Endif
  Return enc

End
'

Public Sub PrintBarCodeEnc(encid As String)

  Dim xform As String
  Dim xpath As String

  If modBasic.$BarCodeFormatString Then
    xform = modBasic.$BarCodeFormatString
  Else
    xform = "QR Code"
  Endif

  If xform = "QR Code" Then
    xpath = modDevAll.MakeQRCode(encid)
  Else
    xpath = modDevAll.GetBarCodeWithOptions(encid)
  Endif

  modPrint.DefaultPrinting(xpath, "LabelSize")

End

'NOTE: ------------------------------ Webcam Procedures -----------------------------------------------
Public Function WebCamDevice() As String

  Dim xx As String
  Dim xdevice As String

  xdevice = modSettings.ShowSettingFromFIle("WebCamSettings/Device")
  If xdevice Then
    xx = xdevice
  Else
    xx = "/dev/video0"
  Endif
  Return xx

End

Public Sub CamOnStart()

  Dim stpath As String

  If modGlobalSetting.ShowSettingFromDB("WebcamShot/Start") = "Yes" Then
    stpath = Temp() & ".jpeg"
    modDevAll.GetWebCamSnapShot(stpath, modDevice.WebCamDevice())
    modImage.AddUserImageToDB("Start", stpath)
  Else
    modImage.AddUserImageToDB("Start", "")
  Endif

End

Public Sub CamOnError()

  Dim stpath As String

  If modGlobalSetting.ShowSettingFromDB("WebcamShot/Error") = "Yes" Then
    stpath = Temp() & ".jpeg"
    modDevAll.GetWebCamSnapShot(stpath, modDevice.WebCamDevice())
    modImage.AddUserImageToDB("Error", stpath)
  Else
    modImage.AddUserImageToDB("Error", "")
  Endif

End

Public Sub CamOnClose()

  Dim stpath As String

  If modGlobalSetting.ShowSettingFromDB("WebcamShot/Close") = "Yes" Then
    stpath = Temp() & ".jpeg"
    modDevAll.GetWebCamSnapShot(stpath, modDevice.WebCamDevice())
    modImage.AddUserImageToDB("Close", stpath)
  Else
    modImage.AddUserImageToDB("Close", "")
  Endif

End

''---------------------------- Speaking ----------------------------------
Public Sub SpeakString(sText As String)

  Dim arcmd As String[]
  Dim xcmd As String

  If System.Exist("espeak") Then
    xcmd = modSettings.ShowSettingFromFIle("TextToSpeech/CustomCommand")
    If xcmd Then
      modBasic.DebugString("Execute " & xcmd & Space(1) & sText)
      Shell xcmd & Space(1) & Quote(sText) Wait
    Else
      arcmd = ["espeak", Quote(sText)]
      modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
      Exec arcmd Wait
    Endif
  Else
    modApplSub.InstallSelectedApplication(["espeak"])
  Endif

End

''---------------------------------- Serial Port -------------------------
Public Sub SendDataToSerialPort(sText As String)

  Dim xPort As String
  Dim xcmd As String

  xPort = modBasic.$SerialPort
  If xPort And If sText Then
    xcmd = "echo -en '" & Trim(sText) & "' > " & xPort
    modBasic.DebugString("Execute " & xcmd)
    Shell xcmd Wait
  Endif

End

'''------------------- Notify OSD -----------------------------
Public Sub DesktopNotification(sLine As String)

  Dim sicon As String
  Dim xmusic As String
  Dim xtitle As String
  Dim xnotice As String
  Dim xusertime As String[]
  Dim arcmd As String[]

  If System.Exist("notify-send") Then
    xusertime = Split(sLine, "@")
    xtitle = modString.GetSelectedTextBetween(sLine, "[", "]")
    xnotice = modString.GetSelectedTextBetween(sLine, "]", "@")

    xmusic = modBasic.$InfoMusic
    If xmusic Then
      Music.Load(xmusic)
      If modBasic.$InfoMusicVol Then
        Music.Volume = modBasic.$InfoMusicVol
      Endif
      Music.Play
    Endif

    If xusertime[1] Then
      sicon = modImage.DisplayPersonImageData("Staff", modGeneral.GetMainUserCode(xusertime[1]))
      If sicon Then
        arcmd = ["notify-send", "-i", sicon, xtitle, xnotice]
      Else
        arcmd = ["notify-send", xtitle, xnotice]
      Endif
    Else
      arcmd = ["notify-send", xtitle, xnotice]
    Endif
    modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
    Exec arcmd Wait

    If modBasic.$AutoReadNotice = "Yes" Then
      SpeakString(xtitle)
      SpeakString(xnotice)
    Endif

  Else
    modApplSub.InstallSelectedApplication(["libnotify-bin"])
  Endif

End

'NOTE: ---------------------------------- SYSTEM LOCK --------------------------------------
Public Function GetSystemIdleTime() As Long

  Dim xx As String
  Dim yy As Long

  If System.Exist("xprintidle") = True Then
    modBasic.DebugString("Execute " & "xprintidle")
    Exec ["xprintidle"] To xx
    If xx Then
      yy = Val(xx)
    Else
      yy = 0
    Endif
  Else
    modApplSub.InstallSelectedApplication(["xprintidle"])
  Endif

  Return yy

End

Public Function GetLockOnIdleTime() As Boolean

  Dim xx As Boolean
  Dim xLock As Float

  If modBasic.$LockInTime Then
    xLock = CFloat(modBasic.$LockInTime)
    If xLock Then
      If GetSystemIdleTime() > xLock * 60000 Then
        xx = True
      Endif
    Endif
  Endif
  Return xx

End

''--------------------------- Socket Transfer --------------------------
Public Sub TransferTextSocket(sHost As String, sPort As String, xline As String)

  Dim MySock As Socket

  MySock = New Socket As "MySock"
  MySock.Host = sHost
  MySock.Port = sPort
  modBasic.DebugString("Connect to Port " & sPort & " on Host " & sHost)
  MySock.Connect()

  While (MySock.Status <> 7) And (MySock.Status > 0)
    Wait 0.1
  Wend

  Write #MySock, xline, Len(xline)
  Close #MySock

End

'NOTE: ------------------------- KDE Connect ------------------------------
Public Function KDEConnDeviceList() As String[]

  Dim xx As String
  Dim yy As String
  Dim sLine As String[]
  Dim modPath As String[]
  Dim arcmd As String[]

  modPath = New String[]
  If System.Exist("kdeconnect-cli") = True Then
    arcmd = ["kdeconnect-cli", "--list-available", "--id-only"]
    modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
    Exec arcmd To xx
    sLine = Split(xx, gb.NewLine)
    For Each yy In sLine
      If Trim(yy) Then
        modPath.Add(Trim(yy))
      Endif
    Next
  Else
    modApplSub.InstallSelectedApplication(["kdeconnect", "qml-module-org-kde-people"])
  Endif
  Return modPath

End

''------------------------------ Customized SMS ---------------------------
Public Function SendCustomSMSToAny(sphno As String, sInfo As String) As String

  Dim xval As String

  If sphno Then
    If sInfo Then
      If modBasic.$SMSQueDisable = "No" Then
        modAppSupport.SaveSMSEntry(sphno, sInfo, "Waiting", "")
        xval = "SMS Qued"
      Else
        modAppSupport.SendSMSSingle(sphno, sInfo)
        xval = "SMS Sent"
      Endif
    Endif
  Endif
  Return xval

End

Public Function SendSMSToInpatDoc(encid As String, sphno As String) As String

  Dim sText As String
  Dim xval As String

  If sphno Then
    sText = modSettings.ShowSettingFromFIle("InpatientSMS/PhysicianSMSText")
    sText = modReportVar.GetDoctorSMSVAr(encid, sText)
    xval = SendCustomSMSToAny(sphno, GetTextArea(sphno, sText))
  Endif
  Return xval

End

Public Function SendSMSLabPatient($encid As String, sTest As String, sValue As String) As String

  Dim sText As String
  Dim phno As String
  Dim xmsg As String

  sText = modSettings.ShowSettingFromFIle("Laboratory/PatientSMS_SMSText")
  phno = modPatient.GetPatientContactByEnc($encid)
  If phno Then

    If sText Then
      sText = Replace(sText, "{TestName}", sTest)
      sText = Replace(sText, "{TestResultValue}", sValue)
      sText = modReportVar.GetPatientSMSVAr($encid, sText)
    Else
      sText = sTest & " : " & sValue
    Endif
    xmsg = SendCustomSMSToAny(phno, sText)

  Endif
  Return xmsg

End

Public Sub SendEMailLabPatient($encid As String, sPath As String)

  Dim xemail As String
  Dim xblank As String[]
  Dim sText As String
  Dim hForm As FmRemoteMail

  sText = modSettings.ShowSettingFromFIle("Laboratory/PatientSMS_SMSText")
  If sText Then
    sText = modReportVar.GetPatientSMSVAr($encid, sText)
  Endif
  xemail = modPatient.GetPatientEmail($encid)
  If xemail Then
    xblank = New String[]
    modDevAll.SendSMTPEmail([xemail], xblank, xblank, "Diagnostic Alert", sText, sPath)
  Else
    hForm = New FmRemoteMail([xemail], sPath, "Diagnostic Alert", sText)
    hForm.ShowModal()
  Endif

End

''----------------------- Registration --------------------
Public Sub SendMessageToRegistPhysician(encid As String, userid As String)

  Dim sMode As String
  Dim sText As String
  Dim sphno As String
  ' Dim xemail As String
  ' Dim xblank As String[]

  sText = modSettings.ShowSettingFromFIle("Registration/PhysicianMessage")
  If sText Then
    sText = modReportVar.GetDoctorSMSVAr(encid, sText)

    sMode = modSettings.ShowSettingFromFIle("Registration/PhysicianMessageMode")
    If sMode = "SMS" Then
      sphno = modGeneral.GetUserContact(userid)
      If sphno Then
        If modBasic.$SMSQueDisable = "No" Then
          modAppSupport.SaveSMSEntry(sphno, sText, "Waiting", "")
        Else
          modAppSupport.SendSMSSingle(sphno, sText)
        Endif
      Endif

    Else If sMode = "E-Mail" Then
      ' xemail = modPatient.GetPatientEmail(encid)
      ' If xemail Then
      '   xblank = New String[]
      '   modDevAll.SendSMTPEmail([xemail], xblank, xblank, "Registration", sText, "")
      ' Endif

    Else If sMode = "Telegram" Then
      sphno = modGeneral.GetUserContact(userid)
      If sphno Then

      Endif

    Endif

  Endif

End

Public Sub SendMessageToRegistPatient(encid As String)

  Dim sMode As String
  Dim sText As String
  Dim sphno As String
  Dim xemail As String
  Dim xblank As String[]

  sText = modSettings.ShowSettingFromFIle("Registration/PatientMessage")
  If sText Then
    sText = modReportVar.GetPatientSMSVAr(encid, sText)

    sMode = modSettings.ShowSettingFromFIle("Registration/PatientMessageMode")
    If sMode = "SMS" Then
      sphno = modPatient.GetPatientContactByEnc(encid)
      If sphno Then
        If modBasic.$SMSQueDisable = "No" Then
          modAppSupport.SaveSMSEntry(sphno, sText, "Waiting", "")
        Else
          modAppSupport.SendSMSSingle(sphno, sText)
        Endif
      Endif

    Else If sMode = "E-Mail" Then
      xemail = modPatient.GetPatientEmail(encid)
      If xemail Then
        xblank = New String[]
        modDevAll.SendSMTPEmail([xemail], xblank, xblank, "Registration", sText, "")
      Endif

    Else If sMode = "Telegram" Then
      sphno = modPatient.GetPatientContactByEnc(encid)
      If sphno Then

      Endif

    Endif

  Endif

End
