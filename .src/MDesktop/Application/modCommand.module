' Gambas module file

' Private hTimer As Timer
' Private $Start As Boolean

''===== USE ONLY FOR CLI (NOT FOR DESKTOP OR WEB) =======
Private Sub InitialProcedures()

  Dim xlocal As String

  'creating/setting directories
  modHelpVariable.MakeWorkingDir()
  modHelpVariable.CreateWorkingDir(False)
  modHelpVariable.SetAppConfigFile()
  modGeneralMain.EnableCollectionCache()

  xlocal = modSettings.ShowSettingFromFIle("Application/Localization")
  If xlocal Then
    System.Language = xlocal
  Else
    System.Language = "en_US.UTF-8"
  Endif

End

Public Sub DoCommandLineSub()

  Dim i As Integer
  Dim xx As String[]
  Dim xstr As String
  Dim xitem As String

  Dim asx As String[]
  Dim xval As String
  Dim xuser As String
  Dim xpass As String
  Dim xvar As String

  Dim $isdebug As Boolean

  For i = 1 To Application.Args.Max
    If Application.Args[i] = "--" Then
      Inc i
      Break
    Else If Left(Application.Args[i]) <> "-" Then
      Break
    Endif
  Next

  $isdebug = False
  For Each xval In Application.Args.All
    If xval Like "--user=" & "*" Then
      asx = Split(xval, "=")
      xuser = asx.Extract(1, asx.Count - 1).Join("=")
    Else If xval Like "--pass=" & "*" Then
      asx = Split(xval, "=")
      xpass = asx.Extract(1, asx.Count - 1).Join("=")
      If Not xpass Then
        Print "Your Log In Password:";;
        Flush
        Input xpass
      Endif
    Else If xval Like "--var=" & "*" Then
      asx = Split(xval, "=")
      xvar = asx.Extract(1, asx.Count - 1).Join("=")
    Else If xval = "--debug" Then
      $isdebug = True
    Endif
  Next

  Select Case Application.Args[1]

    Case "--help"
      Print Application.Name & "-" & Application.Version
      Print "Usage:"
      Print Application.Name & " [option] [arguments]"
      Print "[optopn] should be immediately after " & Application.Name
      Print "Execute without option or argument for GUI mode"

      Print " "
      Print " "
      Print "Options are:"
      Print "--help                 Display commandline help"
      Print "--debug                Show process ouput. Put this argument at last."
      Print "--version              Display Version information"
      ' Print "--copyright            Display Copyright information"
      Print "--settings-fixed       Display Application Settings in /etc/healthybit"
      Print "--settings-local       Display Application Settings in ~/.config/healthybit"
      Print "--printers-list        Display printers installed to this system"
      Print "--environments         Display Desktop environments of this system"
      Print "--anyreport-list       Lists names of all Reports which can be printed"

      Print " "
      Print " "
      Print "--lastoutput-label     Path of last label generated by application"
      Print "--lastoutput-report    Path of last report generated by application"

      Print " "
      Print " "
      Print "--install-essential    Display essential applications to install"
      Print "--install-optional     Display optional application to install"
      Print "--restore-settings     Restore Application Settings in ~/.config/healthybit"
      Print "--bstoad <Date>        Convert BS to Julian (BS Date in format yyyy/mm/dd)"
      Print "--adtobs <Date>        Convert Julian to BS (Julian Date in format mm/dd/yyyy)"

      Print " "
      Print " "
      Print "Backup Database:"
      Print "--backup-ftp           Backup selected tables to remote FTP folder"
      Print "--backup-local         Backup selected tables to specified local Folder."
      Print " "
      Print " "
      Print "Repository Upload:"
      Print "--upload-repo          Upload selected tables to specified data repository."
      Print "--upload-repo-one      Upload one record from a table to specified data repository."
      Print "                        Table name and value of primary field are required arguments"
      Print "--upload-repo-enc      Upload all records of a patient from all tables to specified data"
      Print "                       repository. Encounter ID is required argument"
      ' Print "--upload-repo-hourly   Upload selected tables to specified data repository every hour."
      ' Print " "
      Print "--uploadimg-repo       Upload selected images and tables to specified data repository."
      Print "--uploadimg-repo-one   Upload one image and table data to specified data repository."
      Print "                       Table name and Serial Index are two necessary arguments"
      Print "--uploadimg-repo-enc   Upload all images of a patient from all tables to specified data"
      Print "                       repository. Encounter ID is required argument"
      Print " "
      Print "--uploadpacs-repo      Upload selected PACS instances to specified PACS repository."
      Print "                       Local PACS Node (eg. PACS1) and Modality are required arguments"
      Print " "
      Print " "
      Print "Invoice Upload:"
      Print "--upload-invoice       Upload invoice information to specified invoice repository"
      Print " "
      Print " "
      Print "HAI CRF Upload:"
      Print "--upload-hai-crf       Upload HAI CRF information to specified DHIS2 server"

      Print " "
      Print " "
      Print "--mail-smtp            Send E-mails with specified SMTP parameters. User, Password"
      Print "                       and Variable arerequired. The quoted variable is E-mail, "
      Print "                       subject, content and attachment joined by semicolon (;)"
      Print " "
      Print "--data-export          Export selected data. User, Password and Variable are required."
      Print "                       The variable is Report Name. Prior settings in Data Export form"
      Print "                       in Consultant Desk is required."
      Print " "
      Print "--mail-anyreport       Send E-mails with selected reports. User, Password and Variable"
      Print "                       are required. The quoted variable is Report Name and arguments "
      Print "                       joined by semicolon (;).Prior settings in Schedule E-Mail form in"
      Print "                       Record Desk is Required."
      Print " "
      Print "--print-anyreport      Print Selected Report to standard output in HTML Format. User,"
      Print "                       Passwordand Variable are required. The quoted variable is Report"
      Print "                       Name and arguments joined by semicolon (;)"

      Print " "
      Print " "
      Print "--print-invoice        Print Selected Invoice. User, Password and Variable are required."
      Print "                       The variable is Invoice No"
      Print " "
      Print "--print-patreport      Print Complete Medical Report to standard output in HTML Format."
      Print "                       User, Password and Variable are required. The variable is Encounter"
      Print "                       ID"
      Print " "
      Print "--print-pathistory     Print Complete Medical Report to standard output in HTML Format."
      Print "                       User, Password and Variable are required. The variable is Patient"
      Print "                       ID"
      Print " "
      Print "--print-expense        Print Complete Expense Report to standard output in HTML format. "
      Print "                       User, Password and Variable are required. The variable is Encounter"
      Print "                       ID"
      Print " "
      Print "--print-sqlresult      Print SQL Query result to standard output in HTML format. User, "
      Print "                       Password and Variable are required. The quoted variable is Query"
      Print "                       String without SELECT"
      Print "--upload-folder        Upload all files from a folder as Past Documents. User, Password and"
      Print "                       Variable are required. The variable is Folder <Encounter ID>:<Folder Path>"
      'Print "--sql-select           Print SQL Query Result. User, Password and Variable are required."
      'Print "                       The quoted variable is Query String without SELECT"

      Print " "
      Print " "
      Print "Arguments are:"
      Print "--user=<user>          Log In User ID"
      Print "--pass=<password>      Log In Password"
      Print "--var=<variable>       Variable string"
      Print "  "

      Print " "
      Print "--schedule-query       Execute schedule query"
      Print " "
      Print "--patientlist          Display Admitted Patient List. First Argument is the Department Name"
      Print "                       in quotes. Second argument is Triage Color [Red, Yellow, Green, Blue,"
      Print "                       Black, Order]. Order means Red->Yellow->Green->Blue"

      Print " "
      Print " "
      Print "--sync-patient         Import selected patient data from remote server."
      Print "                       Takes Patient No as argument."
      Print " "
      Print "--sync-data            Import selected data from remote server. Takes one argument from"
      Print "                            --medicine-data"
      Print "                            --medicine-problems"
      Print "                            --medicine-compounding"
      Print "                            --examination-data"
      Print "                            --examination-factors"
      Print "                            --laboratory-data"
      Print "                            --laboratory-factors"
      Print "                            --radiology-data"
      Print "                            --nutrition-data"
      Print "                            --diagnosis-data"
      Print "                            --demographics-data"
      Print "                            --billing-data"
      Print "  "
      Print " "

      Print "MySQL Database Information(Using MySQL commands):"
      Print "--check-db                Check all tables for problems"
      Print "--status-db               Show database status"
      Print "--report-db               Show database report"
      Print "--extended-status-db      Display the server status variables and their values"
      Print "--ping-db                 Check whether the server is alive"
      Print "--processlist-db          Show a list of active server threads"
      Print "--variables-db            Display the server system variables and their values"
      Print "--version-db              Display version information from the server"
      Print "--tuner-db              Display MySQLTuner information from the server"
      Print "--galera-monitor          Display Galera Cluster Monitoring Form"
      Print "  "
      Print " "

    Case "--version"
      Print Application.Version
      Quit

    Case "--copyright"
      Print "Developed by Safiur Rahman (isafiur@gmail.com)"
      Quit

    Case "--settings-fixed"
      InitialProcedures()
      If Exist(modHelpVariable.$appetcFolder &/ "appsettings.conf") Then
        xstr = File.Load(modHelpVariable.$appetcFolder &/ "appsettings.conf")
      Endif
      Print xstr
      Quit
    Case "--settings-local"
      InitialProcedures()
      If Exist(modHelpVariable.AppDirectory &/ "appsettings.conf") Then
        xstr = File.Load(modHelpVariable.AppDirectory &/ "appsettings.conf")
      Endif
      Print xstr
      Quit
    Case "--printers-list"
      xstr = Printer.List.Join(gb.NewLine)
      Print xstr
      Quit
    Case "--environments"
      xstr = modApplSub.GetEnvironmentList().Join(gb.NewLine)
      Print xstr
      Quit
    Case "--anyreport-list"
      For Each xitem In modCommand.CommandReportList()
        Print xitem
      Next
      Quit

    Case "--lastoutput-label"
      InitialProcedures()
      xstr = modControlSub.ShowSettingValue(Desktop.CacheDir &/ modHelpVariable.AppName &/ "applog.conf", "FilePath/LabelSize")
      Print xstr
      Quit
    Case "--lastoutput-report"
      InitialProcedures()
      xstr = modControlSub.ShowSettingValue(Desktop.CacheDir &/ modHelpVariable.AppName &/ "applog.conf", "FilePath/ReportSize")
      Print xstr
      Quit

    Case "--install-essential"
      InitialProcedures()
      xx = modApplSub.EssentialAppText()
      If xx Then
        modApplSub.InstallSelectedApplication(xx)
      Else
        Print "All essential applications are installed"
      Endif
    Case "--install-optional"
      InitialProcedures()
      xx = modApplSub.OptionalAppText()
      If xx Then
        modApplSub.InstallSelectedApplication(xx)
      Else
        Print "All optional applications are installed"
      Endif
    Case "--restore-settings"
      InitialProcedures()
      modGeneralMain.RestoreConfigSettings()
      Quit
    Case "--bstoad"
      InitialProcedures()
      modHelpVariable.CalenderConnection()
      xstr = ConvertBSTOAD(Application.Args[2])  ''CStr(modDate.ConvertToEnglishdate(Application.Args[2]))
      Print xstr
      Try modDatabase.$calConn.Close()
      Quit
    Case "--adtobs"
      InitialProcedures()
      modHelpVariable.CalenderConnection()
      xstr = ConvertADTOBS(Application.Args[2])  ''modDate.ConvertToLocaldate(CDate(Application.Args[2]))
      Print xstr
      Try modDatabase.$calConn.Close()
      Quit

    Case "--backup-ftp"
      InitialProcedures()
      modCommand.CmdBackupFTPSelTable($isdebug)
      Quit
    Case "--backup-local"
      InitialProcedures()
      If Application.Args[2] Then
        xstr = Application.Args[2]
      Else
        xstr = User.Home
      Endif
      modCommand.CmdBackupLocalSelTable(xstr, $isdebug)
      Quit

    Case "--upload-count"
      InitialProcedures()
      modCommand.CmdUploadCountTable(Application.Args[2], $isdebug)
      Quit
    Case "--upload-repo"
      InitialProcedures()
      modCommand.CmdUploadSelTable($isdebug)
      Quit
    Case "--upload-repo-group"
      InitialProcedures()
      modCommand.CmdUploadGroupTable(Application.Args[2], $isdebug)
      Quit
    Case "--upload-repo-one"
      InitialProcedures()
      modCommand.CmdUploadOneTable(Application.Args[2], Application.Args[3], $isdebug)
      Quit
    Case "--upload-repo-enc"
      InitialProcedures()
      modCommand.CmdUploadEncAllTable(Application.Args[2], $isdebug)
      Quit
      ' Case "--upload-repo-hourly"
      '   InitialProcedures()
      '   modCommand.CmdUploadSelTableHourly($isdebug)
      '   ' ' ' Quit  ''Do not quit
    Case "--uploadimg-repo"
      InitialProcedures()
      modCommand.CmdUploadImgSelTable($isdebug)
      Quit
    Case "--uploadimg-repo-one"
      InitialProcedures()
      modCommand.CmdUploadOneImgSelTable(Application.Args[2], Application.Args[3], $isdebug)
      Quit
    Case "--uploadimg-repo-enc"
      InitialProcedures()
      modCommand.CmdUploadImgEncAllTable(Application.Args[2], $isdebug)
      Quit
    Case "--uploadpacs-repo"
      InitialProcedures()
      modCommand.CmdUploadSelPacs(Application.Args[2], Application.Args[3], $isdebug)
      Quit

    Case "--upload-invoice"
      InitialProcedures()
      modCommand.UploadInvoiceRepository(Application.Args[2], $isdebug)
      Quit
    Case "--advertise-setting"
      InitialProcedures()
      modRepoSync.UpdateAdvertiseCreateDB()
      Quit

    Case "--insertlog-remote"
      InitialProcedures()
      modRepository.InsertLogToRemoteServer()
      Quit

    Case "--mail-smtp", "--mail-anyreport", "--sql-select", "--print-invoice", "--print-expense", "--print-patreport", "--print-pathistory", "--print-sqlresult", "--print-anyreport", "--data-export", "--upload-folder", "--Hourly-Invoices", "--Hourly-Receipts"                  ''
      InitialProcedures()
      MMain.$SISHAppMode = modMisc.GetApplicationType()
      modCommand.CommandPrint(Application.Args[1], xuser, xpass, xvar, $isdebug)
      Quit

    Case "--schedule-query"
      InitialProcedures()
      modCommand.ScheduleTask($isdebug)

    Case "--sync-patient"
      InitialProcedures()
      CmdSyncPatientRepo(Application.Args[2], $isdebug)

    Case "--sync-data"
      InitialProcedures()
      modRepoSync.DataSyncData(Application.Args[2], $isdebug)

    Case "--upload-hai-crf"
      InitialProcedures()
      modHelpVariable.ConnectionMain()
      modCRFUpload.AutoUploadHAICRF(Application.Args[2], $isdebug)

    Case "--sync-machine"
      InitialProcedures()
      modHelpVariable.ConnectionMain()
      modInterface.SyncInterfacingData($isdebug)

    Case "--sync-machine-daily"
      InitialProcedures()
      modHelpVariable.ConnectionMain()
      modInterface.SyncInterfacingDataDaily($isdebug)

    Case "--patientlist"
      InitialProcedures()
      modPatientSub.GetAdmittedPatientList(Application.Args[2], Application.Args[3])

      ''Database related
    Case "--check-db", "--status-db", "--report-db", "--extended-status-db", "--ping-db", "--processlist-db", "--variables-db", "--version-db", "--tuner-db"
      InitialProcedures()
      modCommand.DisplayDBCommands(Application.Args[1])
      Quit

    Case "--galera-monitor"
      InitialProcedures()
      fmGalera.Show

    Case "--show-qrcode"
      InitialProcedures()
      modDevice.GetQRCOdeForm(Application.Args[2])

  End Select
  If Exist("/tmp" &/ Application.Name) Then
    modExternal.DeleteFolderRecursive("/tmp" &/ Application.Name)
  Endif

End

''==========Date Conversion ===================
Private Function ConvertADTOBS(sAdDate As String) As String

  Dim asx As String[]
  Dim xstr As String
  Dim xval As String

  asx = Split(sAdDate, Space(1))
  xstr = modDate.ConvertToLocaldate(Val(sAdDate))
  If asx.Count = 2 Then
    xval = xstr & Space(1) & asx[1]
  Else
    xval = xstr
  Endif
  Return xval

End

Private Function ConvertBSTOAD(sAdDate As String) As String

  Dim asx As String[]
  Dim xdate As Date
  Dim bsx As String
  Dim xval As String

  asx = Split(sAdDate, Space(1))
  xdate = modDate.ConvertToEnglishdate(asx[0])
  bsx = Format(xdate, gb.ShortDate)
  If asx.Count = 2 Then
    xval = bsx & Space(1) & asx[1]
  Else
    xval = bsx
  Endif
  Return xval

End

''use only from command line... connection closes at end
''===================== COMMANDS WITH Authentication =======================================
Private Function AllowCmdLogin(sUser As String, sPass As String, xdebug As Boolean) As Boolean

  Dim xallow As Boolean
  Dim rs As Result
  Dim rs1 As Result
  Dim res2 As Result

  xallow = False
  If modDatabase.$myConn.Opened = True Then
    modHelpVariable.$ApplKey = modPassword.ValidateKey()
    If modHelpVariable.$ApplKey = 3 Then
      Return
    Else

      modHelpVariable.$MACAddress = modApplication.GetMACAddress()
      modHelpVariable.$localIP = modApplication.GetLocalIP()
      If xdebug = True Then
        Print "Connected to " & modDatabase.$myConn.Host
      Endif

      If xdebug = True Then
        Print "Checking User Authentication . . ."
      Endif
      res2 = modDatabase.$myConn.Exec("select fldpass from tbluser where flduserid=&1 and fldpass=&2 and fldstatus=&3", sUser, modPassword.EncryptSimple(sPass), "Active")
      If res2.Available = False Then
        Print "Incorrect User or Password"
      Else

        rs1 = modDatabase.$myConn.Exec("select fldid from tblcompaccess where flduserid=&1 and fldcomp=&2", sUser, modBasic.$compID)
        If rs1.Available = False Then
          Print "Access to this Computer not granted"
        Else

          rs = modDatabase.$myConn.Exec("select fldaccess from tblmacaccess where fldhostmac=&1 and fldhostuser=&2 and fldhostname=&3 and fldcomp=&4", modHelpVariable.$MACAddress, System.User.Name, System.Host, modBasic.$compID)                                                     ''
          If rs.Available = False Then
            Print "Wrong computer parameters"
          Else
            If rs!fldaccess = "Inactive" Then
              Print "Computer connection to server disabled"
            Else If rs!fldaccess = "Active" Then
              xallow = True
            Endif
          Endif

        Endif

      Endif

    Endif
  Endif

  Return xallow

End

Public Sub CommandPrint(sType As String, sUser As String, sPass As String, sVal As String, xdebug As Boolean)

  Dim rsx As Result
  Dim xx As String[]
  Dim yy As String[]
  Dim ref As ResultField
  Dim xPath As String
  Dim xallow As Boolean
  Dim stbl As String
  Dim i As Integer
  Dim asx As String[]

  modBasic.$lbluser = sUser
  modHelpVariable.CreateUserCacheDir(modBasic.$lbluser)

  modHelpVariable.ConnectionMain()
  modHelpVariable.CalenderConnection()
  modBasic.LoadGeneralVariables()
  xallow = AllowCmdLogin(sUser, sPass, xdebug)

  If xallow = True Then
    If xdebug = True Then
      Print "User Authentication complete. Starting requested procedures . . "
      db.Debug = True
    Endif

    ''procedures
    If sType = "--sql-select" Then
      If modBasic.$ExpoRepoUser = True Then
        i = 0
        For Each stbl In modLongVar.$PrivSystemTable
          i = i + InStr(sVal, stbl)
        Next
        If i = 0 Then
          rsx = modDatabase.$myConn.Exec("SELECT " & modDBApp.GetSecureSQL(UnQuote(sVal)))
          If rsx.Available Then
            xx = New String[]
            For Each rsx
              yy = New String[]
              For Each ref In rsx.Fields
                yy.Add(CStr(rsx[ref.Name]))
              Next
              xx.Add(yy.Join(";"))
            Next
            Print xx.Join(gb.NewLine)
          Endif
        Else
          Print "Query not allowed"
        Endif
      Endif

    Else If sType = "--print-sqlresult" Then
      If modBasic.$ExpoRepoUser = True Then
        i = 0
        For Each stbl In modLongVar.$PrivSystemTable
          i = i + InStr(sVal, stbl)
        Next
        If i = 0 Then
          rsx = modDatabase.$myConn.Exec("SELECT " & modDBApp.GetSecureSQL(UnQuote(sVal)))
          If rsx.Available Then
            yy = New String[]
            For Each ref In rsx.Fields
              yy.Add(ref.Name)
            Next
            xPath = modCHTMLReport.GeneralHTMLReport(rsx, yy, "", "")
            Print File.Load(xPath)
            'modControlSub.OpenHTMLPreview(sVal, xPath, "ReportSize")
            Wait
          Endif
        Else
          Print "Query not allowed"
        Endif
      Endif

    Else If sType = "--mail-smtp" Then
      SMTPCommandLine(UnQuote(sVal))
      Wait 5

    Else If sType = "--mail-anyreport" Then
      SendScheduleMails(UnQuote(sVal), xdebug)
      Wait 5

    Else If sType = "--print-anyreport" Then
      xPath = GetCommadLineReport(UnQuote(sVal))
      Print File.Load(xPath)
      'modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
      Wait

    Else If sType = "--print-invoice" Then
      modBILLFormat.PrintSelectedInvoice(sVal)
      Wait

    Else If sType = "--print-expense" Then
      xPath = modCHTMLInvoice.ShowTotalExpensebyPatient(modDatabase.$myConn, sVal, "Complete")
      Print File.Load(xPath)
      'modControlSub.OpenHTMLPreview(sVal, xPath, "ReportSize")
      Wait

    Else If sType = "--print-patreport" Then
      xPath = modPatReports.ShowAllCompleteReport(sVal, MMain.$defUnit)
      Print File.Load(xPath)
      'modControlSub.OpenHTMLPreview(sVal, xPath, "ReportSize")
      Wait

    Else If sType = "--print-pathistory" Then
      ''confidential

    Else If sType = "--Hourly-Invoices" Then
      GetHourlyInvoiceReport("Invoice", sVal)
      Wait

    Else If sType = "--Hourly-Receipts" Then
      GetHourlyInvoiceReport("Receipt", sVal)
      Wait

    Else If sType = "--data-export" Then
      modCHTMLReport.CustomExportData(modDatabase.$myConn, sVal)
      Wait

    Else If sType = "--upload-folder" Then
      asx = Split(sVal, ":")
      If asx.Count > 1 Then
        modImage.GetPastDocFolderImport(asx[0], Replace(sVal, asx[0] & ":", ""))
        Wait
      Endif

    Endif

    If xdebug = True Then
      Print "======== Complete ============"
    Endif

  Endif

  If modDatabase.$myConn.Opened = True Then
    Try modDatabase.$calConn.Close()
    Try modDatabase.$myConn.Close()
  Endif

End

Public Sub SMTPCommandLine(sVarLst As String)

  Dim xxx As String[]
  Dim xvar As String[]
  Dim xemail As String[]

  xvar = New String[]
  xemail = New String[]
  xxx = Split(sVarLst, ";")
  xemail.Add(xxx[0])
  modDevAll.SendSMTPEmail(xemail, xvar, xvar, xxx[1], xxx[2], xxx[3])

End

Public Sub SendScheduleMails(sVal As String, xdebug As Boolean)

  Dim res As Result
  Dim hClient As New SmtpClient
  Dim xPath As String
  Dim xpdf As String

  Dim lstsendto As String[]
  Dim xlstcc As String[]
  Dim xlstbcc As String[]
  Dim xsend As String
  Dim xcc As String
  Dim xbcc As String

  Dim asx As String[]

  asx = Split(sVal, ";")
  modHelpVariable.$MACAddress = modApplication.GetMACAddress()
  res = modDatabase.$myConn.Exec("select fldtousers,fldcctype,fldccusers,fldfromhost,fldfromuser,fldfrompass,fldsender,fldsubject,fldcontent,fldreport from tblautoemail where fldhostmac=&1 and fldreport=&2", modHelpVariable.$MACAddress, asx[0])
  If res.Available Then
    res.MoveFirst
    If xdebug = True Then
      Print "Creating Report for attchment . . ."
    Endif
    xPath = GetCommadLineReport(sVal)
    xpdf = modPrint.ConvertHTMLToPDFString(xPath, "ReportSize")
    Wait

    lstsendto = Split(res["fldtousers"], ";")
    xlstcc = New String[]
    xlstbcc = New String[]
    If res["fldcctype"] = "CC" Then
      xlstcc.Insert(Split(res["fldccusers"], ";"))
    Else
      xlstbcc.Insert(Split(res["fldccusers"], ";"))
    Endif

    With hClient
      .Host = res["fldfromhost"]
      .Encrypt = Net.SSL
      .User = res["fldfromuser"]
      .Password = UnBase64(res["fldfrompass"])
      If xdebug = True Then
        .Debug = True
      Endif

      .Subject = res["fldsubject"]
      .From = res["fldsender"]
      For Each xsend In lstsendto
        .To.Add(xsend)
      Next
      For Each xcc In xlstcc
        .Cc.Add(xcc)
      Next
      For Each xbcc In xlstbcc
        .Bcc.Add(xbcc)
      Next
      .Body = res["fldcontent"]
      .Add(File.Load(xpdf), "application/pdf", "Attachment")
      If xdebug = True Then
        Print "Sending SMTP E-mail to " & lstsendto.Join(";")
      Endif
      .Send()
    End With

  Endif

End

Private Function GetCommadLineReport(xsubCmd As String) As String

  Dim xSubName As String
  Dim xPath As String
  Dim xargs As String[]

  xargs = Split(xsubCmd, ";")
  xSubName = xargs[0]

  ''Billing Report
  If xSubName = "InvoiceRangeSummary" Then  ''bill1,bill2
    xPath = modBillingReport.InvoiceReportBillingRangeSummary("Invoice", modDatabase.$myConn, xargs[1], xargs[2], "", "", "tblpatbilldetail")
  Else If xSubName = "UserCollectionByLocation" Then  ''bill1,bill2
    xPath = modBillingReport.InvoiceReportBillingRangeUserDetail("Invoice", modDatabase.$myConn, xargs[1], xargs[2], "", "", "tblpatbilldetail")
  Else If xSubName = "UserCollectionByDate" Then  ''bill1,bill2
    xPath = modBillingReport.InvoiceReportBillingRangeUserBrief("Invoice", modDatabase.$myConn, xargs[1], xargs[2], "", "", "tblpatbilldetail")
  Else If xSubName = "GroupCollcetionByLocation" Then  ''bill1,bill2
    xPath = modBillingReport.InvoiceReportBillingRangeGroupDetail("Invoice", modDatabase.$myConn, xargs[1], xargs[2], "", "", "tblpatbilling", "tblpatbilldetail")
  Else If xSubName = "GroupCollcetionSummary" Then  ''bill1,bill2
    xPath = modBillingReport.InvoiceReportBillingRangeGroupBrief("Invoice", modDatabase.$myConn, xargs[1], xargs[2], "", "", "tblpatbilling", "tblpatbilldetail")
  Else If xSubName = "InvoiceContentMismatch" Then  ''bill1,bill2
    xPath = modBillingReport.InvoiceReportDetailByMismatch("Invoice", modDatabase.$myConn, xargs[1], xargs[2], "", "", "tblpatbilling", "tblpatbilldetail")
  Else If xSubName = "InvoiceSummaryByAccount" Then  ''bill1,bill2
    xPath = modBillingReport.InvoiceReportBillingRangeAccount("Invoice", modDatabase.$myConn, xargs[1], xargs[2], "", "", "tblpatbilldetail")

  Endif

  Return xPath

End

Public Function CommandReportList() As String[]

  Dim xx As String[]

  xx = New String[]
  xx.Add("--Invoice Reports[InvoiceNo1,InvoiceNo2]--")
  xx.Add("InvoiceRangeSummary")
  xx.Add("UserCollectionByLocation")
  xx.Add("UserCollectionByDate")
  xx.Add("GroupCollcetionByLocation")
  xx.Add("GroupCollcetionSummary")
  xx.Add("InvoiceContentMismatch")
  xx.Add("InvoiceSummaryByAccount")

  xx.Add("--AccountReports--")
  xx.Add("AccountReport1")
  xx.Add("AccountReport2")
  xx.Add("AccountReport3")
  xx.Add("AccountReport4")
  xx.Add("AccountReport5")
  xx.Add("--CrossTab Reports [Date1,Date2,Row,Column,RatePlan,Comp,Visit,Dept]--")
  xx.Add("ConsultationCrossTabReport")

  Return xx

End

''============================ DATABASE ==========================================
''"--sync-patient"
Public Sub CmdSyncPatientRepo(sPatient As String, xdebug As Boolean)

  If xdebug = True Then
    modBasic.$DebugMode = True
    modBasic.$DebugDB = True
    modBasic.$DebugAPI = True
  Endif
  modHelpVariable.ConnectionMain()
  If modDatabase.$myConn.Opened = True Then
    modBasic.$PatRepoDBase = modGlobalSetting.ShowSettingFromDB("Repository/Database")
    modBasic.$PatRepoAutoSync = modGlobalSetting.ShowSettingFromDB("Repository/AutoSync")
    modRepository.TransferRemoConn(sPatient)
    Try modDatabase.$myConn.Close()
  Endif

End

''"--backup-local"
Public Sub CmdBackupLocalSelTable(sFolder As String, xdebug As Boolean)

  If xdebug = True Then
    modBasic.$DebugMode = True
    modBasic.$DebugDB = True
    modBasic.$DebugAPI = True
  Endif
  modHelpVariable.ConnectionMain()
  If modDatabase.$myConn.Opened = True Then
    modDatabase.BackUpCurrentDB(sFolder)
    Try modDatabase.$myConn.Close()
  Endif

End

''"--backup-ftp"
Public Sub CmdBackupFTPSelTable(xdebug As Boolean)

  Dim xx As String

  If xdebug = True Then
    modBasic.$DebugMode = True
    modBasic.$DebugDB = True
    modBasic.$DebugAPI = True
  Endif
  modHelpVariable.ConnectionMain()
  If modDatabase.$myConn.Opened = True Then
    xx = modDatabase.SendBackupToFTP()
    If xdebug = True Then
      Print xx
    Endif
    Try modDatabase.$myConn.Close()
  Endif

End

''"--upload-count"
Public Sub CmdUploadCountTable(sTable As String, xdebug As Boolean)

  Dim xtot As Integer

  If xdebug = True Then
    modBasic.$DebugAPI = True
  Endif
  modRepository.ReadRemoteRepoConfig()
  xtot = modXMySQL.GetXMYSQLHTTPCountJson(modRepository.$RepoURL, modRepository.$RepoUser, modRepository.$RepoPassword, sTable)
  Print sTable & " COUNT: " & xtot

End

''"--upload-repo"
Public Sub CmdUploadSelTable(xdebug As Boolean)

  Dim xlist As String[]

  If xdebug = True Then
    modBasic.$DebugMode = True
    modBasic.$DebugDB = True
    modBasic.$DebugAPI = True
  Endif
  modBasic.$FtpUploader = modSettings.ShowSettingFromFIle("GeneralSettings/FTPUploader")
  modHelpVariable.ConnectionMain()
  If modDatabase.$myConn.Opened = True Then
    modPatient.GetPatientNoPrefixes()
    xlist = modGlobalSetting.GetDBTableList("DataUpload/TableList")
    modRepository.UploadToRepository(xlist, xdebug)
    Try modDatabase.$myConn.Close()
  Endif

End

''"--upload-repo-group"
Public Sub CmdUploadGroupTable(xgroup As String, xdebug As Boolean)

  Dim xlist As String[]

  If xdebug = True Then
    modBasic.$DebugMode = True
    modBasic.$DebugDB = True
    modBasic.$DebugAPI = True
  Endif
  If xgroup = "Inventory" Then
    xlist = modLongVar.$RepoInventoryTables
  Else If xgroup = "Clinic" Then
    xlist = modLongVar.$RepoClinicTables
  Else If xgroup = "Account" Then
    xlist = modLongVar.$RepoAccountTables
  Endif
  modBasic.$FtpUploader = modSettings.ShowSettingFromFIle("GeneralSettings/FTPUploader")
  modHelpVariable.ConnectionMain()
  If modDatabase.$myConn.Opened = True Then
    modPatient.GetPatientNoPrefixes()
    modRepository.UploadToRepository(xlist, xdebug)
    Try modDatabase.$myConn.Close()
  Endif

End

''"--upload-repo-one"
Public Sub CmdUploadOneTable(sTable As String, sOption As String, xdebug As Boolean)

  If xdebug = True Then
    modBasic.$DebugMode = True
    modBasic.$DebugDB = True
    modBasic.$DebugAPI = True
  Endif
  modBasic.$FtpUploader = modSettings.ShowSettingFromFIle("GeneralSettings/FTPUploader")
  modHelpVariable.ConnectionMain()
  If modDatabase.$myConn.Opened = True Then
    modPatient.GetPatientNoPrefixes()
    modRepository.UploadSingleToRepository(sTable, sOption)
    Try modDatabase.$myConn.Close()
  Endif

End

Public Sub CmdUploadEncAllTable(encid As String, xdebug As Boolean)

  If xdebug = True Then
    modBasic.$DebugMode = True
    modBasic.$DebugDB = True
    modBasic.$DebugAPI = True
  Endif
  modBasic.$FtpUploader = modSettings.ShowSettingFromFIle("GeneralSettings/FTPUploader")
  modHelpVariable.ConnectionMain()
  If modDatabase.$myConn.Opened = True Then
    modPatient.GetPatientNoPrefixes()
    modRepository.UploadEncidToRepository(encid)
    Try modDatabase.$myConn.Close()
  Endif

End

''"--upload-repo-hourly"
' Public Sub CmdUploadSelTableHourly(xdebug As Boolean)
'
'   If xdebug = True Then
'     modBasic.$DebugMode = True
'     modBasic.$DebugDB = True
' modBasic.$DebugAPI = True
'   Endif
'
'   modBasic.$FtpUploader = modSettings.ShowSettingFromFIle("GeneralSettings/FTPUploader")
'   modHelpVariable.ConnectionMain()
'   If modDatabase.$myConn.Opened = True Then
'     modPatient.GetPatientNoPrefixes()
'
'     hTimer = New Timer As "MyTimer"
'     hTimer.Delay = 500
'     hTimer.Enabled = True
'     $Start = True
'   Endif
'
' End
'
' Public Sub MyTimer_Timer()
'    Dim xlist As String[]
'
'   If Minute(Now()) = 10 And If Second(Now()) = 10 Then
'     If $Start = True Then
'       $Start = False
'        xlist = modGlobalSetting.GetDBTableList("DataUpload/TableList")
'       modRepository.UploadToRepository(xlist,False)
'       $Start = True
'     Endif
'   Endif
'
' End

''"--uploadimg-repo"
Public Sub CmdUploadImgSelTable(xdebug As Boolean)

  If xdebug = True Then
    modBasic.$DebugMode = True
    modBasic.$DebugDB = True
    modBasic.$DebugAPI = True
  Endif
  modBasic.$FtpUploader = modSettings.ShowSettingFromFIle("GeneralSettings/FTPUploader")
  modHelpVariable.ConnectionMain()
  If modDatabase.$myConn.Opened = True Then
    modPatient.GetPatientNoPrefixes()
    modRepository.UploadImageToRepository(xdebug)
    Try modDatabase.$myConn.Close()
  Endif

End

''"--uploadimg-repo-one"
Public Sub CmdUploadOneImgSelTable(sTable As String, sLongID As Long, xdebug As Boolean)

  If xdebug = True Then
    modBasic.$DebugMode = True
    modBasic.$DebugDB = True
    modBasic.$DebugAPI = True
  Endif
  modBasic.$FtpUploader = modSettings.ShowSettingFromFIle("GeneralSettings/FTPUploader")
  modHelpVariable.ConnectionMain()
  If modDatabase.$myConn.Opened = True Then
    modPatient.GetPatientNoPrefixes()
    modRepository.UploadOneReportToRepository(sTable, sLongID)
    Try modDatabase.$myConn.Close()
  Endif

End

Public Sub CmdUploadImgEncAllTable(encid As String, xdebug As Boolean)

  If xdebug = True Then
    modBasic.$DebugMode = True
    modBasic.$DebugDB = True
    modBasic.$DebugAPI = True
  Endif
  modBasic.$FtpUploader = modSettings.ShowSettingFromFIle("GeneralSettings/FTPUploader")
  modHelpVariable.ConnectionMain()
  If modDatabase.$myConn.Opened = True Then
    modPatient.GetPatientNoPrefixes()
    modRepository.UploadImageEncToRepository(encid)
    Try modDatabase.$myConn.Close()
  Endif

End

''"--uploadpacs-repo"
Public Sub CmdUploadSelPacs(sHost As String, xModality As String, xdebug As Boolean)

  If xdebug = True Then
    modBasic.$DebugMode = True
    modBasic.$DebugDB = True
    modBasic.$DebugAPI = True
  Endif
  modBasic.$FtpUploader = modSettings.ShowSettingFromFIle("GeneralSettings/FTPUploader")
  modHelpVariable.ConnectionMain()
  If modDatabase.$myConn.Opened = True Then
    modPatient.GetPatientNoPrefixes()
    modRepository.UploadPACSToRepository(sHost, xModality)
    Try modDatabase.$myConn.Close()
  Endif

End

''============================ Invoice Upload to repository =================================
Public Sub UploadInvoiceRepository(sBillNo As String, xdebug As Boolean)

  Dim cClass As CCBMSUpload
  Dim rClass As CCBMSReturn
  Dim xout As String
  Dim res1 As Result

  If xdebug = True Then
    modBasic.$DebugMode = True
    modBasic.$DebugDB = True
    modBasic.$DebugAPI = True
  Endif

  modHelpVariable.ConnectionMain()
  modHelpVariable.CalenderConnection()
  If modDatabase.$myConn.Opened = True Then
    res1 = modDatabase.$myConn.Edit("tblfiscal", "fldbillno=&1 and (fldsync IS NULL or fldsync<>&2)", sBillNo, "200")
    If res1.Available Then
      If sBillNo Like "CAS" & "*" Then
        cClass = New CCBMSUpload(sBillNo)
        xout = cClass.CBMSOutput()
      Else If sBillNo Like "PHM" & "*" Then
        cClass = New CCBMSUpload(sBillNo)
        xout = cClass.CBMSOutput()

      Else If sBillNo Like "CRE" & "*" Then
        rClass = New CCBMSReturn(sBillNo)
        xout = rClass.CBMSOutput()
      Else If sBillNo Like "RET" & "*" Then
        rClass = New CCBMSReturn(sBillNo)
        xout = rClass.CBMSOutput()
      Endif

      res1["fldsync"] = Left(Trim(xout), 50)
      res1["xyz"] = False
      res1.Update
    Else
      Print "Already uploaded"
    Endif
  Endif
  Try modDatabase.$myConn.Close()

End

''========================== Schedule query ===================================
Public Sub ScheduleTask(xdebug As Boolean)

  Dim res As Result
  Dim xdt As Date
  Dim xschedule As String
  Dim idLock As Boolean

  xdt = Now()
  modHelpVariable.ConnectionMain()
  modBasic.LoadGeneralVariables()
  If modDatabase.$myConn.Opened = True Then
    modHelpVariable.$MACAddress = modApplication.GetMACAddress()

    xschedule = modGlobalSetting.ShowSettingFromDB("RemoteExec/ScheduleTask")
    If xschedule = "Yes" Then ''if schedule task present then fork connection
      If xdebug = True Then
        Print "Check for Schedule Task"
      Endif

      res = modDatabase.$myConn.Edit("tblcronjob", "fldtime>=&1 and fldtime<=&2 and fldstatus=&3 and fldhostmac=&4", modDate.StartSqlMinute(xdt), modDate.EndSqlMinute(xdt), True, modHelpVariable.$MACAddress)                       ''
      If res.Available Then
        idLock = modBillLock.LockTableForID("ExecScript")
        If idLock = True Then

          For Each res
            modDatabase.$myConn.Begin
            If res!fldcategory = "SQL INSERT" Then
              ExecuteSQLScript(res!fldscript, "INSERT")
              res["fldstatus"] = False
              res.Update
            Else If res!fldcategory = "SQL UPDATE" Then
              ExecuteSQLScript(res!fldscript, "UPDATE")
              res["fldstatus"] = False
              res.Update
            Endif
            modDatabase.$myConn.Commit
          Next

          modBillLock.ReleaseLockTable("ExecScript")
        Endif
      Endif ''if query present

    Endif ''if schedule setting allowed

    Try modDatabase.$myConn.Close()
  Endif ''if conn open

Catch
  modDatabase.$myConn.Rollback
  If idLock = True Then
    modBillLock.ReleaseLockTable("ExecScript")
  Endif
  modHelpVariable.CreateErrorReport()

End

Private Sub ExecuteSQLScript(xScript As String, sType As String)

  Dim squery As String[]
  Dim xx As String

  squery = Split(xScript, gb.NewLine)
  For Each xx In squery
    modDatabase.$myConn.Exec(sType & Space(1) & xx)
  Next

End

''============================== DB Termina Output =====================
Public Sub DisplayDBCommands(sCmd As String)

  Dim xx As String

  modHelpVariable.ReadConfigFile()
  If sCmd = "--check-db" Then
    modDBApp.CheckMySQLDatabaseError(modHelpVariable.$SysMainService, modHelpVariable.$SysMainHost, modHelpVariable.$SysMainUser, modHelpVariable.$SysMainPassword, modHelpVariable.$SysDataBase)
  Else If sCmd = "--status-db" Then
    xx = modDBApp.MySQLDatabaseReport(modHelpVariable.$SysMainService, modHelpVariable.$SysMainHost, modHelpVariable.$SysMainUser, modHelpVariable.$SysMainPassword)
  Else If sCmd = "--report-db" Then
    xx = modDBApp.MySQLDBPerconaReport(modHelpVariable.$SysMainService, modHelpVariable.$SysMainHost, modHelpVariable.$SysMainUser, modHelpVariable.$SysMainPassword, modHelpVariable.$SysDataBase)
  Else If sCmd = "--extended-status-db" Then
    xx = modDBApp.MysqlAdminValue(modHelpVariable.$SysMainService, modHelpVariable.$SysMainHost, modHelpVariable.$SysMainUser, modHelpVariable.$SysMainPassword, modHelpVariable.$SysMainPort, "extended-status")
  Else If sCmd = "--ping-db" Then
    xx = modDBApp.MysqlAdminValue(modHelpVariable.$SysMainService, modHelpVariable.$SysMainHost, modHelpVariable.$SysMainUser, modHelpVariable.$SysMainPassword, modHelpVariable.$SysMainPort, "ping")
  Else If sCmd = "--processlist-db" Then
    xx = modDBApp.MysqlAdminValue(modHelpVariable.$SysMainService, modHelpVariable.$SysMainHost, modHelpVariable.$SysMainUser, modHelpVariable.$SysMainPassword, modHelpVariable.$SysMainPort, "processlist")
  Else If sCmd = "--variables-db" Then
    xx = modDBApp.MysqlAdminValue(modHelpVariable.$SysMainService, modHelpVariable.$SysMainHost, modHelpVariable.$SysMainUser, modHelpVariable.$SysMainPassword, modHelpVariable.$SysMainPort, "variables")
  Else If sCmd = "--version-db" Then
    xx = modDBApp.MysqlAdminValue(modHelpVariable.$SysMainService, modHelpVariable.$SysMainHost, modHelpVariable.$SysMainUser, modHelpVariable.$SysMainPassword, modHelpVariable.$SysMainPort, "version")
  Else If sCmd = "--tuner-db" Then
    xx = modDBApp.MySQLTunerReport(modHelpVariable.$SysMainService, modHelpVariable.$SysMainHost, modHelpVariable.$SysMainUser, modHelpVariable.$SysMainPassword, modHelpVariable.$SysMainPort, 0, 0)
  Endif
  Print xx

End

''======================== Scheduled Invoice Report ==================
Public Sub GetHourlyInvoiceReport(sType As String, xemail As String)

  Dim sPath As String
  Dim sql As String
  Dim res As Result
  Dim sHead As String[] = ["DateTime", "Type", "Invoice", "SubTotal", "Disc", "Total", "RecvAMT", "Deposit"]
  Dim dt1 As Date
  Dim dt2 As Date
  Dim xdate As Date
  Dim xPDFPath As String
  Dim xparam2 As String

  Dim xvar As String[]
  Dim xmails As String[]

  xdate = DateAdd(Now(), gb.Hour, -1)
  dt1 = modDate.StartSqlHour(xdate)
  dt2 = modDate.EndSqlHour(xdate)
  xparam2 = Format(dt1, gb.Standard) & " TO " & Format(dt2, gb.Standard)

  If sType = "Invoice" Then
    sql = "select fldtime,fldbilltype,fldbillno,flditemamt,flddiscountamt,(flditemamt+fldtaxamt-flddiscountamt),fldreceivedamt,fldcurdeposit from tblpatbilldetail where fldtime>=&1 and fldtime<=&2"
  Else If sType = "Receipt" Then
    sql = "select fldtime,fldbilltype,fldbillno,flditemamt,flddiscountamt,(flditemamt+fldtaxamt-flddiscountamt),fldreceivedamt,fldcurdeposit from tbltempbilldetail where fldtime>=&1 and fldtime<=&2"
  Endif
  res = modDatabase.$myConn.Exec(sql, dt1, dt2)
  sPath = modCHTMLReport.GeneralHTMLReport(res, sHead, sType & " Report", xparam2)
  If Exist(sPath) Then
    xPDFPath = modPrint.ConvertHTMLToPDFString(sPath, "ReportSize")
    If xPDFPath Then
      xvar = New String[]
      xmails = New String[]
      xmails.Add(xemail)
      modDevAll.SendSMTPEmail(xmails, xvar, xvar, sType & " Report", sType & " Report For " & xparam2, xPDFPath)
    Endif
  Endif

End
