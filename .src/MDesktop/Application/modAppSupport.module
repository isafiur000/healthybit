' Gambas module file

Public $ImagePort As Integer = 5555
Public $alphabetAll As String[] = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]

'NOTE: ----------------------------  Workspace function -------------------------------------------
Public Function FindWorkProgressBar(LogInType As String) As ProgressBar

  Dim xx As ProgressBar

  If MMain.$SISHAppMode = "HIS" Or If MMain.$SISHAppMode = "REP" Then ''remoteoptimized
    If LoginType = "Account" Then
      xx = fmAccount.ProgressBar1
    Else If LoginType = "Cashier" Then
      xx = fmCashier.ProgressBar1
    Else If LoginType = "Record" Then
      xx = fmRecord.ProgressBar1
    Else If LoginType = "Medical" Then
      xx = fmMedical.ProgressBar1
    Else If LoginType = "Technologist" Then
      xx = fmTechnologist.ProgressBar1
    Else If LoginType = "Technician" Then
      xx = fmTechnician.ProgressBar1
    Else If LoginType = "Consultant" Then
      xx = fmConsultant.ProgressBar1
    Else If LoginType = "Clinician" Then
      xx = fmOfficer.ProgressBar1
    Else If LoginType = "Research" Then
      xx = fmResearch.ProgressBar1
    Else If LoginType = "Purchase" Then
      xx = fmPurchase.ProgressBar1
    Else If LoginType = "Store" Then
      xx = fmStore.ProgressBar1
    Else If LoginType = "Pharmacist" Then
      xx = fmPharmacist.ProgressBar1
    Else If LoginType = "Dispensar" Then
      xx = fmDispensar.ProgressBar1
    Endif

  Else If MMain.$SISHAppMode = "POL" Then
    If LoginType = "Account" Then
      xx = fmAccount.ProgressBar1
    Else If LoginType = "Cashier" Then
      xx = fmCashier.ProgressBar1
    Else If LoginType = "Record" Then
      xx = fmRecord.ProgressBar1
    Else If LoginType = "Technologist" Then
      xx = fmTechnologist.ProgressBar1
    Else If LoginType = "Technician" Then
      xx = fmTechnician.ProgressBar1
    Else If LoginType = "Pharmacist" Then
      xx = fmAccountRE.ProgressBar1
    Else If LoginType = "Dispensar" Then
      xx = fmDispensarRE.ProgressBar1
    Endif

  Else If MMain.$SISHAppMode = "LAB" Then
    If LoginType = "Account" Then
      xx = fmAccount.ProgressBar1
    Else If LoginType = "Cashier" Then
      xx = fmCashier.ProgressBar1
    Else If LoginType = "Record" Then
      xx = fmRecord.ProgressBar1
    Else If LoginType = "Technologist" Then
      xx = fmTechnologist.ProgressBar1
    Else If LoginType = "Technician" Then
      xx = fmTechnician.ProgressBar1
    Endif

  Else If MMain.$SISHAppMode = "PHM" Then
    If LoginType = "Pharmacist" Then
      xx = fmAccountRE.ProgressBar1
    Else If LoginType = "Dispensar" Then
      xx = fmDispensarRE.ProgressBar1
    Else If LoginType = "Record" Then
      xx = fmRecord.ProgressBar1
    Endif
  Endif

  Return xx

End

''==== ONLY FOR DESKTOP APPLICATION =====
Public Function FindWorSpace(LoginType As String) As Workspace

  Dim xx As Workspace

  If MMain.$SISHAppMode = "HIS" Or If MMain.$SISHAppMode = "REP" Then ''remoteoptimized
    If LoginType = "Account" Then
      xx = fmAccount.Workspace1
    Else If LoginType = "Cashier" Then
      xx = fmCashier.Workspace1
    Else If LoginType = "Record" Then
      xx = fmRecord.Workspace1
    Else If LoginType = "Medical" Then
      xx = fmMedical.Workspace1
    Else If LoginType = "Technologist" Then
      xx = fmTechnologist.Workspace1
    Else If LoginType = "Technician" Then
      xx = fmTechnician.Workspace1
    Else If LoginType = "Consultant" Then
      xx = fmConsultant.Workspace1
    Else If LoginType = "Clinician" Then
      xx = fmOfficer.Workspace1
    Else If LoginType = "Research" Then
      xx = fmResearch.Workspace1
    Else If LoginType = "Purchase" Then
      xx = fmPurchase.Workspace1
    Else If LoginType = "Store" Then
      xx = fmStore.Workspace1
    Else If LoginType = "Pharmacist" Then
      xx = fmPharmacist.Workspace1
    Else If LoginType = "Dispensar" Then
      xx = fmDispensar.Workspace1
    Endif

  Else If MMain.$SISHAppMode = "POL" Then
    If LoginType = "Account" Then
      xx = fmAccount.Workspace1
    Else If LoginType = "Cashier" Then
      xx = fmCashier.Workspace1
    Else If LoginType = "Record" Then
      xx = fmRecord.Workspace1
    Else If LoginType = "Technologist" Then
      xx = fmTechnologist.Workspace1
    Else If LoginType = "Technician" Then
      xx = fmTechnician.Workspace1
    Else If LoginType = "Pharmacist" Then
      xx = fmAccountRE.Workspace1
    Else If LoginType = "Dispensar" Then
      xx = fmDispensarRE.Workspace1
    Endif

  Else If MMain.$SISHAppMode = "LAB" Then
    If LoginType = "Account" Then
      xx = fmAccount.Workspace1
    Else If LoginType = "Cashier" Then
      xx = fmCashier.Workspace1
    Else If LoginType = "Record" Then
      xx = fmRecord.Workspace1
    Else If LoginType = "Technologist" Then
      xx = fmTechnologist.Workspace1
    Else If LoginType = "Technician" Then
      xx = fmTechnician.Workspace1
    Endif

  Else If MMain.$SISHAppMode = "PHM" Then
    If LoginType = "Pharmacist" Then
      xx = fmAccountRE.Workspace1
    Else If LoginType = "Dispensar" Then
      xx = fmDispensarRE.Workspace1
    Else If LoginType = "Record" Then
      xx = fmRecord.Workspace1
    Endif
  Endif

  Return xx

End

Public Sub SetWorkSpaceImage()

  Dim sFile As String
  Dim img As Image
  Dim stimg As Image
  Dim xback As String

  sFile = modSettings.ShowUserWiseSettingFromFIle("AppSetting_DeskPicture")
  If sFile And If Exist(sFile) Then
    Try img = Image.Load(sFile)
    If img Then
      stimg = img.Stretch(FindWorSpace(modHelpVariable.$LogInCategory).Width, FindWorSpace(modHelpVariable.$LogInCategory).Height)
      FindWorSpace(modHelpVariable.$LogInCategory).Image = stimg
    Endif
  Else
    xback = modSettings.ShowUserWiseSettingFromFIle("AppSetting_DeskBackColor")
    If xback Then
      FindWorSpace(modHelpVariable.$LogInCategory).Background = CInt(xback)
    Endif
  Endif

End

Public Sub SetWorkSpaceTabbing()

  Dim sTab As String

  sTab = modSettings.ShowUserWiseSettingFromFIle("AppSetting_TabPosition")
  If sTab Then
    If sTab = "Top" Then
      FindWorSpace(modHelpVariable.$LogInCategory).Orientation = Align.Top
    Else If sTab = "Bottom" Then
      FindWorSpace(modHelpVariable.$LogInCategory).Orientation = Align.Bottom
    Endif
  Endif

End

Public Sub PlayMediaFile()

  If Dialog.OpenFile() Then Return
  modBasic.$mediaPath = Dialog.Path
  If modBasic.$MultiMediaFormat = "Embedded" Then
    fmMediaPlay.MediaView1.URL = modBasic.$mediaPath
    fmMediaPlay.Enabled = True
  Else
    modDevice.DesktopOpenFile(Dialog.Path)
  Endif

End

Public Sub LogLoginFrequency()

  Dim xx As Integer
  Dim xver As String

  xver = modSettings.ShowLogValues("LogIn_Frequency/" & Application.Version)
  If xver Then
    xx = CInt(xver)
  Else
    xx = 0
  Endif
  modSettings.SaveValuesToLog("LogIn_Frequency/" & Application.Version, xx + 1)

  If xx = 0 Then
    fmAppUpdate.ShowModal
  Endif

End

'NOTE: ------------------------------- SOCKET PROGRAMMING ----------------------------
Public Function GetSelectedPort(userid As String) As Integer

  Dim xx As Integer

  xx = 35900 + modGeneral.GetMainUserCode(userid)
  Return xx

End

Public Function GetTransferPort(userid As String) As Integer

  Dim xx As Integer

  xx = 45900 + modGeneral.GetMainUserCode(userid)
  Return xx

End

Public Sub OpenPortForListening(SvrSock As ServerSocket)

  SvrSock.Type = Net.Internet
  SvrSock.Port = modAppSupport.GetSelectedPort(modBasic.$lbluser)
  modBasic.DebugString("Open Port " & CStr(SvrSock.Port) & " and Listen to it")
  SvrSock.Listen()

Catch
  modBasic.DebugString(Error.Text)

End

Public Sub GetMessaging(SvrSock As ServerSocket)

  SvrSock.Type = Net.Internet
  SvrSock.Port = modAppSupport.GetTransferPort(modBasic.$lbluser)
  modBasic.DebugString("Open Port " & CStr(SvrSock.Port) & " and Listen to it")
  SvrSock.Listen()

Catch
  modBasic.DebugString(Error.Text)

End

Public Function FindServerSocket(LoginType As String) As ServerSocket

  Dim xx As ServerSocket

  If LoginType = "Account" Then
    xx = fmAccount.ServerSocket1
  Else If LoginType = "Cashier" Then
    xx = fmCashier.ServerSocket1
  Else If LoginType = "Record" Then
    xx = fmRecord.ServerSocket1
  Else If LoginType = "Medical" Then
    xx = fmMedical.ServerSocket1
  Else If LoginType = "Technologist" Then
    xx = fmTechnologist.ServerSocket1
  Else If LoginType = "Technician" Then
    xx = fmTechnician.ServerSocket1
  Else If LoginType = "Consultant" Then
    xx = fmConsultant.ServerSocket1
  Else If LoginType = "Clinician" Then
    xx = fmOfficer.ServerSocket1
  Else If LoginType = "Research" Then
    xx = fmResearch.ServerSocket1
  Else If LoginType = "Purchase" Then
    xx = fmPurchase.ServerSocket1
  Else If LoginType = "Store" Then
    xx = fmStore.ServerSocket1
  Else If LoginType = "Pharmacist" Then
    xx = fmPharmacist.ServerSocket1
  Else If LoginType = "Dispensar" Then
    xx = fmDispensar.ServerSocket1
  Endif

  Return xx

End

Public Function FindTransferSocket(LoginType As String) As ServerSocket

  Dim xx As ServerSocket

  If LoginType = "Account" Then
    xx = fmAccount.ServerSocket2
  Else If LoginType = "Cashier" Then
    xx = fmCashier.ServerSocket2
  Else If LoginType = "Record" Then
    xx = fmRecord.ServerSocket2
  Else If LoginType = "Medical" Then
    xx = fmMedical.ServerSocket2
  Else If LoginType = "Technologist" Then
    xx = fmTechnologist.ServerSocket2
  Else If LoginType = "Technician" Then
    xx = fmTechnician.ServerSocket2
  Else If LoginType = "Consultant" Then
    xx = fmConsultant.ServerSocket2
  Else If LoginType = "Clinician" Then
    xx = fmOfficer.ServerSocket2
  Else If LoginType = "Research" Then
    xx = fmResearch.ServerSocket2
  Else If LoginType = "Purchase" Then
    xx = fmPurchase.ServerSocket2
  Else If LoginType = "Store" Then
    xx = fmStore.ServerSocket2
  Else If LoginType = "Pharmacist" Then
    xx = fmPharmacist.ServerSocket2
  Else If LoginType = "Dispensar" Then
    xx = fmDispensar.ServerSocket2
  Endif

  Return xx

End

''------------------------ Send Secure Message ---------------------------------
Private Sub SaveSettingsToTransferFile(strSetting As String, strVal As String)

  Dim ConfFile As Settings

  ConfFile = New Settings(modHelpVariable.AppCacheDir &/ "send.conf")
  ConfFile[strSetting] = Trim(strVal)

End

Public Sub SendMessageTo(ToUser As String, ToUserIP As String, txtsubject As String, txtcontent As String, sAttchment As String, sReply As Boolean, sImportant As Boolean)

  Dim MySock As Socket
  Dim sPath As String
  Dim xx As String
  Dim yy As String
  Dim hFile As File
  Dim sLine As String
  Dim hMsg As String

  Inc Application.Busy

  sPath = modHelpVariable.AppCacheDir &/ "send.conf"
  If sReply = True Then
    xx = "Yes"
  Else If sReply = False Then
    xx = "No"
  Endif
  If sImportant = True Then
    yy = "Yes"
  Else If sImportant = False Then
    yy = "No"
  Endif

  If Exist(sPath) Then Kill sPath
  File.Save(sPath, "")
  MySock = New Socket As "MySock"
  MySock.Host = ToUserIP
  MySock.Port = modAppSupport.GetTransferPort(ToUser)
  modBasic.DebugString("Connect to Port " & CStr(MySock.Port) & " on Host " & MySock.Host)
  MySock.Connect()

  SaveSettingsToTransferFile("Message/To", ToUser)
  SaveSettingsToTransferFile("Message/From", modBasic.$lbluser)
  SaveSettingsToTransferFile("Message/Subject", txtsubject)
  SaveSettingsToTransferFile("Message/Content", txtcontent)
  SaveSettingsToTransferFile("Message/Attachment", File.Name(sAttchment))
  SaveSettingsToTransferFile("Message/Reply", xx)
  SaveSettingsToTransferFile("Message/Important", yy)

  hFile = Open sPath For Input
  modBasic.DebugString("Open File " & sPath)
  hMsg = ""
  While Not Eof(hFile)
    Line Input #hFile, sLine
    hMsg = hMsg & sLine & gb.NewLine
  Wend

  While (MySock.Status <> 7) And (MySock.Status > 0)
    Wait 0.1
  Wend

  If MySock.Status = Net.Connected Then
    Write #MySock, hMsg, Len(hMsg)
    Close #MySock
  Endif

  If Exist(sPath) Then Kill sPath
  Dec Application.Busy

End

''----------------------------------  Send SMS --------------------------------
Public Sub SendSMSSingle(sPhone As String, sMessage As String)

  Dim xx As String
  Dim mesStr As String
  Dim sLine As String[]
  Dim sSms As String[]
  Dim arcmd As String[]
  Dim brcmd As String[]
  Dim xout As String

  Dim xpath As String
  Dim xexc As String
  Dim xapi As String
  Dim xstr As String
  Dim apipath As String
  Dim devPath As String

  xapi = modSettings.ShowSettingFromFIle("SMSMethod/Default")
  Inc Application.Busy
  If xapi = "KDEConnect" Then
    If System.Exist("kdeconnect-cli") = True Then
      devPath = modSettings.ShowSettingFromFIle("KDEConnect/DefaultPath")
      If devPath Then
        arcmd = ["kdeconnect-cli", "--send-sms", sMessage, "--destination", sPhone, "--device", devPath]
        modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
        Exec arcmd Wait
        modAppSupport.SaveSMSEntry(sPhone, sMessage, "Sent", "")
      Endif
    Else
      modApplSub.InstallSelectedApplication(["kdeconnect", "qml-module-org-kde-people"])
    Endif

  Else If xapi = "GSM Modem" Then
    If System.Exist("mmcli") = True Then
      If modGSM.$ModemEnabled = True Then
        mesStr = "--messaging-create-sms=text='" & sMessage & "',number='" & sPhone & "',delivery-report-request='yes'"
        arcmd = ["mmcli", "-m", modGSM.$ModemIndex, mesStr]
        modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
        Exec arcmd To xx

        sLine = Split(xx, gb.NewLine)
        If Trim(sLine[0]) = "Successfully created new SMS:" Then
          sSms = Split(Trim(sLine[1]), Space(1))
        Endif
        brcmd = ["mmcli", "-s", sSms[0], "--send"]
        modBasic.DebugString("Execute " & brcmd.Join(Space(1)))
        Exec brcmd To xout
        modAppSupport.SaveSMSEntry(sPhone, sMessage, "Sent", xout)
      Endif
    Else
      modApplSub.InstallSelectedApplication(["modemmanager"])
    Endif

  Else
    xpath = modSettings.ShowSettingFromFIle("SMS_API/DefaultPath")
    xexc = modSettings.ShowSettingFromFIle("SMS_API/DefaultExec")
    If Exist(xpath) Then
      xstr = File.Load(xpath)
      xstr = Replace(xstr, "{SMSPhoneNumber}", sPhone)
      xstr = Replace(xstr, "{SMSMessage}", sMessage)
      apipath = Temp()
      File.Save(apipath, xstr)

      arcmd = New String[]
      If xexc Then
        arcmd.Add(xexc)
      Endif
      arcmd.Add(apipath)
      modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
      Exec arcmd To xout
      Wait
      modAppSupport.SaveSMSEntry(sPhone, sMessage, "Sent", xout)
    Endif

  Endif
  Dec Application.Busy

End

Public Sub SendSMSData(txtnow As LCDLabel)

  Dim xx As String
  Dim mesStr As String
  Dim sLine As String[]
  Dim sSms As String[]
  Dim arcmd As String[]
  Dim brcmd As String[]
  Dim xout As String

  Dim xpath As String
  Dim xexc As String
  Dim xapi As String
  Dim xstr As String
  Dim apipath As String
  Dim devPath As String

  Dim res As Result

  xapi = modSettings.ShowSettingFromFIle("SMSMethod/Default")
  xpath = modSettings.ShowSettingFromFIle("SMS_API/DefaultPath")
  xexc = modSettings.ShowSettingFromFIle("SMS_API/DefaultExec")
  devPath = modSettings.ShowSettingFromFIle("KDEConnect/DefaultPath")

  Inc Application.Busy
  res = modDatabase.$myConn.Edit("tblsmslog", "fldstatus=&1", "Waiting")
  If res.Available Then
    For Each res
      If xapi = "KDEConnect" Then
        If System.Exist("kdeconnect-cli") = True Then
          If devPath Then
            arcmd = ["kdeconnect-cli", "--send-sms", res["fldsmstext"], "--destination", res["fldtarget"], "--device", devPath]
            modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
            Exec arcmd To xout
            Wait
            txtnow.Text = "SMS sent to " & res["fldtarget"]
            res["fldcomment"] = xout
            res["fldstatus"] = "Sent"
            res["fldsmsdate"] = Now()
            res.Update
          Endif
        Else
          modApplSub.InstallSelectedApplication(["kdeconnect", "qml-module-org-kde-people"])
        Endif

      Else If xapi = "GSM Modem" Then
        If System.Exist("mmcli") = True Then
          If modGSM.$ModemEnabled = True Then
            mesStr = "--messaging-create-sms=text='" & res["fldsmstext"] & "',number='" & res["fldtarget"] & "',delivery-report-request='yes'"
            arcmd = ["mmcli", "-m", modGSM.$ModemIndex, mesStr]
            modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
            Exec arcmd To xx

            sLine = Split(xx, gb.NewLine)
            If Trim(sLine[0]) = "Successfully created new SMS:" Then
              sSms = Split(Trim(sLine[1]), Space(1))
            Endif
            brcmd = ["mmcli", "-s", sSms[0], "--send"]
            modBasic.DebugString("Execute " & brcmd.Join(Space(1)))
            Exec brcmd To xout
            Wait
            txtnow.Text = "SMS sent to " & res["fldtarget"]
            res["fldcomment"] = xout
            res["fldstatus"] = "Sent"
            res["fldsmsdate"] = Now()
            res.Update
          Endif
        Else
          modApplSub.InstallSelectedApplication(["modemmanager"])
        Endif

      Else
        If Exist(xpath) Then
          xstr = File.Load(xpath)
          xstr = Replace(xstr, "{SMSPhoneNumber}", res["fldtarget"])
          xstr = Replace(xstr, "{SMSMessage}", res["fldsmstext"])
          apipath = Temp()
          File.Save(apipath, xstr)

          arcmd = New String[]
          If xexc Then
            arcmd.Add(xexc)
          Endif
          arcmd.Add(apipath)
          modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
          Exec arcmd To xout
          Wait
          txtnow.Text = "SMS sent to " & res["fldtarget"]
          res["fldcomment"] = xout
          res["fldstatus"] = "Sent"
          res["fldsmsdate"] = Now()
          res.Update
        Endif

      Endif
    Next
  Endif
  Dec Application.Busy

End

'NOTE: ---------------------------- FOR APPLICATION Log --------------------------------------
Public Sub RecordPatientActivity(sCategory As String, frm As String, sActivity As String, sComment As String)

  Dim res As Result

  res = modDatabase.$myConn.Create("tblactivity")
  res["fldfrmname"] = frm
  res["fldcategory"] = sCategory
  res["fldactivity"] = sActivity
  res["fldcomment"] = sComment
  res["flduserid"] = modBasic.$lbluser
  res["fldtime"] = Now()
  res["fldcomp"] = modBasic.$compID
  res["fldsave"] = True
  res["fldhostmac"] = modHelpVariable.$MACAddress
  res.Update

End

Public Sub RecordSystemLog()

  Dim res As Result
  Dim xird As String

  If modDatabase.$myConn.Tables.Exist("tblsystemlog") Then
    modBasic.DebugString("Inserting Application usage log")
    modDatabase.$myConn.Delete("tblsystemlog", "fldindex=&1", modHelpVariable.$MACAddress)
    If modHelpVariable.$IRDLevel = "Yes" Then
      xird = "IRD"
    Else
      xird = ""
    Endif
    res = modDatabase.$myConn.Create("tblsystemlog")
    res["fldindex"] = modHelpVariable.$MACAddress
    res["flduser"] = modBasic.$lbluser
    res["fldcomp"] = modBasic.$compID
    res["fldlogin"] = modHelpVariable.$LogInCategory
    res["fldentrytime"] = Now()
    res["fldhostuser"] = System.User.Name
    res["fldhostip"] = modHelpVariable.$localIP
    res["fldhostname"] = System.Host
    res["fldhostmac"] = modHelpVariable.$MACAddress
    res["flddevicepath"] = Application.Name & " : " & Application.Version & " : " & xird
    res["fldversion"] = ""
    res["fldmainserver"] = modHelpVariable.$SysMainHost
    res["fldreadserver"] = modHelpVariable.$SysExtHost
    res["fldfallserver"] = modHelpVariable.$SysFallHost
    res["fldftpserver"] = modHelpVariable.$SysFTPHost
    Try res.Update()
  Endif

End

Public Sub SaveMessageLog(sTarget As String, sText As String, sType As String)

  Dim res As Result

  If modDatabase.$myConn.Tables.Exist("tblmessagelog") Then
    modBasic.DebugString("Inserting Message Log")
    res = modDatabase.$myConn.Create("tblmessagelog")
    res["fldwindow"] = sType
    res["fldtarget"] = sTarget
    res["fldmesstext"] = sText
    res["flduserid"] = modBasic.$lbluser
    res["fldtime"] = Now()
    res["fldcomp"] = modBasic.$compID
    res["fldhostmac"] = modHelpVariable.$MACAddress
    res["fldhostuser"] = System.User.Name
    res["fldhostip"] = modHelpVariable.$localIP
    res["fldhostname"] = System.Host
    res.Update
  Endif

End

Public Sub SaveSMSEntry(sTarget As String, sText As String, xStatus As String, xOutput As String)

  Dim res As Result

  If modDatabase.$myConn.Tables.Exist("tblsmslog") Then
    res = modDatabase.$myConn.Create("tblsmslog")
    res["fldwindow"] = modHelpVariable.$LogInCategory
    res["fldtarget"] = sTarget
    res["fldsmstext"] = sText
    res["flduserid"] = modBasic.$lbluser
    res["fldtime"] = Now()
    res["fldcomp"] = modBasic.$compID
    If xStatus = "Waiting" Then
      res["fldstatus"] = "Waiting"
      res["fldcomment"] = ""
      res["fldsmsdate"] = ""
    Else If xStatus = "Sent" Then
      res["fldcomment"] = xOutput
      res["fldstatus"] = "Sent"
      res["fldsmsdate"] = Now()
    Endif

    res["fldhostmac"] = modHelpVariable.$MACAddress
    res["fldhostuser"] = System.User.Name
    res["fldhostip"] = modHelpVariable.$localIP
    res["fldhostname"] = System.Host
    res.Update
  Endif

End

''---------------------------- Initial Setup --------------------------
Public Sub AddRecordLoginParam(sCon As Connection, sUser As String, sPass As String, sRoot As String, xcompID As String, sDept As String)

  Dim res As Result
  Dim res1 As Result
  Dim res2 As Result

  If sUser And If sPass And If sRoot Then
    res = sCon.Create("tbluser")
    res["flduserid"] = sUser
    res["fldusername"] = "System"
    res["fldpass"] = modPassword.EncryptSimple(sPass)
    res["fldroot"] = Base64(sRoot)
    res["fldcategory"] = "Admin"
    res["fldcode"] = 1
    res["fldfromdate"] = Date()
    res["fldtodate"] = Date()
    res["fldstatus"] = "Active"
    res["fldfaculty"] = True
    res["fldpayable"] = False
    res["fldreferral"] = False
    res["fldopconsult"] = False
    res["fldipconsult"] = False
    res["fldsigna"] = False
    res["fldreport"] = False
    res.Update()

    res1 = sCon.Create("tbluseraccess")
    res1["flduserid"] = sUser
    res1["fldaccess"] = Base64(sDept)
    res1.Update()

    res2 = sCon.Create("tblcompaccess")
    res2["flduserid"] = sUser
    res2["fldcomp"] = xcompID
    res2.Update()

    Message.Info(("Information Updated"), "OK")
  Endif

End

Public Sub AddInitialAccessSetup(sCon As Connection, sMac As String, sHostUser As String, sHostIP As String, sHostName As String, xcompID As String)                                 ''

  Dim res As Result
  Dim rs As Result

  rs = sCon.Exec("select fldhostmac from tblmacaccess where fldhostmac=&1", sMac)
  If rs.Available = False Then
    res = sCon.Create("tblmacaccess")
    res["fldhostmac"] = sMac
    res["fldhostuser"] = sHostUser
    res["fldhostpass"] = Base64(modPassword.$HostLoginPassword)
    res["fldhostip"] = sHostIP
    res["fldhostname"] = sHostName
    res["fldcomp"] = xcompID
    If rs.Available = False Then
      res["fldcompname"] = modHelpVariable.$Department
      res["fldaccess"] = "Active"
    Else If rs.Available = True Then
      res["fldcompname"] = "Empty"
      res["fldaccess"] = "Inactive"
    Endif
    res["fldiptype"] = "Dynamic"
    res["fldcode"] = modGeneral.GetMaxMacAddCode()
    res.Update()
    Message.Info(("Access granted/requested"), "OK")
  Else
    Message.Info(("Duplicate Record"), "OK")
  Endif

End
