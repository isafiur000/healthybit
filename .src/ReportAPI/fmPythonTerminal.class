' Gambas class file

Private $sType As String
Private $sHead As String[]
Private $sPath As String

Private $aHead As String[]
Private $imgPath As String

Public Sub _new(sType As String, sHeads As String[], sPath As String)

  $sType = sType
  $sHead = sHeads
  $sPath = sPath

End

Public Sub Form_Open()

  Dim i As Integer

  modGeneralMain.ArrangeEmbedForms(Me, Panel1, "Vertical")
  Me.Icon = Picture[modGeneralMain.$strLogo]
  TerminalView1.Shell("ipython3")

  $aHead = $sHead.Copy()
  For i = 0 To $aHead.Count - 1
    $aHead[i] = "'" & $aHead[i] & "'"
  Next

  cmbdependent.List = $sHead
  cmbmodel.List = GetModelList($sType)
  cmbsplitdata.List = ["X_train", "X_test", "Y_train", "Y_test"]

End

Private Sub GetModelList(sType As String) As String[]

  Dim xlst As String[]

  xlst = New String[]
  If sType = "Bivariate" Then
    xlst.Add("Linear Regression")
    xlst.Add("Logistic Regression")
    xlst.Add("Polynomial Regression")
    xlst.Add("Support Vector Machine")
  Endif
  Return xlst

End

Public Sub btndatainstall_Click()

  Dim xList As String[]

  xList = New String[]
  xList.Add("ipython3")
  xList.Add("python3-numpy")
  xList.Add("python3-pandas")
  xList.Add("python3-matplotlib")
  xList.Add("python3-seaborn")
  xList.Add("python3-scipy")
  xList.Add("python3-sklearn")
  modApplSub.InstallSelectedApplication(xList)

End

Private Sub PressEnterKey()

  TerminalView1.Input(Chr$(10))

End

Private Sub TerminalInput(cmd As String)

  TerminalView1.Input(cmd)
  PressEnterKey()

End

Private Sub TerminalInputList(cmdList As String[])

  TerminalView1.Input(cmdList.Join(gb.NewLine))
  PressEnterKey()

End

Public Sub Form_Close()

  TerminalInput("exit")

End

''================================= Load data ===============
Public Sub btndatainit_Click()

  Dim xlibs As String[] = ["import numpy", "import pandas", "import sklearn", "import matplotlib", "import seaborn"]

  TerminalInputList(xlibs)
  btndataload.Enabled = True

End

Public Sub btndataload_Click()

  Dim cmdLst As New String[]

  cmdLst.Add("orig_data = pandas.read_csv(\"" & $sPath & "\", sep = '" & "\\" & "t" & "')")
  cmdLst.Add("orig_data.columns = " & "[" & $aHead.Join(", ") & "]")
  cmdLst.Add("orig_data")
  TerminalInputList(cmdLst)

  Panel3.Enabled = True

End

''======================== Data Processing ===========================
Public Sub btnordinalencode_Click()

  Dim cmdLst As New String[]
  Dim xList As String[]
  Dim aVal As String

  cmdLst.Add("from sklearn.preprocessing import OrdinalEncoder")
  cmdLst.Add("ord_enc = OrdinalEncoder()")
  xList = SelectListView("Variables to encode", $sHead, False)
  If xList.Count Then
    For Each aVal In xList
      cmdLst.Add("orig_data['" & aVal & "'] = ord_enc.fit_transform(orig_data[['" & aVal & "']]).astype('int')")
    Next
  Endif
  TerminalInputList(cmdLst)

End

Public Sub btndropmissing_Click()

  TerminalInput("orig_data = orig_data.dropna()")

End

Public Sub btnrandomrow_Click()

  TerminalInput("orig_data = orig_data.sample(frac = 1)")

End

Public Sub btndatacorrelation_Click()

  TerminalInput("orig_data.corr()")

End

Public Sub btnprocess_Click()

  TerminalInput("orig_data.info()")

End

Public Sub btnshowdata_Click()

  TerminalInput("orig_data")

End

''==================================== Split dataand process =======================
Public Sub btnsplidata_Click()

  Dim cmdLst As New String[]
  Dim trainval As Float

  If cmbdependent.Text Then
    trainval = valtrain.Value / 100
    cmdLst.Add("from sklearn.model_selection import train_test_split")
    cmdLst.Add("Y_data = orig_data['" & cmbdependent.Text & "']")
    cmdLst.Add("X_data = orig_data.drop(['" & cmbdependent.Text & "'], axis = 1)")
    cmdLst.Add("X_train, X_test, Y_train, Y_test = train_test_split(X_data ,Y_data , train_size = " & trainval & ", random_state=42)")
    TerminalInputList(cmdLst)

    btnmodeltrain.Enabled = True
  Endif

End

Public Sub btnnormalize_Click()

  Dim cmdLst As New String[]

  cmdLst.Add("from sklearn.preprocessing import StandardScaler")
  cmdLst.Add("SScaler = StandardScaler()")
  cmdLst.Add("X_train = SScaler.fit_transform(X_train)")
  cmdLst.Add("X_test = SScaler.fit_transform(X_test)")
  TerminalInputList(cmdLst)

End

Public Sub btnsplitshow_Click()

  If cmbsplitdata.Text Then
    TerminalInput(cmbsplitdata.Text)
  Endif

End

''--------------------------- Model training ===============================
Public Sub btnmodeltrain_Click()

  Dim cmdLst As New String[]

  Select cmbmodel.Text
    Case "Linear Regression"
      cmdLst.Add("from sklearn.linear_model import LinearRegression")
      cmdLst.Add("model = LinearRegression()")
      cmdLst.Add("model = model.fit(X_train, Y_train)")
    Case "Logistic Regression"
      cmdLst.Add("from sklearn.linear_model import LogisticRegression")
      cmdLst.Add("model = LogisticRegression()")
      cmdLst.Add("model = model.fit(X_train, Y_train)")
  End Select
  TerminalInputList(cmdLst)

  pnresult.Enabled = True

End

Public Sub btnshowaccuracy_Click()

  Select cmbmodel.Text
    Case "Linear Regression", "Logistic Regression"
      TerminalInput("print('Training Score = ', model.score(X_train, Y_train))")
      TerminalInput("print('Testing Score = ', model.score(X_test, Y_test))")
  End Select

End

Public Sub btnshowscatterplot_Click()

  Dim cmdLst As New String[]

  $imgPath = Temp() & ".png"
  cmdLst.Add("import matplotlib.pyplot as plt")
  cmdLst.Add("plt.scatter(X_train, Y_train, color = 'red')")
  cmdLst.Add("plt.plot(X_train, model.predict(X_train), color = 'blue')")
  cmdLst.Add("plt.title('Scatter Plot')")
  cmdLst.Add("plt.show()")
  TerminalInputList(cmdLst)

End
