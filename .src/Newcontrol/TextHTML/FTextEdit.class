' Gambas class file

Private $dictpath As String[]
Private $KeyList As String[]
Private $UserList As Variant[]
Private $aNoDict As String[]

Public Sub Form_Open()

  $aNoDict = New String[]
  cmbfont.List = modApplSub.GetFontsAllList()
  If $dictpath Then
    If $dictpath.Count Then
      ListBox1.List = modString.GetFirstLetterArray($dictpath)
    Endif
  Else
    $dictpath = New String[]
  Endif
  btnmenu.Menu = "mnufile"
  $KeyList = New String[]
  SetStatus()
  TextEdit1.SetFocus
  TextEdit1_Cursor

End

''=================== Procedures ===========================
Public Function GetHTMLText() As String

  Return TextEdit1.Text

End

Public Sub SetHTMLText(sText As String)

  TextEdit1.Text = sText

End

Public Function GetHTMLRichText() As String

  Dim xxx As String

  If Not Trim(TextEdit1.Text) Then
    xxx = ""
  Else
    If btnhtml.Value = True Then
      xxx = modStringSort.GetHTMLBodyRichText(TextEdit1.RichText)
    Else If btnhtml.Value = False Then
      xxx = TextEdit1.Text
    Endif
  Endif
  Return xxx

End

Public Sub SetHTMLRichText(sText As String)

  If modString.GetRichTextMode(sText) = True Then
    TextEdit1.RichText = sText
    btnhtml.Value = True
  Else
    ' ' TextEdit1.RichText = Replace(sText, gb.NewLine, "<br>") ''Why??
    TextEdit1.Text = sText
    btnhtml.Value = False
  Endif

End

Public Sub SetRichMode(sMode As Boolean)

  btnhtml.Value = sMode

End

Public Function GetRichMode() As Boolean

  Return btnhtml.Value

End

Public Sub SetDictionPath(sPath As String[])

  $dictpath = sPath

End

Public Function GetKeyList() As String[]

  Return $KeyList

End

Public Sub SetKeyList(sKey As String[])

  $KeyList = sKey

End

Public Sub SetUserList(sKey As Variant[])

  $UserList = sKey

End

Public Sub TextEdit1_Cursor()

  Object.Lock(btnBold)
  Object.Lock(btnItalic)
  Object.Lock(btnUnderline)
  Object.Lock(btnStrikeOut)
  Object.Lock(btnAlignLeft)
  Object.Lock(btnAlignCenter)
  Object.Lock(btnAlignRight)
  Object.Lock(btnAlignJustify)
  Object.Lock(cmbfont)
  Object.Lock(txtfontsize)
  Object.Lock(colorforeground)
  Object.Lock(colorbackground)

  btnBold.Value = TextEdit1.Format.Font.Bold
  btnItalic.Value = TextEdit1.Format.Font.Italic
  btnUnderline.Value = TextEdit1.Format.Font.Underline
  btnStrikeOut.Value = TextEdit1.Format.Font.StrikeOut

  Select Case TextEdit1.Format.Alignment
    Case Align.Left
      btnAlignLeft.Value = True
    Case Align.Right
      btnAlignRight.Value = True
    Case Align.Center
      btnAlignCenter.Value = True
    Case Align.Justify
      btnAlignJustify.Value = True
    Case Align.Normal
      btnAlignLeft.Value = True ' If the displayed langage is left to right written, that's OK. Otherwise...
  End Select

  colorforeground.Color = TextEdit1.Format.Color
  colorbackground.Color = TextEdit1.Format.Background
  cmbfont.Text = TextEdit1.Format.Font.Name
  txtfontsize.Value = TextEdit1.Format.Font.Size

  Object.UnLock(btnBold)
  Object.UnLock(btnItalic)
  Object.UnLock(btnUnderline)
  Object.UnLock(btnStrikeOut)
  Object.UnLock(btnAlignLeft)
  Object.UnLock(btnAlignCenter)
  Object.UnLock(btnAlignRight)
  Object.UnLock(btnAlignJustify)
  Object.UnLock(cmbfont)
  Object.UnLock(txtfontsize)
  Object.UnLock(colorforeground)
  Object.UnLock(colorbackground)

End

Public Sub btnBold_Click()

  TextEdit1.Format.Font.Bold = Last.Value

End

Public Sub btnItalic_Click()

  TextEdit1.Format.Font.Italic = Last.Value

End

Public Sub btnUnderline_Click()

  TextEdit1.Format.Font.Underline = Last.Value

End

Public Sub btnStrikeOut_Click()

  TextEdit1.Format.Font.StrikeOut = Last.Value

End

Public Sub btnAlignLeft_Click()

  TextEdit1.Format.Alignment = Align.Left

End

Public Sub btnAlignCenter_Click()

  TextEdit1.Format.Alignment = Align.Center

End

Public Sub btnAlignRight_Click()

  TextEdit1.Format.Alignment = Align.Right

End

Public Sub colorforeground_Change()

  TextEdit1.Format.Color = colorforeground.Color

End

Public Sub txtfontsize_Change()

  TextEdit1.Format.Font.Size = Last.Value
  TextEdit1.SetFocus

End

Public Sub cmbfont_Click()

  TextEdit1.Format.Font.Name = Last.text

End

Public Sub btnAlignJustify_Click()

  TextEdit1.Format.Alignment = Align.Justify

End

Public Sub colorbackground_Change()

  TextEdit1.Format.Background = colorbackground.Color

End

Public Sub btnkey_Click()

  Dim xval As String

  If $UserList And If $UserList.Count Then
    xval = MedicalSelectedUser("Select User", $UserList)
    If xval Then
      If $KeyList.Exist(xval) = False Then
        $KeyList.Add(xval)
      Endif
    Endif
  Endif

End

Public Sub btnundo_Click()

  TextEdit1.Undo()

End

Public Sub btnredo_Click()

  TextEdit1.Redo()

End

Public Sub btnzoomin_Click()

End

Public Sub btnzoomout_Click()

End

Private Sub SetStatus()

  If btnhtml.Value = True Then
    Panel6.Enabled = True
    Panel3.Enabled = True
    Panel7.Enabled = True
    Panel8.Enabled = True
    Panel4.Enabled = True
    Panel9.Enabled = True
    Panel11.Enabled = True
    Panel10.Enabled = True
    Panel2.Enabled = True
    btninserttext.Enabled = True
    btntable.Enabled = True
    btndict.Enabled = True
  Else If btnhtml.Value = False Then
    Panel6.Enabled = False
    Panel3.Enabled = False
    Panel7.Enabled = False
    Panel8.Enabled = False
    Panel4.Enabled = False
    Panel9.Enabled = False
    Panel11.Enabled = False
    Panel10.Enabled = False
    Panel2.Enabled = False
    btninserttext.Enabled = False
    btntable.Enabled = False
    btndict.Enabled = False
  Endif

End

Public Sub btnhtml_Click()

  SetStatus()

End

''===================== Insert table ======================
Private Function HTMLTableString(Row As Integer, Column As Integer) As String

  Dim Repo As String[]
  Dim xx As String
  Dim i As Integer
  Dim j As Integer

  Repo = New String[]
  Repo.Add("<style>")
  Repo.Add(".reportmid_table {border: 0px; border-collapse: collapse; padding: 7px;}")
  Repo.Add(".reportmid_table td {border: 1px solid black; padding: 7px;}")
  Repo.Add("</style>")

  If Row And If Column Then
    xx = modRepoTemplete.HTMLTableSyntax()
    For i = 1 To Row
      xx = xx & "<tr>" & gb.NewLine
      For j = 1 To Column
        xx = xx & "<td width=" & Quote(CStr(Floor(100 / Column)) & "%") & ">" & Space(1) & "</td>" & gb.NewLine
      Next
      xx = xx & "</tr>" & gb.NewLine
    Next
    xx = xx & "</table>"
    Repo.Add(xx)
  Endif

  Return Repo.Join(gb.NewLine)

End

Public Sub btntable_Click()

  Dim xParam As Integer[]

  xParam = TabelParam()
  If xParam And If xParam.Count = 2 Then
    TextEdit1.InsertRichText(HTMLTableString(xParam[0], xParam[1]))
  Endif

End

Public Sub btninserttext_Click()

  If Dialog.OpenFile() Then Return
  TextEdit1.RichText = TextEdit1.RichText & File.Load(Dialog.Path)

End

''====================== Menu ===============================
Public Sub btnclear_Click()

  TextEdit1.Format.Font.Underline = False
  TextEdit1.Format.Color = Color.TextForeground

End

Public Sub btnlower_Click()

  TextEdit1.RichText = Replace(TextEdit1.RichText, TextEdit1.Selection.Text, LCase(TextEdit1.Selection.Text))

End

Public Sub btnupper_Click()

  TextEdit1.RichText = Replace(TextEdit1.RichText, TextEdit1.Selection.Text, UCase(TextEdit1.Selection.Text))

End

Public Sub btnfirstup_Click()

  TextEdit1.RichText = Replace(TextEdit1.RichText, TextEdit1.Selection.Text, String.UCaseFirst(TextEdit1.Selection.Text))

End

Public Sub mnusimilar_Click()
  ''suggestions

End

Public Sub mnudictword_Click()

  If Len(Trim(TextEdit1.Selection.Text)) Then
    $dictpath.Add(TextEdit1.Selection.Text)
    ListBox1.List = modString.GetFirstLetterArray($dictpath)
  Endif

End

Public Sub mnukeywords_Click()

  Message.Info("[USERS]" & gb.NewLine & $KeyList.Join(gb.NewLine), ("OK"))

End

Public Sub mnureplace_Click()

  ''find and replace text

End

Public Sub mnuclearall_Click()

  If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
    TextEdit1.Text = ""
  Endif

End

Public Sub TextEdit1_KeyRelease()

  Dim xrepl As String
  Dim xval As String
  Dim curpos As Integer

  Dim curText As String
  Dim newWord As String
  Dim iPos As Integer
  Dim xList As String[]

  Dim sLine As String[]
  Dim prvlin As String
  Dim lstlin As String

  If TextEdit1.Selected Then
    If Key.Code = Key.Down Then
      xrepl = modSettings.ShowSettingFromFIle("AdvancedDictionary/" & TextEdit1.Selection.Text)
      If xrepl Then
        curpos = TextEdit1.Pos - Len(TextEdit1.Selection.Text)
        xList = Split(xrepl, ";")
        If xList And If xList.Count Then
          xval = DIctionaryList(xList)
          TextEdit1.Text = Replace(TextEdit1.Text, TextEdit1.Selection.Text, xval)         ''
          TextEdit1.Pos = curpos + Len(xval)
        Endif
      Endif
    Endif

  Else
    If Key.Code = Key.Down Then
      If modBasic.$dictPathList Then
        If Not TextEdit1.Text Then Return
        sLine = Split(TextEdit1.Text, gb.NewLine)
        prvlin = sLine.Copy(0, sLine.Count - 1).Join(gb.NewLine)
        lstlin = sLine[sLine.Count - 1]
        curText = modString.GetLastWordText(lstlin)
        iPos = modString.GetLastWordPosition(lstlin)
        If curText Then
          xList = modString.SelectStringArrayToText(modString.GetLastWordText(curText), $dictpath)
          If xList And If xList.Count Then
            newWord = DIctionaryList(xList)
            If prvlin Then
              TextEdit1.Text = prvlin & gb.NewLine & Left(lstlin, iPos - 1) & newWord
            Else
              TextEdit1.Text = Left(lstlin, iPos - 1) & newWord
            Endif
          Endif
        Endif
      Endif
    Else If Key.Code = Key.Right Then
      curpos = TextEdit1.Pos
      xval = Trim(Mid(TextEdit1.Text, curpos, 4))
      If modBasic.$RepoOptionList.Exist(xval) Then
        TextEdit1.Select(TextEdit1.Pos, Len(Trim(xval)))
      Endif
    Endif

  Endif

End

Public Sub ListBox1_Click()

  Dim xList As String[]
  Dim xx As String

  xList = modString.SelectStringArrayToText(ListBox1.Text, $dictpath)
  If xList.Count Then
    xx = DIctionaryList(xList)
    If xx Then
      TextEdit1.Insert(xx)
    Endif
  Endif
  TextEdit1.SetFocus

End

''======================== DICTIONARY =========================
Private Function GetSpellingMistake(sWord As String) As String

  Dim xx As String

  xx = "<span style='text-decoration: underline; color:#e01b24;'>" & sWord & "</span>"
  Return xx

End

Public Sub btndict_Click()

  Dim fich As String
  Dim sTxt As String
  Dim htm As String
  Dim ar As New String[]
  Dim sHtml As String

  htm = TextEdit1.RichText
  If btndict.Value Then
    Inc Application.Busy
    fich = Temp()
    File.Save(fich, TextEdit1.Text)
    If System.Exist("aspell") Then
      Shell "cat " & fich & "|aspell list " To sTxt
    Else
      modApplSub.InstallSelectedApplication(["aspell"])
    Endif
    ar = Split(sTxt, "/\n", "\\", True)
    For Each sTxt In ar
      If sTxt Then
        If $aNoDict.Find(sTxt) = -1 Then
          $aNoDict.Add(sTxt)
          htm = Replace(htm, sTxt, GetSpellingMistake(sTxt))
        Endif
      Endif
    Next
    TextEdit1.RichText = htm
    Dec Application.Busy
  Else
    If InStr(htm, "<span style='text-decoration: underline; color:#e01b24;'>") > 0 Then
      htm = Replace(htm, "<span style='text-decoration: underline; color:#e01b24;'>", "")
      htm = Replace(htm, "</span>", "")
    Endif
    $aNoDict.Clear()
    mnusuggesy.Children.Clear()
    TextEdit1.RichText = htm
  Endif
  Wait

End

Public Sub TextEdit1_DblClick()

  If Not btndict.value Then
    Return
  Endif
  Timer1.Start()

End

Public Sub Timer1_Timer()

  SearchWrongSpell()

End

Private Sub SearchWrongSpell()

  Dim s As String
  Dim n As Integer
  Dim ar, linea As String[]
  Dim m As Menu

  Timer1.Stop()
  s = TextEdit1.Selection.Text
  If s And If $aNoDict.Find(s) > -1 Then
    If System.Exist("aspell") Then
      Shell "echo " & s & "|aspell -a" To s
    Else
      modApplSub.InstallSelectedApplication(["aspell"])
    Endif
    ar = Split(s, "\n", "\\", True)
    For Each s In ar
      If Left(s, 1) <> "&" Then Continue
      linea = Split(Right(s, -InStr(s, ": ")), ", ", "\\", True)
      For n = 0 To linea.Max
        m = New Menu(mnusuggesy) As "suggestionList"
        m.Text = linea[n]
        m.Name = linea[n]
        m.Action = linea[n]
      Next
    Next
    mnuspell.Popup
  Endif

End

Public Sub mnusuggesy_Hide()

  mnusuggesy.Children.Clear()

End

Public Sub mnuadddict_Click()

  If System.Exist("aspell") Then
    Shell "echo \"*" & TextEdit1.Selection.Text & "\n#\"|aspell -a "
  Else
    modApplSub.InstallSelectedApplication(["aspell"])
  Endif

End

Public Sub Action_Activate(opcion As String) As String

  ' TextEdit1.RichText = Replace(TextEdit1.RichText, TextEdit1.Selection.Text, opcion)
  TextEdit1.RichText = Replace(TextEdit1.RichText, TextEdit1.Selection.Text, opcion)

End

''-------------- Size ----------------
Public Sub Form_Arrange()

  HPanel2.Height = Panel12.Top + Panel12.Height + 2

End
