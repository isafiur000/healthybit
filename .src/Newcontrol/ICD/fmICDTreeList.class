' Gambas class file

Private $SubListView As Variant[]
Private $FixedListGrp As Variant[]

Private $Conn As Connection
Private $sType As String
Private $selList As String[]
Private $erList As String[]
Private $allList As String[]
Private $sDefGroup As String
Private $sValue As String[]

Public Sub Run(sConn As Connection, sType As String, selList As String[], erList As String[], allList As String[], sDefGroup As String) As String[]

  $Conn = sConn
  $sType = sType
  $selList = selList
  $erList = erList
  $allList = allList
  $sDefGroup = sDefGroup
  If Me.ShowModal() Then Return $sValue

End

Public Sub Form_Open()

  modGeneralMain.ArrangeFormCentre(Me, "False")
  $sValue = New String[]
  If $sType = "Disease" Then
    SetFixedList()
    SetFixedListData()
  Else If $sType = "Procedure" Then
  Endif

  chkleftsub.Value = modBasic.$SearchBothSide
  modSettings.ShowCheckBox(chkgroup, "ClinicForms/ICDGroups")
  $SubListView = New Variant[]

End

Public Sub chkgroup_Click()

  modSettings.EnterCheckSetting(chkgroup, "ClinicForms/ICDGroups")

End

Public Sub Form_KeyRelease()

  If Key.Code = Key.Esc Then
    Me.Close
  Else If Key.Code = Key["S"] And If Key.Control Then
    btnadd_Click()
  Endif

End

Public Sub rboutpatient_Click()

  SetFixedListData()
  LoadDefinedDiagnosis("")
  modSettings.SaveSettingsToFile("ICDDiagnosis/FixedList", "OutPatient")

End

Public Sub rbemergency_Click()

  SetFixedListData()
  LoadDefinedDiagnosis("")
  modSettings.SaveSettingsToFile("ICDDiagnosis/FixedList", "Emergency")

End

Public Sub rbicdlist_Click()

  SetFixedListData()
  LoadDefinedDiagnosis("")
  modSettings.SaveSettingsToFile("ICDDiagnosis/FixedList", "ICDList")

End

Private Sub SetFixedListData()

  Dim aList As String[]

  aList = New String[]
  aList.Add("All Categories")
  If rbemergency.Value = True Then
    aList.Insert($erList)
  Else If rboutpatient.Value = True
    If $sDefGroup Then
      aList = GetDefaultDiagnoList()
    Else
      aList.Insert($selList)
    Endif
  Else
    aList.Insert($allList)
  Endif
  cmbchapter.List = aList

  If cmbchapter.List.Count Then
    cmbchapter[0].Selected = True
  Endif

End

Private Sub SetFixedList()

  Dim sSetting As String

  sSetting = modSettings.ShowSettingFromFIle("ICDDiagnosis/FixedList")
  If sSetting Then
    If sSetting = "OutPatient" Then
      rboutpatient.Value = True
    Else If sSetting = "Emergency" Then
      rbemergency.Value = True
    Else
      rbicdlist.Value = True
    Endif
  Else
    rboutpatient.Value = True
  Endif

End

Public Sub cmbchapter_Click()

  If cmbchapter.Text Then
    LoadDefinedDiagnosis(cmbchapter.Text)
  Endif

End

Private Sub LoadDefinedDiagnosis(sItem As String)

  txtlist.Text = ""
  txtcode.Text = ""
  txtname.Text = ""
  txtfixed.Text = ""
  If $SubListView Then
    $SubListView.Clear()
  Endif

  If rbemergency.Value = True Then
    $FixedListGrp = GetFixDiagnosisList(sItem, "Emergency Groups")
  Else If rboutpatient.Value = True
    If $sDefGroup Then
      $FixedListGrp = GetICDDiagnosisSelected(sItem)
    Else
      $FixedListGrp = GetFixDiagnosisList(sItem, "Diagnosis Groups")
    Endif
  Else
    $FixedListGrp = GetICDDiagnosisList(sItem)
  Endif
  $SubListView = $FixedListGrp
  FillListView()
  txtlist.SetFocus

End

Private Function GetFixDiagnosisList(sGroup As String, sType As String) As Variant[]

  Dim res As Result
  Dim sList As Variant[]

  sList = New Variant[]
  If cmbchapter.Text = "All Categories" Then
    res = modDatabase.$myConn.Exec("select fldcodenew,fldcodeid,flditemname from tbldiagnogroup where fldgroupname like &1 and fldformat=&2", "%", sType)
  Else
    res = modDatabase.$myConn.Exec("select fldcodenew,fldcodeid,flditemname from tbldiagnogroup where fldgroupname=&1 and fldformat=&2", sGroup, sType)
  Endif
  If res.Available Then
    For Each res
      sList.Add([res["fldcodenew"], res["fldcodeid"], res["flditemname"]])
    Next
  Endif
  Return sList

End

Private Function GetICDDiagnosisList(sGroup As String) As Variant[]

  Dim res As Result
  Dim sList As Variant[]

  sList = New Variant[]
  If chkgroup.Value Then
    If cmbchapter.Text = "All Categories" Then
      res = $Conn.Exec("select fldicdcode,fldoldcode,fldicdnme from tblicddisease where fldicdcode NOT LIKE &1", "%.%")
    Else
      res = $Conn.Exec("select fldicdcode,fldoldcode,fldicdnme from tblicddisease where fldicdchpter=&1 and fldicdcode NOT LIKE &2", sGroup, "%.%")
    Endif
  Else
    If cmbchapter.Text = "All Categories" Then
      res = $Conn.Exec("select fldicdcode,fldoldcode,fldicdnme from tblicddisease")
    Else
      res = $Conn.Exec("select fldicdcode,fldoldcode,fldicdnme from tblicddisease where fldicdchpter=&1", sGroup)
    Endif
  Endif
  If res.Available Then
    For Each res
      sList.Add([res["fldicdcode"], res["fldoldcode"], res["fldicdnme"]])
    Next
  Endif
  Return sList

End

''-------------------------- Default Group --------------------
Private Function GetDefaultDiagnoList() As String[]

  Dim sList As String[]
  Dim res As Result

  sList = New String[]
  res = $Conn.Exec("select fldicdcode,fldoldcode,fldicdnme from tblicddisease where fldicdchpter=&1 and fldicdcode NOT LIKE &2", $sDefGroup, "%.%")
  If res.Available Then
    For Each res
      sList.Add(res["fldicdcode"] & "|" & res["fldicdnme"])
    Next
  Endif
  Return sList

End

Private Function GetICDDiagnosisSelected(sItem As String) As Variant[]

  Dim res As Result
  Dim asx As String[]
  Dim sList As Variant[]

  sList = New String[]
  If sItem Then
    asx = Split(sItem, "|")
    res = $Conn.Exec("select fldicdcode,fldoldcode,fldicdnme from tblicddisease where fldicdchpter=&1 and (fldicdcode=&2 or fldicdcode like &3)", $sDefGroup, asx[0], asx[0] & "." & "%")
    If res.Available Then
      For Each res
        sList.Add([res["fldicdcode"], res["fldoldcode"], res["fldicdnme"]])
      Next
    Endif
  Endif
  Return sList

End

''================================== Individual Diagnosis =====================================
Public Sub chkleftsub_Click()

  modBasic.$SearchBothSide = chkleftsub.Value
  txtlist.SetFocus

End

Public Sub txtlist_KeyPress()

  modGeneralMain.InputTextSearchKeyOnly()

End

Public Sub txtlist_KeyRelease()

  If Key.Code = Key.Down Then
    GridView2.SetFocus
  Endif

End

Public Sub txtcodelist_KeyPress()

  modGeneralMain.InputTextSearchKeyOnly()

End

Public Sub txtcodelist_KeyRelease()

  If Key.Code = Key.Down Then
    GridView2.SetFocus
  Endif

End

Public Sub txtlist_Change()

  Dim xlst As Variant[]
  Dim xx As String[]
  Dim xlsfinal As Variant[]
  Dim awords As String[]

  txtcodelist.Text = ""
  If cmbchapter.Text Then
    If Trim(txtlist.Text) Then
      xlst = $FixedListGrp
      xlsfinal = New String[]
      awords = modString.SplitTextArray(LCase(txtlist.Text))
      For Each xx In xlst
        If chkleftsub.Value Then
          If awords.Count > 1 Then
            If LCase(xx[2]) Like "*" & awords[0] & "*" And If LCase(xx[2]) Like "*" & awords[1] & "*" Then
              xlsfinal.Add(xx)
            Endif
          Else
            If LCase(xx[2]) Like "*" & LCase(txtlist.Text) & "*" Then
              xlsfinal.Add(xx)
            Endif
          Endif
        Else
          If LCase(xx[2]) Like LCase(txtlist.Text) & "*" Then
            xlsfinal.Add(xx)
          Endif
        Endif
      Next
      If xlsfinal Then
        xlsfinal.Sort()
      Endif
      $SubListView = xlsfinal
      FillListView()

    Else
      $SubListView = $FixedListGrp
      FillListView()
    Endif
  Endif

End

Public Sub txtcodelist_Change()

  Dim xlst As Variant[]
  Dim xx As String[]
  Dim xlsfinal As Variant[]

  txtlist.Text = ""
  If cmbchapter.Text Then
    If Trim(txtcodelist.Text) Then
      xlst = $FixedListGrp
      xlsfinal = New String[]
      For Each xx In xlst
        If LCase(xx[0]) Like LCase(txtcodelist.Text) & "*" Then
          xlsfinal.Add(xx)
        Endif
      Next
      If xlsfinal Then
        xlsfinal.Sort()
      Endif
      $SubListView = xlsfinal
      FillListView()

    Else
      $SubListView = $FixedListGrp
      FillListView()
    Endif
  Endif

End

Private Sub FillListView()

  GridView2.Clear()
  GridView2.Columns.Count = 3
  GridView2.Rows.Count = $SubListView.Count

  With GridView2
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 75 * modBasic.$AppWidthRatio
    .Columns[1].Width = 1
    .Columns[2].Width = GridView2.Width - 90 * modBasic.$AppWidthRatio
  End With

End

Public Sub GridView2_Data(Row As Integer, Column As Integer)

  modGeneralMain.GridViewDecoration(GridView2, Row)
  GridView2.Data.Text = $SubListView[Row][Column]
  GridView2.Rows[Row].Height = Max(GridView2.Rows[Row].Height, GridView2.Data.Font.RichTextHeight(GridView2.Data.Text, GridView2.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView2.Rows.Height - GridView2.Font.Height))
  GridView2.Data.WordWrap = True

End

Public Sub GridView2_Click()

  If GridView2.Rows.Selection.Count Then
    txtcode.Text = GridView2[GridView2.Row, 0].Text
    txtoldcode.Text = GridView2[GridView2.Row, 1].Text
    txtname.Text = GridView2[GridView2.Row, 2].Text
    txtfixed.Text = GridView2[GridView2.Row, 2].Text
  Endif

End

Public Sub GridView2_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    GridView2_Click()
  Endif

End

Public Sub btnadd_Click()

  Dim xx As String[]

  If txtcode.Text And If txtname.Text Then
    xx = New String[]
    xx.Add(Trim(txtname.Text))
    xx.Add(txtcode.Text)
    xx.Add(txtoldcode.Text)
    $sValue = xx
    Me.Close(True)
  Endif

End

Public Sub btnicdclear_Click()

  txtname.Text = ""

End
