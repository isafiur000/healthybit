' Gambas class file

Private $rData As Result
Private $aMyFields As String[]
Private $ProgressBar1 As ProgressBar
Private $SSQLFields As String[]
Private $RepoStr As String

Private $ColCount As Integer
Private $newColumn As String[]

Public Sub Form_Open()

  Dim xhospfld As String

  modGeneralMain.ArrangeEmbedForms(Me, Panel1, "Vertical")
  Me.Icon = Picture[modGeneralMain.$strLogo]
  btnmnuqty.Menu = "mnuqty"
  If MMain.$WebReport = "Multiple" Then
    If modBasic.$HospCode Then
      ' cmblocation.Text = "Hospital"
      cmblocation.Text = modDataRepo.$RepositoryMode
      cmbvalue.Text = modBasic.$HospCode
      pnlocat.Enabled = False
    Else
      cmblocation.List = ["Hospital", "Municipality", "Category", "District", "Province"]
    Endif

  Else
    pnlocat.Visible = False
  Endif

  cmbsubclass.List = GetCategoryList()
  dtfir.Value = Now()
  dtlast.Value = Now()

  xhospfld = modDataRepo.HospitalField()
  $SSQLFields = ["fldid", "fldencounterval", "fldencounterval", modDataRepo.SerialField(), "fldencounterval", "fldencounterval", "fldtime", "fldhead", "fldabnormal", "fldrepquali"]
  If xhospfld Then
    $SSQLFields.Add(xhospfld)
  Endif

End

Public Sub Form_Resize()

  modGeneralMain.ShowSelectedFormMenu(Me)

End

Public Sub Form_Close()

  modGeneralMain.RecordFormExit(Me)

End

Public Sub dtnepfir_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtfir.Value))
  If xx Then
    dtfir.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub dtneplast_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtlast.Value))
  If xx Then
    dtlast.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Private Function GetCategoryList() As String[]

  Dim xList As String[]

  xList = modMedicine.FillClinicalSubClass("%")
  xList.Add("Department")

  Return xList

End

Public Sub cmbsubclass_Click()

  If cmbsubclass.Text = "Department" Then
    cmbcategory.List = ["Pre Delivery", "On Delivery", "Post Delivery", "Baby Examination", "Hospital Acquired Infection", "Pre-Operative", "Operative", "Post-Operative", "Anaesthesia"]
  Else
    cmbcategory.List = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(fldcategory) as col from tblstructexam where fldsubclass like &1", cmbsubclass.Text))                                   ''
  Endif
  cmbcategory.Add("%")
  cmbcategory.Text = "%"

End

Public Sub cmbcategory_Click()

  If cmbsubclass.Text = "Department" Then
    cmbexam.List = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(fldexamid) as col from tbldeptexam where flddept=&1", cmbcategory.Text))
  Else
    cmbexam.List = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(fldhead) as col from tblstructexam where fldsubclass like &1 and fldcategory like &2", cmbsubclass.Text, cmbcategory.Text))
  Endif
  cmbexam.Add("%")
  cmbexam.Text = "%"

End

Private Function GetSQLColumns() As String[]

  Dim xFldList As String[]
  Dim i As Integer

  modCustPatient.FillNewCOlumnCollection(Me.Tag)
  $newColumn = modCustPatient.CustomNewColumnsTitle(Me.Tag)
  xFldList = $SSQLFields.Copy()
  If $newColumn.Count Then
    For i = 0 To $newColumn.Count - 1
      xFldList.Add("fldencounterval")
    Next
  Endif
  Return xFldList

End

Private Function ExecuteQuery(xFldList As String[], Optional sGroup As String) As Result

  Dim sql As String
  Dim res As Result
  Dim xgroup As String

  If sGroup Then
    xgroup = " GROUP BY " & sGroup
  Else
    xgroup = ""
  Endif

  $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
  If cmbsubclass.Text = "Department" Then
    sql = "select " & xFldList.Join(",") & " from tblpatientexam where fldmethod=&1 and fldtime>=&2 and fldtime<=&3 and fldhead like &4 and fldinput like &5" & $RepoStr & xgroup
    res = modDatabase.$syConn.Exec(sql, "Physician Examinations", modDate.StartSqlDate(dtfir.Value), modDate.EndSqlDate(dtlast.Value), cmbexam.Text, cmbcategory.Text)
  Else
    sql = "select " & xFldList.Join(",") & " from tblpatientexam where fldmethod=&1 and fldtime>=&2 and fldtime<=&3 and fldhead like &4 and fldserialval in(select fldheadcode from tblstructexam where fldsubclass like &5 and fldcategory like &6)" & $RepoStr & xgroup                                                                       ''"
    res = modDatabase.$syConn.Exec(sql, cmbsubclass.Text, modDate.StartSqlDate(dtfir.Value), modDate.EndSqlDate(dtlast.Value), cmbexam.Text, cmbsubclass.Text, cmbcategory.Text)
  Endif

  Return res

End

Private Function GetGridViewValue(Column As Integer, xVariable As Variant) As Variant

  Dim xxx As Variant
  Dim i As Integer

  If Column = 2 Then
    xxx = modPatient.GetPatientNameByEnc(xVariable, modDatabase.$syConn)
  Else If Column = 3 Then
    xxx = modMedReports.GetPatientPastAgeString("tblpatientexam", xVariable)
  Else If Column = 4 Then
    xxx = modPatient.GetPatientSex(xVariable, modDatabase.$syConn)
  Else If Column = 5 Then
    xxx = modPatient.GetPatientNoByEnc(xVariable)
  Else If Column = 6 Then
    xxx = modReportVar.GetDateTimeReport(xVariable, gb.GeneralDate)
  Else If Column = 8 Then
    xxx = modMisc.GetGridIcon(xVariable)
  Else If Column = 10 Then
    xxx = modDataRepo.GetHospitalTextLabel(xVariable)
  Else
    xxx = xVariable
  Endif

  If $newColumn.Count Then
    For i = 0 To $newColumn.Count - 1
      If Column = $ColCount + i Then
        xxx = modCustPatient.NewColValue(Me.Tag, $newColumn[i], xVariable)
      Endif
    Next
  Endif

  Return xxx

End

Public Sub btnrefresh_Click()

  Dim xFldList As String[]

  TabStrip1.Index = 0
  Inc Application.Busy
  xFldList = GetSQLColumns()
  $rData = ExecuteQuery(xFldList)

  If chkgrid.Value = True Then
    FillPatGrid()
  Endif

  If chkchart.Value = True Then
    FillItemChartQTY()
  Endif

  Dec Application.Busy

End

Public Sub FillPatGrid()

  Dim i As Integer

  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView1, $rData, $aMyFields)
  $ColCount = $SSQLFields.Count

  With GridView1
    .Columns[0].Width = 1
    .Columns[1].Width = 125 * modBasic.$AppWidthRatio
    .Columns[2].Width = 175 * modBasic.$AppWidthRatio
    .Columns[3].Width = 75 * modBasic.$AppWidthRatio
    .Columns[4].Width = 75 * modBasic.$AppWidthRatio
    .Columns[5].Width = 125 * modBasic.$AppWidthRatio
    .Columns[6].Width = 150 * modBasic.$AppWidthRatio
    .Columns[7].Width = 200 * modBasic.$AppWidthRatio
    .Columns[8].Width = 25 * modBasic.$AppWidthRatio
    .Columns[9].Width = 425 * modBasic.$AppWidthRatio

    .Columns[1].Text = "EncID"
    .Columns[2].Text = "Name"
    .Columns[3].Text = "Age"
    .Columns[4].Text = "Gender"
    .Columns[5].Text = "PatientNo"
    .Columns[6].Text = "DateTime"
    .Columns[7].Text = "Examination"
    .Columns[9].Text = "Observation"

    If $newColumn.Count Then
      For i = 0 To $newColumn.Count - 1
        .Columns[$ColCount + i].Text = $newColumn[i]
        .Columns[$ColCount + i].Width = 150 * modBasic.$AppWidthRatio
      Next
    Endif
  End With

End

Public Sub GridView1_Data(Row As Integer, Column As Integer)

  $rData.MoveTo(Row)
  modGeneralMain.GridViewDecoration(GridView1, Row)
  If Column = 8 Then
    GridView1.Data.Picture = Picture[GetGridViewValue(Column, $rData[$aMyFields[Column]])]
    GridView1.Data.Text = ""
  Else If Column = 9 Then
    GridView1.Data.RichText = GetGridViewValue(Column, $rData[$aMyFields[Column]])
    If modBasic.$RichtextResizeRow = "Yes" Then
      GridView1.Rows[Row].Height = Max(GridView1.Rows[Row].Height, GridView1.Data.Font.RichTextHeight(GridView1.Data.RichText, GridView1.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView1.Rows.Height - GridView1.Font.Height))
    Endif
  Else
    If Column > $SSQLFields.Count - 1 Then
      GridView1.Data.RichText = modString.TextToHTML(GetGridViewValue(Column, $rData[$aMyFields[Column]]))
    Else
      GridView1.Data.Text = GetGridViewValue(Column, $rData[$aMyFields[Column]])
    Endif
  Endif
  GridView1.Rows[Row].Height = Max(GridView1.Rows[Row].Height, GridView1.Data.Font.RichTextHeight(GridView1.Data.Text, GridView1.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView1.Rows.Height - GridView1.Font.Height))
  GridView1.Data.WordWrap = True

End

''-------------------------------------Chart -----------------------------
Private Sub FillItemChartQTY()

  Dim xLst As String[]
  Dim sFile As String

  xLst = New String[]
  For Each $rData
    If Not modBasic.$HospCode And If MMain.$WebReport = "Multiple" Then
      xLst.Add($rData["fldhospcode"] & gb.Tab & modPatient.GetPatientSex($rData["fldencounterval"], modDatabase.$syConn))
    Else
      xLst.Add(Format(DateDiff(dtfir.Value, $rData["fldtime"], modChart.GetDateIntegerFromSetting()), "0#.#") & gb.Tab & modPatient.GetPatientSex($rData["fldencounterval"], modDatabase.$syConn))
    Endif
  Next

  sFile = Temp()
  File.Save(sFile, xLst.Join(gb.NewLine))
  mnustats.Tag = sFile
  If modBasic.$ChartExecStat = "PSPP" Then
    modImage.StretchtPictureToBox(PictureBox1, modChart.ProportionChart(sFile, "Examination Count"))
  Else
    modImage.StretchtPictureToBox(PictureBox1, modChart.ProportionChart(sFile, "Examination Count"))
  Endif

End

Public Sub PictureBox1_Menu()

  mnuqty.Popup

End

Public Sub mnuexpoqty_Click()

  If Dialog.SelectDirectory() Then Return
  PictureBox1.Image.Save(Dialog.Path &/ "ExamQTY" & ".png")

End

Public Sub mnustats_Click()

  If modBasic.$ExpoRepoUser = True Then
    modControlSub.OpenBrowser(mnustats.Tag)
  Endif

End

''---------------------------- Gridview --------------------------
Public Sub btnexpo_Click()

  Dim xHeader As String[]
  Dim xhide As Integer[]
  Dim Column As Integer
  Dim xCollRow As Collection
  Dim xColum As Integer

  Dim $hGridExportTable As CExportResult
  Dim xparam1 As String
  Dim xparam2 As String
  Dim encColumn As Integer
  Dim xFldList As String[]

  If MMain.$IsGUIApp = True Then
    $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
    $ProgressBar1.Visible = True
    $ProgressBar1.Value = 0
  Endif

  xHeader = New String[]
  xhide = New Integer[]
  For Column = 0 To GridView1.Columns.Count - 1
    xHeader.Add(GridView1.Columns[Column].Text)
    If GridView1.Columns[Column].Width < 5 Then
      xhide.Add(Column)
    Endif
  Next
  xparam1 = cmbsubclass.Text
  xparam2 = modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate)
  encColumn = 1
  $hGridExportTable = New CExportResult(Me.Tag, xHeader, xhide, xparam1, xparam2, encColumn)

  Inc Application.Busy
  xFldList = GetSQLColumns()

  For Each $rData
    xCollRow = New Collection
    For xColum = 0 To xFldList.Count - 1
      xCollRow.Add(GetGridViewValue(xColum, $rData[xFldList[xColum]]), CStr(xColum))
    Next
    $hGridExportTable.Add($rData.Index, xCollRow)

    If MMain.$IsGUIApp = True Then
      $ProgressBar1.Value = ($rData.Index + 1) / $rData.Count
      Wait
    Endif
  Next
  Dec Application.Busy
  If MMain.$IsGUIApp = True Then
    $ProgressBar1.Visible = False
  Endif
  modControlSub.DisplayReportExport($hGridExportTable.HTMLPath())

End

Public Sub GridView1_Menu()

  mnugrid.Popup

End

Public Sub GridView1_DblClick()

  Dim xx As Integer
  Dim yy As Integer

  xx = Mouse.StartX - GridView1.Left
  yy = Mouse.StartY - GridView1.Top

  Balloon.Info(("Current Column is ") & CStr(GridView1.Column + 1), GridView1, xx, yy)
  Balloon.Delay = 1000

End

Public Sub mnuenchart_Click()

  Dim xx As String
  Dim xField As String
  Dim Column As Integer
  Dim res As Result
  Dim xval As Variant
  Dim hFile As CUnivariate
  Dim sOrder As String[]
  Dim xFldList As String[]

  Dim hUniv As FmAnalyzeSett

  hUniv = New FmAnalyzeSett("Univariate", modGridView.GetGridViewColumns(GridView1))
  hUniv.ShowModal

  xFldList = GetSQLColumns()
  If MMain.$IsGUIApp = True Then
    $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
    $ProgressBar1.Visible = True
    $ProgressBar1.Value = 0
  Endif
  Inc Application.Busy
  hFile = New CUnivariate

  Column = modCustPatient.GetUnivariateColumn(1)
  xField = xFldList[Column]
  res = ExecuteQuery([xField])

  If res.Available Then
    For Each res
      xval = GetGridViewValue(Column, res[xField])
      If xval Then
        hFile.Add(xval)
      Endif

      If MMain.$IsGUIApp = True Then
        $ProgressBar1.Value = (res.Index + 1) / res.Count
        Wait
      Endif
    Next
  Endif
  Dec Application.Busy
  If MMain.$IsGUIApp = True Then
    $ProgressBar1.Visible = False
  Endif

  If modSettings.ShowSettingFromFIle("UnivariateAnalysis/DataType") = "Ordinal" Then
    sOrder = ListOrder("Select Order", hFile.DistinctValues())
  Endif
  xx = modPSPP.GetEncChartGridNew(hFile.GetSPSSFile(), sOrder)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnucross_Click()

  Dim xx As String
  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant
  Dim xFldList As String[]

  Dim hFile As CBivariate
  Dim sOrder As String[]
  Dim hBivar As FmAnalyzeSett

  hBivar = New FmAnalyzeSett("Bivariate", modGridView.GetGridViewColumns(GridView1))
  hBivar.ShowModal

  xFldList = GetSQLColumns()
  If MMain.$IsGUIApp = True Then
    $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
    $ProgressBar1.Visible = True
    $ProgressBar1.Value = 0
  Endif

  Inc Application.Busy
  hFile = New CBivariate
  Row = modCustPatient.GetCrossVarRow(1)
  xFieRow = xFldList[Row]
  Column = modCustPatient.GetCrossVarColumn(1)
  xFieColm = xFldList[Column]
  res = ExecuteQuery([xFieRow, xFieColm])

  If res.Available Then
    For Each res
      xval = GetGridViewValue(Row, res[xFieRow])
      yval = GetGridViewValue(Column, res[xFieColm])
      If xval And If yval Then
        hFile.Add([xval, yval])
      Endif

      If MMain.$IsGUIApp = True Then
        $ProgressBar1.Value = (res.Index + 1) / res.Count
        Wait
      Endif
    Next
  Endif
  Dec Application.Busy
  If MMain.$IsGUIApp = True Then
    $ProgressBar1.Visible = False
  Endif

  If modCustPatient.$CrossOutcomeType = "Ordinal" Then
    sOrder = ListOrder("Select Order", hFile.DistinctValues())
  Endif
  xx = modPSPP.GetCrossTabStatNew(hFile.GetSPSSFile(), hFile.GetGroups(), sOrder)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnucrotab_Click()

  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant
  Dim xFldList As String[]

  Dim hForm As FmGridCrossTab
  Dim xForm As CCrossTab
  Dim hGdChr As FmAnalyzeSett

  hGdChr = New FmAnalyzeSett("GridCrossTab", modGridView.GetGridViewColumns(GridView1))
  hGdChr.ShowModal

  xFldList = GetSQLColumns()
  If MMain.$IsGUIApp = True Then
    $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
    $ProgressBar1.Visible = True
    $ProgressBar1.Value = 0
  Endif

  If modCustPatient.$TabRowColumn And If modCustPatient.$TabFieldColumn Then
    xForm = New CCrossTab
    Inc Application.Busy
    Row = CInt(modCustPatient.$TabRowColumn) - 1
    xFieRow = xFldList[Row]
    Column = CInt(modCustPatient.$TabFieldColumn) - 1
    xFieColm = xFldList[Column]
    res = ExecuteQuery([xFieRow, xFieColm])

    If res.Available Then
      For Each res
        xval = GetGridViewValue(Row, res[xFieRow])
        yval = GetGridViewValue(Column, res[xFieColm])
        If xval And If yval Then
          xForm.Add([xval, yval])
        Endif

        If MMain.$IsGUIApp = True Then
          $ProgressBar1.Value = (res.Index + 1) / res.Count
          Wait
        Endif
      Next
    Endif
    Dec Application.Busy

    hForm = New FmGridCrossTab(GridView1.Columns[Row].Text, xForm.GetSPSSFile())
    hForm.ShowModal
    modExternal.$ExecValueColl.Clear()
  Endif

  If MMain.$IsGUIApp = True Then
    $ProgressBar1.Visible = False
  Endif

End

Public Sub mnugridsummary_Click()

  Dim xx As String
  Dim ChapCol As String
  Dim GropCol As String
  Dim xChapList As String[]
  Dim xGropList As String[]

  Dim res As Result
  Dim valCol As String
  Dim xFieldList As String[]
  Dim xFldList As String[]

  Dim xFinList As Variant[]
  Dim xrowVar As Variant[]
  Dim xchapval As String
  Dim xgroup As String
  Dim xPath As String

  Dim hGdSum As FmAnalyzeSett

  hGdSum = New FmAnalyzeSett("GridSummary", modGridView.GetGridViewColumns(GridView1))
  hGdSum.ShowModal

  Inc Application.Busy
  xFldList = GetSQLColumns()

  xFieldList = New String[]
  If modCustPatient.$SumChapterColumn Then
    ChapCol = xFldList[modCustPatient.$SumChapterColumn - 1]
    xFieldList.Add(ChapCol)
  Endif
  GropCol = xFldList[modCustPatient.$SumGroupColumn - 1]
  valCol = xFldList[modCustPatient.$SumValueColumn - 1]
  xFieldList.Add(GropCol)
  xFieldList.Add(valCol)

  xChapList = New String[]
  xGropList = New String[]
  xFinList = New Variant[]
  res = ExecuteQuery(xFieldList)
  If res.Available Then
    For Each res
      xrowVar = New Variant[]
      If modCustPatient.$SumChapterColumn Then
        xchapval = GetGridViewValue(modCustPatient.$SumChapterColumn - 1, res[ChapCol])
        xrowVar.Add(xchapval)
        xChapList.Add(xchapval)
      Endif
      xgroup = GetGridViewValue(modCustPatient.$SumGroupColumn - 1, res[GropCol])
      xrowVar.Add(xgroup)
      xGropList.Add(xgroup)

      xrowVar.Add(GetGridViewValue(modCustPatient.$SumValueColumn - 1, res[valCol]))
      xFinList.Add(xrowVar)
    Next
  Endif
  Dec Application.Busy

  xx = "Date: " & modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate)
  If modCustPatient.$SumGroupColumn And If modCustPatient.$SumValueColumn Then
    If modCustPatient.$SumChapterColumn Then
      If modCustPatient.$SummaryType = "Summation(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapterTableReport("Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else If modCustPatient.$SummaryType = "Count(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapCountTableReport("Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else
        xPath = modCHTMLReport.SummaryGridChapterReport("Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Endif
    Else
      xPath = modCHTMLReport.SummaryGridReport("Report Summary", xx, modString.GetDistinctStringArray(xGropList), xFinList)
    Endif
    modControlSub.DisplayReportExport(xPath)
  Endif

End

''======================= Full Export =============================
Public Sub mnufullexpo_Click()

  If cmbsubclass.Text And If cmbcategory.Text Then
    If cmbsubclass.Text = "Department" Then
      ExportDepartExamDetail()
    Else
      ExportCustExamDetail()
    Endif
  Endif

End

Private Sub ExportDepartExamDetail()

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim hdr As String[]
  Dim antlist As String[]
  Dim antname As String
  Dim res As Result
  Dim i As Integer

  antlist = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(fldexamid) as col from tbldeptexam where flddept like &1", cmbcategory.Text))
  If antlist.Count Then
    hdr = New String[]
    hdr.Add("SNo")
    hdr.Add("EncID")
    hdr.Add("Name")
    hdr.Add("Gender")
    hdr.Add("Age")

    For Each antname In antlist
      hdr.Add(antname)
    Next

    $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
    $ProgressBar1.Tag = "Const"

    Inc Application.Busy
    $BillingReport = New CReportHTML(hdr, "", "")
    $BillingReport.UserData.Add("EXAMINATION REPORT:: Chapter: " & cmbsubclass.Text & "  Category: " & cmbcategory.Text, "PARAM1")
    $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate), "PARAM2")
    $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)

    res = modDatabase.$syConn.Exec("select distinct(fldencounterval) from tblpatientexam where fldmethod=&1 and fldtime>=&2 and fldtime<=&3 and fldinput=&4" & $RepoStr, "Physician Examinations", modDate.StartSqlDate(dtfir.Value), modDate.EndSqlDate(dtlast.Value), cmbcategory.Text)
    If res.Available Then
      i = 1
      For Each res

        With asx
          .Add(CStr(i))
          .Add(res["fldencounterval"])
          .Add(modPatient.GetPatientNameByEnc(res["fldencounterval"], modDatabase.$syConn))
          .Add(modPatient.GetPatientSex(res["fldencounterval"], modDatabase.$syConn))
          .Add(modPatient.GetPatientAgeString(res["fldencounterval"], modPatient.GetRecordDate(res["fldencounterval"])))

          For Each antname In antlist
            .Add(GetDepartExamValue(res["fldencounterval"], antname))
          Next
        End With
        $BillingReport.Add(asx)
        asx.Clear()
        $ProgressBar1.Value = (res.Index + 1) / res.Count
        Wait
        i = i + 1

      Next
    Endif
  Endif

  Dec Application.Busy
  modControlSub.OpenHTMLPreview("", $BillingReport.NewHTMLPath(), "ReportSize")

End

Private Function GetDepartExamValue(encid As String, sHead As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$syConn.Exec("select fldrepquali from tblpatientexam where fldencounterval=&1 and fldmethod=&2 and fldhead=&3 and fldtime>=&4 and fldtime<=&5 and fldinput=&6", encid, "Physician Examinations", sHead, modDate.StartSqlDate(dtfir.Value), modDate.EndSqlDate(dtlast.Value), cmbcategory.Text)
  If res.Available Then
    res.MoveLast
    If res["fldrepquali"] Then
      xx = res["fldrepquali"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Private Sub ExportCustExamDetail()

  Dim $BillingReport As CReportHTMLGroup
  Dim asx As New String[0]
  Dim hdr As Collection
  Dim res As Result
  Dim i As Integer

  Dim categLst As String[]
  Dim xcateg As String
  Dim res1 As Result
  Dim res2 As Result
  Dim sHeadColl As Collection
  Dim sHeadLst As String[]
  Dim antname As String

  hdr = New Collection
  hdr.Add(["SNo", "EncID", "Name", "Gender", "Age"], "Demographics")

  sHeadColl = New Collection
  If cmbcategory.Text = "%" Then
    categLst = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(fldcategory) as col from tblstructexam where fldsubclass like &1", cmbsubclass.Text))
  Else
    categLst = [cmbcategory.Text]
  Endif
  If categLst.Count Then
    For Each xcateg In categLst

      res1 = modDatabase.$syConn.Exec("select distinct(flditem) as flditem from tblstructexam where fldsubclass like &1 and fldcategory like &2 ORDER BY flditemid,fldheadid", cmbsubclass.Text, xcateg)
      If res1.Available Then
        For Each res1

          sHeadLst = New String[]
          res2 = modDatabase.$syConn.Exec("select fldhead,fldheadcode from tblstructexam where fldsubclass like &1 and fldcategory like &2 and flditem=&3 ORDER BY fldheadid", cmbsubclass.Text, xcateg, res1["flditem"])
          If res2.Available Then
            For Each res2
              sHeadLst.Add(res2["fldhead"])
              sHeadColl.Add(res2["fldhead"], res2["fldheadcode"])
            Next
          Endif
          hdr.Add(sHeadLst, xcateg & " : " & res1["flditem"])

        Next
      Endif

    Next
  Endif

  If sHeadColl.Count Then
    $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
    $ProgressBar1.Tag = "Const"

    Inc Application.Busy
    $BillingReport = New CReportHTMLGroup(hdr, "", "")
    $BillingReport.UserData.Add("EXAMINATION REPORT:: Chapter: " & cmbsubclass.Text & "  Category: " & cmbcategory.Text, "PARAM1")
    $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate), "PARAM2")
    $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)

    res = modDatabase.$syConn.Exec("select distinct(fldencounterval) from tblpatientexam where fldmethod=&1 and fldtime>=&2 and fldtime<=&3 and fldserialval in(select fldheadcode from tblstructexam where fldsubclass like &4 and fldcategory like &5)" & $RepoStr, cmbsubclass.Text, modDate.StartSqlDate(dtfir.Value), modDate.EndSqlDate(dtlast.Value), cmbsubclass.Text, cmbcategory.Text)
    If res.Available Then
      For Each res

        With asx
          .Add(CStr(i))
          .Add(res["fldencounterval"])
          .Add(modPatient.GetPatientNameByEnc(res["fldencounterval"], modDatabase.$syConn))
          .Add(modPatient.GetPatientSex(res["fldencounterval"], modDatabase.$syConn))
          .Add(modPatient.GetPatientAgeString(res["fldencounterval"], modPatient.GetRecordDate(res["fldencounterval"])))

          For Each antname In sHeadColl
            .Add(GetCustExamValue(res["fldencounterval"], sHeadColl.Key))
          Next
        End With
        $BillingReport.Add(asx)
        asx.Clear()
        $ProgressBar1.Value = (res.Index + 1) / res.Count
        Wait
        i = i + 1

      Next
    Endif
    Dec Application.Busy
  Endif

  modControlSub.OpenHTMLPreview("", $BillingReport.NewHTMLPath(), "ReportSize")

End

Private Function GetCustExamValue(encid As String, sHeadCode As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$syConn.Exec("select fldrepquali from tblpatientexam where fldencounterval=&1 and fldmethod=&2 and fldserialval=&3 and fldtime>=&4 and fldtime<=&5", encid, cmbsubclass.Text, sHeadCode, modDate.StartSqlDate(dtfir.Value), modDate.EndSqlDate(dtlast.Value))
  If res.Available Then
    res.MoveLast
    If res["fldrepquali"] Then
      xx = res["fldrepquali"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Sub chkchart_Click()

  TabStrip1.Index = 1

End

Public Sub mnucountuni_Click()

  Dim Column As Integer
  Dim xFieColm As String
  Dim res As Result
  Dim yval As Variant
  Dim xList As String[]

  Dim xVar As Variant[]
  Dim xFldList As String[]
  Dim xPath As String

  Column = ListIndex("Column Index", modGridView.GetGridViewColumns(GridView1))
  If Column + 1 > 0 Then
    xFldList = GetSQLColumns()
    If MMain.$IsGUIApp = True Then
      $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
      $ProgressBar1.Visible = True
      $ProgressBar1.Value = 0
    Endif

    Inc Application.Busy
    xFieColm = xFldList[Column]
    res = ExecuteQuery([xFieColm])
    xList = New String[]
    If res.Available Then
      For Each res
        yval = GetGridViewValue(Column, res[xFieColm])
        If yval Then
          xList.Add(yval)
        Endif

        If MMain.$IsGUIApp = True Then
          $ProgressBar1.Value = (res.Index + 1) / res.Count
          Wait
        Endif
      Next
    Endif
    If xList.Count Then
      xVar = modString.GetUnivariateSummary(xList)
      xPath = modCHTMLReport.CreateHTMLReportFromArray(["Variable", "Count"], xVar, GridView1.Columns[Column].Text, modReportVar.GetDateTimeReport(Now(), gb.GeneralDate))
    Endif
    Dec Application.Busy

    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnucolumns_Click()

  If Message.Question(modGridView.GetColumnsListString(GridView1), ("OK"), ("Setting")) = 2 Then
    fmChartSetting.Close
    fmChartSetting.ShowModal
  Endif

End

Public Sub mnuexpocolumn_Click()

  Dim hForm As FmCustColumnSet

  hForm = New FmCustColumnSet(Me.Tag)
  hForm.ShowModal

End

Public Sub mnuaddcolumn_Click()

  Dim hForm As FmAddNewColumn

  hForm = New FmAddNewColumn(Me.Tag)
  hForm.ShowModal

End
