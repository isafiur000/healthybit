' Gambas class file

Private $rData As Result
Private $aMyFields As String[]
Private $chartLimit As Float[]
Private $ProgressBar1 As ProgressBar
Private $SSQLFields As String[]

Private $ColCount As Integer
Private $newColumn As String[]
Private $xtitle As String
Private $RepoStr As String

Public Sub Form_Open()

  Dim xtype As String[]

  modGeneralMain.ArrangeEmbedForms(Me, Panel1, "Vertical")
  Me.Icon = Picture[modGeneralMain.$strLogo]
  btnmnuqty.Menu = "mnuqty"
  btnmnuweit.Menu = "mnufreq"
  If MMain.$WebReport = "Multiple" Then
    If modBasic.$HospCode Then
      ' cmblocation.Text = "Hospital"
      cmblocation.Text = modDataRepo.$RepositoryMode
      cmbvalue.Text = modBasic.$HospCode
      pnlocat.Enabled = False
    Else
      cmblocation.List = ["Hospital", "Municipality", "Category", "District", "Province"]
    Endif
    mnuhospsumm.Visible = True
    mnuhospdate.Visible = True
    If MMain.$RepoReportMode = True Then
      mnusearname.Visible = False
    Endif

  Else
    pnlocat.Visible = False
  Endif

  cmbcolumn.List = ["Presentation", "Complication"]
  cmbdelbaby.List = ["Live Baby", "Fresh Still Birth", "Macerated Still Birth", "%"]
  cmbdelbaby.Text = "%"

  xtype = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select flditem as col from tbldelivery"))
  If xtype And If xtype.Count Then
    cmbdeltype.List = xtype
  Else
    cmbdeltype.List = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(flddeltype) as col from tblconfinement"))
  Endif
  cmbdeltype.Add("%")
  cmbdeltype.Text = "%"

  dtfir.Value = Now()
  dtlast.Value = Now()

End

Public Sub Form_Resize()

  modGeneralMain.ShowSelectedFormMenu(Me)

End

Public Sub Form_Close()

  modGeneralMain.RecordFormExit(Me)

End

Public Sub cmbdeltype_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbdeltype)

End

Public Sub cmbdelbaby_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbdelbaby)

End

Public Sub txtoption_KeyRelease()

  modFillContainer.AutoFillComboBox(txtoption)

End

Public Sub mnuaddcolumn_Click()

  Dim hForm As FmAddNewColumn

  hForm = New FmAddNewColumn(Me.Tag)
  hForm.ShowModal

End

Public Sub cmbcolumn_Click()

  Dim xcompl As String[]

  If cmbcolumn.Text = "Presentation" Then
    xcompl = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select flditem as col from tbldelcomplication"))
    If xcompl And If xcompl.Count Then
      txtoption.List = xcompl
    Else
      txtoption.List = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(fldcomplication) as col from tblconfinement"))
    Endif
    txtoption.Add("%")
    txtoption.Text = "%"
  Else If cmbcolumn.Text = "Complication" Then
    txtoption.List = ["Cephalic", "Breech", "Face", "Cord", "Shoulder", "%"]
    txtoption.Text = "%"
  Endif

End

Private Sub GetFieldList()

  Dim xhospfld As String

  xhospfld = modDataRepo.HospitalField()
  $SSQLFields = ["fldid", "fldencounterval", "fldencounterval", "fldencounterval", "fldencounterval", modDataRepo.SerialField(), "fldencounterval", "fldencounterval", "flddeltime", "flddeltype", "flddelresult", "fldbloodloss", "flddelwt", "fldbabypatno", "fldbabyref", "fldbabypatno", "flddelphysician", "flddelnurse", "flddelassist", "fldcomplication", "fldpresent"]   ''
  If mnuobsparameter.Checked = True Then
    $SSQLFields.Insert(["fldreference", "fldreference", "fldreference", "fldreference", "fldreference", "fldreference", "fldreference"])
  Endif
  If xhospfld Then
    $SSQLFields.Add(xhospfld)
  Endif

End

Private Function GetSQLColumns() As String[]

  Dim xFldList As String[]
  Dim i As Integer

  GetFieldList()
  modCustPatient.FillNewCOlumnCollection(Me.Tag)
  $newColumn = modCustPatient.CustomNewColumnsTitle(Me.Tag)
  xFldList = $SSQLFields.Copy()
  If $newColumn.Count Then
    For i = 0 To $newColumn.Count - 1
      xFldList.Add("fldencounterval")
    Next
  Endif
  Return xFldList

End

Private Sub SetRepoStr()

  If MMain.$WebReport = "Multiple" Then
    $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
  Else
    $RepoStr = ""
  Endif

End

Public Sub mnusearch_Click()

  Dim encid As String
  Dim sql As String
  Dim xFldList As String[]

  encid = GetEncid()

  If encid Then
    xFldList = GetSQLColumns()
    sql = "select " & xFldList.Join(",") & " from tblconfinement where fldencounterval=&1" & $RepoStr
    $rData = modDatabase.$syConn.Exec(sql, encid)
    FillPatientGrid()
  Endif

End

Public Sub mnusearname_Click()

  Dim xname As String[]
  Dim sql As String
  Dim xFldList As String[]

  xname = InputDoubleText(("Search Patient Name"), ["First Name", "SurName"], ["%", "%"], modBasic.$SurNameList)
  SetRepoStr()
  If xname Then
    xFldList = GetSQLColumns()
    sql = "select " & xFldList.Join(",") & " from tblconfinement where fldencounterval in(select fldencounterval from tblencounter where fldpatientval in(select fldpatientval from tblpatientinfo where lower(fldptnamefir) like &1 and lower(fldptnamelast) like &2))" & $RepoStr
    $rData = modDatabase.$syConn.Exec(sql, LCase(xname[0]), LCase(xname[1]))
    Inc Application.Busy
    FillPatientGrid()
    Dec Application.Busy
  Endif

End

Public Sub mnuquery_Click()

  If mnuquery.Checked = True Then
    txtquery.Text = ""
    txtquery.Visible = False
    pnlquery.Visible = True
    mnuquery.Checked = False
  Else If mnuquery.Checked = False Then
    txtquery.Text = ""
    txtquery.Visible = True
    pnlquery.Visible = False
    mnuquery.Checked = True
  Endif

End

Public Sub mnuobsparameter_Click()

  If mnuobsparameter.Checked = True Then
    mnuobsparameter.Checked = False
  Else If mnuobsparameter.Checked = False Then
    mnuobsparameter.Checked = True
  Endif

End

Private Function ExecuteQuery(xFldList As String[], Optional sGroup As String) As Result

  Dim sql As String
  Dim xdelwt As String
  Dim xdist As String
  Dim xage As String
  Dim xstr As String
  Dim xquery As String
  Dim res As Result
  Dim xgroup As String

  If sGroup Then
    xgroup = " GROUP BY " & sGroup
  Else
    If chkdstenc.Value = True Then
      xgroup = " GROUP BY fldencounterval"
    Else
      xgroup = ""
    Endif
  Endif

  SetRepoStr()
  If mnuquery.Checked = True Then
    If txtquery.Text Then
      If modMisc.CheckRestrictedKeyStrict(txtquery.Text) = 0 Then
        xquery = " and " & Trim(txtquery.Text)
      Endif
    Else
      xquery = ""
    Endif
    sql = "select " & xFldList.Join(",") & " from tblconfinement where flddeltime>=&1 and flddeltime<=&2" & xquery & $RepoStr & xgroup
    res = modDatabase.$syConn.Exec(sql, modDate.StartSqlDate(dtfir.value), modDate.EndSqlDate(dtlast.value))
  Else

    If cmbcolumn.Text = "Complication" Then
      xdist = " and fldcomplication like &5"
    Else If cmbcolumn.Text = "Complication" Then
      xdist = " and fldpresent like &5"
    Else
      xdist = ""
    Endif

    If Not txtfromwt.Value And If Not txttowt.Value Then
      xdelwt = ""
    Else
      xdelwt = " and flddelwt>=&6 and flddelwt<=&7"
    Endif

    If Not txtfromage.Value And If Not txttoage.Value Then
      xage = ""
    Else
      xstr = modMedReports.GetAgeStringByTable("tblconfinement", modDatabase.$syConn)
      xage = " and fldencounterval in(select fldencounterval from tblencounter where fldpatientval in(select fldpatientval from tblpatientinfo where fldptbirday like &8 and " & xstr & ">=&9 and " & xstr & "<&{10}))"
    Endif

    sql = "select " & xFldList.Join(",") & " from tblconfinement where flddeltime>=&1 and flddeltime<=&2 and flddelresult like &3 and flddeltype like &4" & xdelwt & xdist & xage & $RepoStr & xgroup
    res = modDatabase.$syConn.Exec(sql, modDate.StartSqlDate(dtfir.value), modDate.EndSqlDate(dtlast.value), cmbdelbaby.Text, cmbdeltype.Text, txtoption.Text, txtfromwt.Value, txttowt.Value, "%", 365 * txtfromage.Value, 365 * txttoage.Value)
  Endif
  Return res

End

Private Function GetGridViewValue(Column As Integer, xVariable As Variant) As Variant

  Dim xxx As Variant
  Dim i As Integer

  If Column = 1 Then
    If $xtitle Then
      xxx = modCustPatient.FormatColValue(xVariable)
    Else
      xxx = xVariable
    Endif
  Else If Column = 2 Then
    xxx = modReportVar.GetDateTimeReport(modPatient.GetRecordDate(xVariable), gb.MediumDate)
  Else If Column = 3 Then
    xxx = modPatient.GetPatientNameByEnc(xVariable, modDatabase.$syConn)
  Else If Column = 4 Then
    xxx = modPatient.GetPatientAddressByEnc(xVariable, modDatabase.$syConn)
  Else If Column = 5 Then
    xxx = modMedReports.GetPatientPastAgeString("tblconfinement", xVariable)
  Else If Column = 6 Then
    xxx = modPatient.GetPatientNoByEnc(xVariable)
  Else If Column = 7 Then
    xxx = modPatient.GetPatientGuardianByEnc(xVariable)
  Else If Column = 8 Then
    xxx = modReportVar.GetDateTimeReport(xVariable, gb.GeneralDate)
  Else If Column = 15 Then
    xxx = modPatient.PatientGenderByPatNo(xVariable)
  Else If Column = 16 Then
    xxx = modGeneral.GetUserFullName(xVariable)
  Else If Column = 21 Then
    If mnuobsparameter.Checked = False Then
      xxx = modDataRepo.GetHospitalTextLabel(xVariable)
    Else
      xxx = GetObstetricValue(xVariable, "Gravida")
    Endif
  Else If Column = 22 Then
    If mnuobsparameter.Checked = False Then
      xxx = xVariable
    Else
      xxx = GetObstetricValue(xVariable, "Parity")
    Endif
  Else If Column = 23 Then
    If mnuobsparameter.Checked = False Then
      xxx = xVariable
    Else
      xxx = GetObstetricValue(xVariable, "Abortion")
    Endif
  Else If Column = 24 Then
    If mnuobsparameter.Checked = False Then
      xxx = xVariable
    Else
      xxx = GetObstetricValue(xVariable, "Living")
    Endif
  Else If Column = 25 Then
    If mnuobsparameter.Checked = False Then
      xxx = xVariable
    Else
      xxx = modReportVar.GetDateTimeReport(GetObstetricValue(xVariable, "LMP"), gb.MediumDate)
    Endif
  Else If Column = 26 Then
    If mnuobsparameter.Checked = False Then
      xxx = xVariable
    Else
      xxx = modReportVar.GetDateTimeReport(GetObstetricValue(xVariable, "EDD"), gb.MediumDate)
    Endif
  Else If Column = 27 Then
    If mnuobsparameter.Checked = False Then
      xxx = xVariable
    Else
      xxx = GetObstetricValue(xVariable, "Gestation")
    Endif
  Else If Column = 28 Then
    If mnuobsparameter.Checked = True Then
      xxx = modDataRepo.GetHospitalTextLabel(xVariable)
    Else
      xxx = xVariable
    Endif
  Else
    xxx = xVariable
  Endif

  If $newColumn.Count Then
    For i = 0 To $newColumn.Count - 1
      If Column = $ColCount + i Then
        xxx = modCustPatient.NewColValue(Me.Tag, $newColumn[i], xVariable)
      Endif
    Next
  Endif
  Return xxx

End

Private Function GetObstetricValue(xVar As String, sType As String) As Variant

  Dim xField As String
  Dim sVal As Variant

  xField = modPathoSub.GetObstetricField(sType)
  sVal = modPatient.GetObstetricFieldValue(xVar, xField)

  Return sVal

End

Public Sub btnrefresh_Click()

  Dim xFldList As String[]

  TabStrip1.Index = 0
  $xtitle = modSettings.ShowSettingFromFIle("FormatColumn" & "/" & "Title")
  modCustPatient.FillFormatCOlumnCollection()
  If chkexcoutlier.Value = True Then
    $chartLimit = InputDoubleVal(("Select Limits for Frequency Chart"), ["Lower Value", "Upper Value"], [0, 0])
  Endif
  xFldList = GetSQLColumns()
  $rData = ExecuteQuery(xFldList)

  Inc Application.Busy
  If chkgrid.Value = True Then
    FillPatientGrid()
  Endif

  If chkchart.Value = True Then
    FillItemChartQTY()
  Endif
  If chkweight.Value = True Then
    MakeFreqDistribution()
  Endif
  Dec Application.Busy

End

Private Sub FillPatientGrid()

  Dim i As Integer

  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView1, $rData, $aMyFields)
  $ColCount = $SSQLFields.Count
  With GridView1
    .Columns[0].Width = 1
    If $xtitle Then
      .Columns[1].Width = 150 * modBasic.$AppWidthRatio
    Else
      .Columns[1].Width = 125 * modBasic.$AppWidthRatio
    Endif
    .Columns[2].Width = 100 * modBasic.$AppWidthRatio
    .Columns[3].Width = 175 * modBasic.$AppWidthRatio
    .Columns[4].Width = 200 * modBasic.$AppWidthRatio
    .Columns[5].Width = 75 * modBasic.$AppWidthRatio
    .Columns[6].Width = 125 * modBasic.$AppWidthRatio
    .Columns[7].Width = 175 * modBasic.$AppWidthRatio
    .Columns[8].Width = 150 * modBasic.$AppWidthRatio
    .Columns[9].Width = 125 * modBasic.$AppWidthRatio
    .Columns[10].Width = 125 * modBasic.$AppWidthRatio
    .Columns[11].Width = 75 * modBasic.$AppWidthRatio
    .Columns[12].Width = 75 * modBasic.$AppWidthRatio
    .Columns[13].Width = 125 * modBasic.$AppWidthRatio
    .Columns[14].Width = 150 * modBasic.$AppWidthRatio
    .Columns[15].Width = 75 * modBasic.$AppWidthRatio
    .Columns[16].Width = 150 * modBasic.$AppWidthRatio
    .Columns[17].Width = 150 * modBasic.$AppWidthRatio
    .Columns[18].Width = 150 * modBasic.$AppWidthRatio
    .Columns[19].Width = 125 * modBasic.$AppWidthRatio
    .Columns[20].Width = 100 * modBasic.$AppWidthRatio
    If mnuobsparameter.Checked = True Then
      .Columns[21].Width = 75 * modBasic.$AppWidthRatio
      .Columns[22].Width = 75 * modBasic.$AppWidthRatio
      .Columns[23].Width = 75 * modBasic.$AppWidthRatio
      .Columns[24].Width = 75 * modBasic.$AppWidthRatio
      .Columns[25].Width = 125 * modBasic.$AppWidthRatio
      .Columns[26].Width = 125 * modBasic.$AppWidthRatio
      .Columns[27].Width = 75 * modBasic.$AppWidthRatio
    Endif

    If $xtitle Then
      .Columns[1].Text = $xtitle
    Else
      .Columns[1].Text = "EncID"
    Endif
    .Columns[2].Text = "DOReg"
    .Columns[3].Text = "Mother"
    .Columns[4].Text = "Address"
    .Columns[5].Text = "Age"
    .Columns[6].Text = "PatientNo"
    .Columns[7].Text = "Guardian"
    .Columns[8].Text = "DelDate"
    .Columns[9].Text = "DelMode"
    .Columns[10].Text = "Result"
    .Columns[11].Text = "B.Loss(mL)"
    .Columns[12].Text = "BirthWt(g)"
    .Columns[13].Text = "BabyNo"
    .Columns[14].Text = "DiaryNo"
    .Columns[15].Text = "Baby Sex"
    .Columns[16].Text = "Consultant"
    .Columns[17].Text = "Attendant"
    .Columns[18].Text = "SBA"
    .Columns[19].Text = "Complication"
    .Columns[20].Text = "Presentation"
    If mnuobsparameter.Checked = True Then
      .Columns[21].Text = "Gravida"
      .Columns[22].Text = "Parity"
      .Columns[23].Text = "Abortion"
      .Columns[24].Text = "Living"
      .Columns[25].Text = "LMP"
      .Columns[26].Text = "EDD"
      .Columns[27].Text = "Gestation"
    Endif

    If $newColumn.Count Then
      For i = 0 To $newColumn.Count - 1
        .Columns[$ColCount + i].Text = $newColumn[i]
        .Columns[$ColCount + i].Width = 150 * modBasic.$AppWidthRatio
      Next
    Endif
  End With

End

Public Sub GridView1_Data(Row As Integer, Column As Integer)

  $rData.MoveTo(Row)
  modGeneralMain.GridViewDecoration(GridView1, Row)
  If Column > $SSQLFields.Count - 1 Then
    GridView1.Data.RichText = modString.TextToHTML(GetGridViewValue(Column, $rData[$aMyFields[Column]]))
  Else
    GridView1.Data.Text = GetGridViewValue(Column, $rData[$aMyFields[Column]])
  Endif
  GridView1.Rows[Row].Height = Max(GridView1.Rows[Row].Height, GridView1.Data.Font.RichTextHeight(GridView1.Data.Text, GridView1.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView1.Rows.Height - GridView1.Font.Height))
  GridView1.Data.WordWrap = True

End

''-------------------------------- Grid Reports -----------------------------
Public Sub GridView1_Menu()

  mnudata.Popup

End

Public Sub mnudatareport_Click()

  Dim xPath As String

  If GridView1.Rows.Selection.Count > 0 Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowDeliveryReportFull(GridView1[GridView1.Row, 1].Text)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(GridView1[GridView1.Row, 1].Text, xPath, "ReportSize")
  Endif

End

Public Sub GridView1_DblClick()

  Dim xx As Integer
  Dim yy As Integer

  xx = Mouse.StartX - GridView1.Left
  yy = Mouse.StartY - GridView1.Top

  Balloon.Info(("Current Column is ") & CStr(GridView1.Column + 1), GridView1, xx, yy)
  Balloon.Delay = 1000

End

Public Sub mnuenchart_Click()

  Dim xx As String
  Dim xField As String
  Dim Column As Integer
  Dim res As Result
  Dim xval As Variant
  Dim hFile As CUnivariate
  Dim xFldList As String[]
  Dim sOrder As String[]

  Dim hUniv As FmAnalyzeSett

  hUniv = New FmAnalyzeSett("Univariate", modGridView.GetGridViewColumns(GridView1))
  hUniv.ShowModal

  xFldList = GetSQLColumns()
  If MMain.$IsGUIApp = True Then
    $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
    $ProgressBar1.Visible = True
    $ProgressBar1.Value = 0
  Endif
  Inc Application.Busy
  hFile = New CUnivariate

  Column = modCustPatient.GetUnivariateColumn(1)
  xField = xFldList[Column]
  res = ExecuteQuery([xField])

  If res.Available Then
    For Each res
      xval = GetGridViewValue(Column, res[xField])
      If xval Then
        hFile.Add(xval)
      Endif

      If MMain.$IsGUIApp = True Then
        $ProgressBar1.Value = (res.Index + 1) / res.Count
        Wait
      Endif
    Next
  Endif
  Dec Application.Busy
  If MMain.$IsGUIApp = True Then
    $ProgressBar1.Visible = False
  Endif

  If modSettings.ShowSettingFromFIle("UnivariateAnalysis/DataType") = "Ordinal" Then
    sOrder = ListOrder("Select Order", hFile.DistinctValues())
  Endif
  xx = modPSPP.GetEncChartGridNew(hFile.GetSPSSFile(), sOrder)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnucrosstab_Click()

  Dim xx As String
  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant

  Dim hFile As CBivariate
  Dim xFldList As String[]
  Dim sOrder As String[]
  Dim hBivar As FmAnalyzeSett

  hBivar = New FmAnalyzeSett("Bivariate", modGridView.GetGridViewColumns(GridView1))
  hBivar.ShowModal

  xFldList = GetSQLColumns()
  If MMain.$IsGUIApp = True Then
    $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
    $ProgressBar1.Visible = True
    $ProgressBar1.Value = 0
  Endif

  Inc Application.Busy
  hFile = New CBivariate
  Row = modCustPatient.GetCrossVarRow(1)
  xFieRow = xFldList[Row]
  Column = modCustPatient.GetCrossVarColumn(1)
  xFieColm = xFldList[Column]
  res = ExecuteQuery([xFieRow, xFieColm])

  If res.Available Then
    For Each res
      xval = GetGridViewValue(Row, res[xFieRow])
      yval = GetGridViewValue(Column, res[xFieColm])
      If xval And If yval Then
        hFile.Add([xval, yval])
      Endif

      If MMain.$IsGUIApp = True Then
        $ProgressBar1.Value = (res.Index + 1) / res.Count
        Wait
      Endif
    Next
  Endif
  Dec Application.Busy
  If MMain.$IsGUIApp = True Then
    $ProgressBar1.Visible = False
  Endif

  If modCustPatient.$CrossOutcomeType = "Ordinal" Then
    sOrder = ListOrder("Select Order", hFile.DistinctValues())
  Endif
  xx = modPSPP.GetCrossTabStatNew(hFile.GetSPSSFile(), hFile.GetGroups(), sOrder)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnuregression_Click()

  Dim xx As String
  Dim res As Result
  Dim xFieldList As String[]

  Dim DepCol As Integer
  Dim Indep1Col As Integer
  Dim Indep2Col As Integer
  Dim Indep3Col As Integer
  Dim Indep4Col As Integer
  Dim Indep5Col As Integer

  Dim xDepField As String
  Dim xIndep1Field As String
  Dim xIndep2Field As String
  Dim xIndep3Field As String
  Dim xIndep4Field As String
  Dim xIndep5Field As String

  Dim Depvalue As Variant
  Dim Indep1Val As Variant
  Dim Indep2Val As Variant
  Dim Indep3Val As Variant
  Dim Indep4Val As Variant
  Dim Indep5Val As Variant

  Dim DepData As Variant[]
  Dim Indep1Data As Variant[]
  Dim Indep2Data As Variant[]
  Dim Indep3Data As Variant[]
  Dim Indep4Data As Variant[]
  Dim Indep5Data As Variant[]
  Dim xFldList As String[]

  xFldList = GetSQLColumns()
  Inc Application.Busy
  xFieldList = New String[]
  DepData = New Variant[]
  Indep1Data = New Variant[]
  Indep2Data = New Variant[]
  Indep3Data = New Variant[]
  Indep4Data = New Variant[]
  Indep5Data = New Variant[]

  DepCol = modCustPatient.GetRegressionDepVal(1)
  xDepField = xFldList[DepCol]
  xFieldList.Add(xDepField)

  If modCustPatient.$RegVar1UseGridVal = "Yes" Or If modCustPatient.$RegVar1Variable Or If modCustPatient.$RegVar1SQLText Then
    Indep1Col = modCustPatient.GetRegressionVar1Val(1)
    xIndep1Field = xFldList[Indep1Col]
    xFieldList.Add(xIndep1Field)
  Endif
  If modCustPatient.$RegVar2UseGridVal = "Yes" Or If modCustPatient.$RegVar2Variable Or If modCustPatient.$RegVar2SQLText Then
    Indep2Col = modCustPatient.GetRegressionVar2Val(1)
    xIndep2Field = xFldList[Indep2Col]
    xFieldList.Add(xIndep2Field)
  Endif
  If modCustPatient.$RegVar3UseGridVal = "Yes" Or If modCustPatient.$RegVar3Variable Or If modCustPatient.$RegVar3SQLText Then
    Indep3Col = modCustPatient.GetRegressionVar3Val(1)
    xIndep3Field = xFldList[Indep3Col]
    xFieldList.Add(xIndep3Field)
  Endif
  If modCustPatient.$RegVar4UseGridVal = "Yes" Or If modCustPatient.$RegVar4Variable Or If modCustPatient.$RegVar4SQLText Then
    Indep4Col = modCustPatient.GetRegressionVar4Val(1)
    xIndep4Field = xFldList[Indep4Col]
    xFieldList.Add(xIndep4Field)
  Endif
  If modCustPatient.$RegVar5UseGridVal = "Yes" Or If modCustPatient.$RegVar5Variable Or If modCustPatient.$RegVar5SQLText Then
    Indep5Col = modCustPatient.GetRegressionVar5Val(1)
    xIndep5Field = xFldList[Indep5Col]
    xFieldList.Add(xIndep5Field)
  Endif

  res = ExecuteQuery(xFieldList)

  If res.Available Then
    For Each res
      Depvalue = GetGridViewValue(DepCol, res[xDepField])
      If xIndep1Field Then
        Indep1Val = GetGridViewValue(Indep1Col, res[xIndep1Field])
      Else
        Indep1Val = "__"
      Endif
      If xIndep2Field Then
        Indep2Val = GetGridViewValue(Indep2Col, res[xIndep2Field])
      Else
        Indep2Val = "__"
      Endif
      If xIndep3Field Then
        Indep3Val = GetGridViewValue(Indep3Col, res[xIndep3Field])
      Else
        Indep3Val = "__"
      Endif
      If xIndep4Field Then
        Indep4Val = GetGridViewValue(Indep4Col, res[xIndep4Field])
      Else
        Indep4Val = "__"
      Endif
      If xIndep5Field Then
        Indep5Val = GetGridViewValue(Indep5Col, res[xIndep5Field])
      Else
        Indep5Val = "__"
      Endif

      If Depvalue And If Indep1Val And If Indep2Val And If Indep3Val And If Indep4Val And If Indep5Val Then
        modCustPatient.AddFormatRegressionDepToList(DepData, Depvalue)
        modCustPatient.AddFormatRegressionVar1ToList(Indep1Data, Indep1Val)
        modCustPatient.AddFormatRegressionVar2ToList(Indep2Data, Indep2Val)
        modCustPatient.AddFormatRegressionVar3ToList(Indep3Data, Indep3Val)
        modCustPatient.AddFormatRegressionVar4ToList(Indep4Data, Indep4Val)
        modCustPatient.AddFormatRegressionVar5ToList(Indep5Data, Indep5Val)
      Endif
    Next
  Endif
  Dec Application.Busy

  xx = modPSPP.RegressionChartGridNew(DepData, Indep1Data, Indep2Data, Indep3Data, Indep4Data, Indep5Data)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnucrotab_Click()

  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant

  Dim hForm As FmGridCrossTab
  Dim xForm As CCrossTab
  Dim xFldList As String[]
  Dim hGdChr As FmAnalyzeSett

  hGdChr = New FmAnalyzeSett("GridCrossTab", modGridView.GetGridViewColumns(GridView1))
  hGdChr.ShowModal

  xFldList = GetSQLColumns()
  If MMain.$IsGUIApp = True Then
    $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
    $ProgressBar1.Visible = True
    $ProgressBar1.Value = 0
  Endif

  If modCustPatient.$TabRowColumn And If modCustPatient.$TabFieldColumn Then
    xForm = New CCrossTab
    Inc Application.Busy
    Row = CInt(modCustPatient.$TabRowColumn) - 1
    xFieRow = xFldList[Row]
    Column = CInt(modCustPatient.$TabFieldColumn) - 1
    xFieColm = xFldList[Column]
    res = ExecuteQuery([xFieRow, xFieColm])

    If res.Available Then
      For Each res
        xval = GetGridViewValue(Row, res[xFieRow])
        yval = GetGridViewValue(Column, res[xFieColm])
        If xval And If yval Then
          xForm.Add([xval, yval])
        Endif

        If MMain.$IsGUIApp = True Then
          $ProgressBar1.Value = (res.Index + 1) / res.Count
          Wait
        Endif
      Next
    Endif
    Dec Application.Busy

    hForm = New FmGridCrossTab(GridView1.Columns[Row].Text, xForm.GetSPSSFile())
    hForm.ShowModal
    modExternal.$ExecValueColl.Clear()
  Endif

  If MMain.$IsGUIApp = True Then
    $ProgressBar1.Visible = False
  Endif

End

Public Sub mnugridsummary_Click()

  Dim xx As String
  Dim ChapCol As String
  Dim GropCol As String
  Dim xChapList As String[]
  Dim xGropList As String[]

  Dim res As Result
  Dim valCol As String
  Dim xFieldList As String[]

  Dim xFinList As Variant[]
  Dim xrowVar As Variant[]
  Dim xchapval As String
  Dim xgroup As String
  Dim xPath As String
  Dim xFldList As String[]

  Dim hGdSum As FmAnalyzeSett

  hGdSum = New FmAnalyzeSett("GridSummary", modGridView.GetGridViewColumns(GridView1))
  hGdSum.ShowModal

  xFldList = GetSQLColumns()
  Inc Application.Busy
  xFieldList = New String[]
  If modCustPatient.$SumChapterColumn Then
    ChapCol = xFldList[modCustPatient.$SumChapterColumn - 1]
    xFieldList.Add(ChapCol)
  Endif
  GropCol = xFldList[modCustPatient.$SumGroupColumn - 1]
  valCol = xFldList[modCustPatient.$SumValueColumn - 1]
  xFieldList.Add(GropCol)
  xFieldList.Add(valCol)

  xChapList = New String[]
  xGropList = New String[]
  xFinList = New Variant[]
  res = ExecuteQuery(xFieldList)
  If res.Available Then
    For Each res
      xrowVar = New Variant[]
      If modCustPatient.$SumChapterColumn Then
        xchapval = GetGridViewValue(modCustPatient.$SumChapterColumn - 1, res[ChapCol])
        xrowVar.Add(xchapval)
        xChapList.Add(xchapval)
      Endif
      xgroup = GetGridViewValue(modCustPatient.$SumGroupColumn - 1, res[GropCol])
      xrowVar.Add(xgroup)
      xGropList.Add(xgroup)

      xrowVar.Add(GetGridViewValue(modCustPatient.$SumValueColumn - 1, res[valCol]))
      xFinList.Add(xrowVar)
    Next
  Endif
  Dec Application.Busy

  xx = "Date: " & modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate)
  If modCustPatient.$SumGroupColumn And If modCustPatient.$SumValueColumn Then
    If modCustPatient.$SumChapterColumn Then
      If modCustPatient.$SummaryType = "Summation(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapterTableReport("Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else If modCustPatient.$SummaryType = "Count(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapCountTableReport("Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else
        xPath = modCHTMLReport.SummaryGridChapterReport("Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Endif
    Else
      xPath = modCHTMLReport.SummaryGridReport("Report Summary", xx, modString.GetDistinctStringArray(xGropList), xFinList)
    Endif
    modControlSub.DisplayReportExport(xPath)
  Endif

End

Public Sub mnuhiderow_Click()

  GridView1.Rows[GridView1.Row].Height = 0

End

''--------------------------------- Chart Data ------------------------------------
Private Sub FillItemChartQTY()

  Dim xLst As String[]
  Dim sFile As String

  xLst = New String[]
  For Each $rData
    If Not modBasic.$HospCode And If MMain.$WebReport = "Multiple" Then
      If $rData["flddelresult"] = "Live Baby" Then
        xLst.Add($rData["fldhospcode"] & gb.Tab & "Live")
      Else
        xLst.Add($rData["fldhospcode"] & gb.Tab & "StillBirth")
      Endif
    Else
      If $rData["flddelresult"] = "Live Baby" Then
        xLst.Add(Format(DateDiff(dtfir.Value, $rData["flddeltime"], modChart.GetDateIntegerFromSetting()), "0#.#") & gb.Tab & "Live")
      Else
        xLst.Add(Format(DateDiff(dtfir.Value, $rData["flddeltime"], modChart.GetDateIntegerFromSetting()), "0#.#") & gb.Tab & "StillBirth")
      Endif
    Endif
  Next

  sFile = Temp()
  File.Save(sFile, xLst.Join(gb.NewLine))
  mnustatsqty.Tag = sFile
  If modBasic.$ChartExecStat = "PSPP" Then
    modImage.StretchtPictureToBox(PictureBox1, modChart.ProportionChart(sFile, "Delivery Count"))
  Else
    modImage.StretchtPictureToBox(PictureBox1, modChart.ProportionChart(sFile, "Delivery Count"))
  Endif

End

Public Sub PictureBox1_Menu()

  mnuqty.Popup

End

Public Sub mnuexpoqty_Click()

  If Dialog.SelectDirectory() Then Return
  PictureBox1.Image.Save(Dialog.Path &/ "DeliveryQTY" & ".png")

End

Public Sub mnustatsqty_Click()

  If modBasic.$ChartExecStat = "PSPP" Then
    modControlSub.OpenBrowser(modPSPP.CreatePSPPStatFIle("crosstab", mnustatsqty.Tag))
  Else
    modControlSub.OpenBrowser(modPSPP.CreatePSPPStatFIle("crosstab", mnustatsqty.Tag))
  Endif

End

''---------------------------- Wt chart ---------------------------------------
Private Sub MakeFreqDistribution()

  Dim xLst As String[]
  Dim sFile As String
  Dim ximg As String
  Dim xval As Float

  xLst = New String[]
  $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
  $ProgressBar1.Visible = True
  $ProgressBar1.Value = 0

  For Each $rData
    xval = $rData["flddelwt"]
    If chkexcoutlier.Value = True Then
      If $chartLimit Then
        If xval >= $chartLimit[0] And If xval <= $chartLimit[1] Then
          xLst.Add(Format(xval, gb.Fixed))
        Endif
      Else
        xLst.Add(Format(xval, gb.Fixed))
      Endif
    Else
      xLst.Add(Format(xval, gb.Fixed))
    Endif
    $ProgressBar1.Value = ($rData.Index + 1) / $rData.Count
    Wait
  Next

  If $ProgressBar1 Then
    $ProgressBar1.Visible = False
  Endif

  sFile = Temp()
  File.Save(sFile, xLst.Join(gb.NewLine))

  If modBasic.$ChartExecStat = "PSPP" Then
    ximg = modPSPP.CreatePSPPStatFIle("frequency", sFile)
  Else
    ximg = modChart.FrequencyChart(sFile, "Expense : Frequency Distribution")
  Endif
  modImage.StretchtPictureToBox(PictureBox2, ximg)
  mnustatsfreq.Tag = sFile

End

Public Sub PictureBox2_Menu()

  mnufreq.Popup

End

Public Sub mnuexpofreq_Click()

  If Dialog.SelectDirectory() Then Return
  PictureBox2.Image.Save(Dialog.Path &/ "Expense" & ".png")

End

Public Sub mnustatsfreq_Click()

  Dim hForm As Fmgnustat

  If modBasic.$ChartExecStat = "PSPP" Then
    modControlSub.OpenBrowser(modPSPP.CreatePSPPStatFIle("statistics", mnustatsfreq.Tag))
  Else
    hForm = New Fmgnustat(mnustatsfreq.Tag)
    hForm.ShowModal
  Endif

End

Public Sub mnuttest_Click()

  modControlSub.OpenBrowser(modPSPP.CreatePSPPStatFIle("t-test", mnustatsfreq.Tag))

End

''------------------------------------------ Reports -------------------------------
Public Sub dtnepfir_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtfir.Value))
  If xx Then
    dtfir.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub dtneplast_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtlast.Value))
  If xx Then
    dtlast.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub btnfullrep_Click()

  Dim xHeader As String[]
  Dim xhide As Integer[]
  Dim Column As Integer
  Dim xCollRow As Collection
  Dim xColum As Integer

  Dim $hGridExportTable As CExportResult
  Dim xparam1 As String
  Dim xparam2 As String
  Dim encColumn As Integer

  Dim xFldList As String[]

  If MMain.$IsGUIApp = True Then
    $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
    $ProgressBar1.Visible = True
    $ProgressBar1.Value = 0
  Endif

  xHeader = New String[]
  xhide = New Integer[]
  For Column = 0 To GridView1.Columns.Count - 1
    xHeader.Add(GridView1.Columns[Column].Text)
    If GridView1.Columns[Column].Width < 5 Then
      xhide.Add(Column)
    Endif
  Next
  xparam1 = "Confinement Report"
  xparam2 = modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate)
  encColumn = 1
  $hGridExportTable = New CExportResult(Me.Tag, xHeader, xhide, xparam1, xparam2, encColumn)

  Inc Application.Busy
  xFldList = GetSQLColumns()

  For Each $rData
    xCollRow = New Collection
    For xColum = 0 To xFldList.Count - 1
      xCollRow.Add(GetGridViewValue(xColum, $rData[xFldList[xColum]]), CStr(xColum))
    Next
    $hGridExportTable.Add($rData.Index, xCollRow)

    If MMain.$IsGUIApp = True Then
      $ProgressBar1.Value = ($rData.Index + 1) / $rData.Count
      Wait
    Endif
  Next

  Dec Application.Busy
  If MMain.$IsGUIApp = True Then
    $ProgressBar1.Visible = False
  Endif
  modControlSub.DisplayReportExport($hGridExportTable.HTMLPath())

End

Private Sub ShowSUmmaryReport(sField As String)

  Dim xPath As String
  Dim xdate As Date[]

  xdate = DoubleDates("Select Dates", "Confinement", [dtfir.Value, dtlast.Value])
  If xdate Then
    Inc Application.Busy
    xPath = modCHTMLDate.SummaryStatReport(modDatabase.$syConn, "tblconfinement", modDataRepo.SerialField(), sField, "flddeltime", xdate[0], xdate[1], cmblocation.Text, cmbvalue.Text)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnutype_Click()

  ShowSUmmaryReport("flddeltype")

End

Public Sub mnuresult_Click()

  ShowSUmmaryReport("flddelresult")

End

Public Sub mnupresent_Click()

  ShowSUmmaryReport("fldpresent")

End

Public Sub mnucons_Click()

  ShowSUmmaryReport("flddelphysician")

End

Public Sub mnulocat_Click()

  ShowSUmmaryReport("fldcomp")

End

Public Sub mnuhospsumm_Click()

  ShowSUmmaryReport("fldhospcode")

End

Public Sub mnubabygender_Click()

  Dim xPath As String
  Dim xdate As Date[]

  xdate = DoubleDates("Select Dates", "Confinement", [dtfir.Value, dtlast.Value])
  If xdate Then
    Inc Application.Busy
    xPath = modCHTMLDate.DeliveryStatReport(modDatabase.$syConn, xdate[0], xdate[1], cmblocation.Text, cmbvalue.Text)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnubabywt_Click()

  Dim xPath As String
  Dim xdate As Date[]

  xdate = DoubleDates("Select Dates", "Confinement", [dtfir.Value, dtlast.Value])
  If xdate Then
    Inc Application.Busy
    xPath = modCHTMLDate.DeliveryWeightReport(modDatabase.$syConn, xdate[0], xdate[1], cmblocation.Text, cmbvalue.Text)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnumothage_Click()

  Dim xPath As String
  Dim xdate As Date[]

  xdate = DoubleDates("Select Dates", "Confinement", [dtfir.Value, dtlast.Value])
  If xdate Then
    Inc Application.Busy
    xPath = modCHTMLDate.SummaryMotherAgeGroup(modDatabase.$syConn, xdate[0], xdate[1], cmblocation.Text, cmbvalue.Text)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnudistrict_Click()

  Dim xPath As String
  Dim xdate As Date[]

  xdate = DoubleDates("Select Dates", "Confinement", [dtfir.Value, dtlast.Value])
  If xdate Then
    Inc Application.Busy
    xPath = modCHTMLDate.DeliveryDistrictReport(modDatabase.$syConn, xdate[0], xdate[1], cmblocation.Text, cmbvalue.Text)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Private Sub ShowSUmmaryDateWiseReport(sField As String)

  Dim xPath As String
  Dim xdate As Date[]

  xdate = DoubleDates("Select Dates", "Confinement", [dtfir.Value, dtlast.Value], 1)
  If xdate Then
    Inc Application.Busy
    xPath = modCHTMLDate.SummaryStatDateWiseReport(modDatabase.$syConn, "tblconfinement", modDataRepo.SerialField(), sField, "flddeltime", xdate[0], xdate[1], cmblocation.Text, cmbvalue.Text)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnudtdelivtype_Click()

  ShowSUmmaryDateWiseReport("flddeltype")

End

Public Sub mnudtdelresult_Click()

  ShowSUmmaryDateWiseReport("flddelresult")

End

Public Sub mnudtpresent_Click()

  ShowSUmmaryDateWiseReport("fldpresent")

End

Public Sub mnudtconsult_Click()

  ShowSUmmaryDateWiseReport("flddelphysician")

End

Public Sub mnudtlocation_Click()

  ShowSUmmaryDateWiseReport("fldcomp")

End

Public Sub mnuhospdate_Click()

  ShowSUmmaryDateWiseReport("fldhospcode")

End

Public Sub chkchart_Click()

  TabStrip1.Index = 1

End

Public Sub chkweight_Click()

  TabStrip1.Index = 2

End

Public Sub mnucountuni_Click()

  Dim Column As Integer
  Dim xFieColm As String
  Dim res As Result
  Dim yval As Variant
  Dim xList As String[]

  Dim xVar As Variant[]
  Dim xFldList As String[]
  Dim xPath As String

  Column = ListIndex("Column Index", modGridView.GetGridViewColumns(GridView1))
  If Column + 1 > 0 Then
    xFldList = GetSQLColumns()
    If MMain.$IsGUIApp = True Then
      $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
      $ProgressBar1.Visible = True
      $ProgressBar1.Value = 0
    Endif

    Inc Application.Busy
    xFieColm = xFldList[Column]
    res = ExecuteQuery([xFieColm])
    xList = New String[]
    If res.Available Then
      For Each res
        yval = GetGridViewValue(Column, res[xFieColm])
        If yval Then
          xList.Add(yval)
        Endif

        If MMain.$IsGUIApp = True Then
          $ProgressBar1.Value = (res.Index + 1) / res.Count
          Wait
        Endif
      Next
    Endif
    If xList.Count Then
      xVar = modString.GetUnivariateSummary(xList)
      xPath = modCHTMLReport.CreateHTMLReportFromArray(["Variable", "Count"], xVar, GridView1.Columns[Column].Text, modReportVar.GetDateTimeReport(Now(), gb.GeneralDate))
    Endif
    Dec Application.Busy

    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnuformat_Click()

  fmFormatColumn.Close
  fmFormatColumn.ShowModal

End

Public Sub mnucolumns_Click()

  If Message.Question(modGridView.GetColumnsListString(GridView1), ("OK"), ("Setting")) = 2 Then
    fmChartSetting.Close
    fmChartSetting.ShowModal
  Endif

End

Public Sub mnuexpocolumn_Click()

  Dim hForm As FmCustColumnSet

  hForm = New FmCustColumnSet(Me.Tag)
  hForm.ShowModal

End
