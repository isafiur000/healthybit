' Gambas class file

Private $encid As String
Private $sSaleInvoice As String
Private $sNSHI As String
Private $sLedger As String
Private $sReference As String
Private $sRetnInvoice As String

Private $rData1 As Result
Private $aMyFields1 As String[]
Private $sBillLst As String[]

Public Sub _new(encid As String, saleInvoice As String, sNHSI As String, sLedger As String, sReference As String, retnInvoice As String)

  $encid = encid
  $sSaleInvoice = saleInvoice
  $sNSHI = sNHSI
  $sLedger = sLedger
  $sReference = sReference
  If retnInvoice Then
    $sRetnInvoice = retnInvoice
  Endif

End

Public Sub Form_Open()

  Dim res As Result

  txtencid.Text = $encid
  txtpatientname.Text = modPatient.GetPatientNameByEnc($encid)
  txtgender.Text = modPatient.GetPatientAgeString($encid, Now()) & "/" & Left(modPatient.GetPatientSex($encid), 1)
  txtinvoice.Text = $sSaleInvoice
  If $sRetnInvoice Then
    lblreturn.Text = $sRetnInvoice
    $sBillLst = [$sSaleInvoice, $sRetnInvoice]
    ShowReturnGrid()
  Endif

End

Private Function GetDiagnosisState() As String

  Dim rex As Result
  Dim xdiagno As String

  If modBasic.$IMISICDForm = "ICD10" Then
    rex = modDatabase.$myConn.Exec("select fldcode,flduserid from tblpatfindings where fldencounterval=&1 and (fldtype=&2 or fldtype=&3) and fldsave=&4 and fldcodeid<>&5 and fldcodeid<>&6 and flduserid in(select flduserid from tbluser where fldusercode like &7)", $encid, "Provisional Diagnosis", "Final Diagnosis", True, "Obstetrics", "Other", "%")
  Else
    rex = modDatabase.$myConn.Exec("select fldcode,flduserid from tblpatfindings where fldencounterval=&1 and (fldtype=&2 or fldtype=&3) and fldsave=&4 and fldcodenew<>&5 and fldcodenew<>&6 and flduserid in(select flduserid from tbluser where fldusercode like &7)", $encid, "Provisional Diagnosis", "Final Diagnosis", True, "Obstetrics", "Other", "%")
  Endif
  If rex.Available Then
    rex.MoveLast
    If rex["fldcode"] And If rex["flduserid"] Then
      xdiagno = "Diagnosis"
    Else
      xdiagno = ""
    Endif
  Else
    xdiagno = "No Diagnosis"
  Endif  ''diagnosis

  Return xdiagno

End

Public Sub btnupload_Click()

  If $sRetnInvoice Then
    ReturnUpload()
  Endif

End

''------------ Return ---------------------------------
Private Sub ShowReturnGrid()

  Dim xList As String[]
  Dim sql As String

  xList = ["flditemname", "CONCAT(flditemtype,'|', flditemname)", "flditemname", "AVG(flditemrate)", "SUM(flditemqty)", "SUM(fldditemamt)", "GROUP_CONCAT(DISTINCT fldbillno)", "GROUP_CONCAT(DISTINCT fldclaimstate)", "GROUP_CONCAT(DISTINCT fldclaimid)", "GROUP_CONCAT(DISTINCT fldid)", "flditemtype"]
  sql = "select " & xList.Join(",") & " from tblpatbilling where fldencounterval=&1 and fldbillno=&2 and fldbillno in(select fldbillno from tblpatbilldetail where fldbankname=&3 and fldbilltype like &4 and fldchequeno=&5 and fldchequeno in(select fldclaimid from tblclaimcode)) and fldclaimstate IS NULL GROUP BY flditemname"
  $rData1 = modDatabase.$syConn.Exec(sql, $encid, $sRetnInvoice, $sLedger, "Credit", $sReference)
  $aMyFields1 = New String[]
  modGridView.ReadSmallData(GridView2, $rData1, $aMyFields1)

  With GridView2
    .Columns[0].Width = 1
    .Columns[1].Width = 75 * modBasic.$AppWidthRatio
    .Columns[2].Width = 250 * modBasic.$AppWidthRatio
    .Columns[3].Width = 50 * modBasic.$AppWidthRatio
    .Columns[4].Width = 50 * modBasic.$AppWidthRatio
    .Columns[5].Width = 75 * modBasic.$AppWidthRatio
    .Columns[6].Width = 100 * modBasic.$AppWidthRatio
    .Columns[7].Width = 100 * modBasic.$AppWidthRatio
    .Columns[8].Width = 200 * modBasic.$AppWidthRatio
    .Columns[9].Width = 125 * modBasic.$AppWidthRatio
    .Columns[10].Width = 125 * modBasic.$AppWidthRatio

    .Columns[1].Text = "Code"
    .Columns[2].Text = "Particulars"
    .Columns[3].Text = "Rate"
    .Columns[4].Text = "QTY"
    .Columns[5].Text = "Total"
    .Columns[6].Text = "Invoice"
    .Columns[7].Text = "State"
    .Columns[8].Text = "Claim_ID"
    .Columns[9].Text = "Index"
    .Columns[10].Text = "Category"
  End With

End

Public Sub GridView2_Data(Row As Integer, Column As Integer)

  $rData1.MoveTo(Row)
  modGeneralMain.GridViewDecoration(GridView2, Row)
  If Column = 1 Then
    GridView2.Data.Text = modClaimAPI.GetBillingItemAbbvName($rData1[$aMyFields1[Column]])
  Else If Column = 3 Then
    GridView2.Data.Text = Round($rData1[$aMyFields1[Column]], -2)
  Else If Column = 4 Then
    GridView2.Data.Text = Round($rData1[$aMyFields1[Column]], -2)
  Else If Column = 5 Then
    GridView2.Data.Text = Round($rData1[$aMyFields1[Column]], -2)
  Else
    GridView2.Data.Text = $rData1[$aMyFields1[Column]]
  Endif

End

Private Function GetActiveBillQuantity(encid As String, sItem As String, sBillList As String[]) As Float

  Dim res As Result
  Dim sBill As String
  Dim xval As Float

  xval = 0
  For Each sBill In sBillList
    res = modDatabase.$myConn.Exec("select flditemqty from tblpatbilling where fldencounterval=&1 and fldbillno=&2 and flditemname=&3", encid, sBill, sItem)
    If res.Available And If res["flditemqty"] Then
      xval = xval + res["flditemqty"]
    Endif
  Next
  Return xval

End

Private Sub ReturnUpload()

  Dim hForm As CimisAPIClaim
  Dim xSNo As Variant[]
  Dim sColl As Collection
  Dim Row As Integer

  Dim xout As String
  Dim xmsg As String

  Dim sQty As Float
  Dim xdiagno As String

  xdiagno = GetDiagnosisState()
  If xdiagno Then

    Inc Application.Busy
    xSNo = New Variant[]
    For Row = 0 To GridView2.Rows.Count - 1
      If Not GridView2[Row, 8].Text Then
        If GridView2[Row, 1].Text Then

          If chkselall.Value = True Then
            sQty = 0
            sQty = GetActiveBillQuantity($encid, GridView2[Row, 0].Text, $sBillLst)
            sColl = New Collection
            sColl.Add(GridView2[Row, 1].Text, "code")
            sColl.Add(GridView2[Row, 2].Text, "item")
            sColl.Add(GridView2[Row, 3].Text, "rate")
            sColl.Add(sQty, "qty")
            sColl.Add(CFloat(GridView2[Row, 3].Text) * sQty, "total")
            sColl.Add(GridView2[Row, 9].Text, "index")
            sColl.Add(GridView2[Row, 10].Text, "type")
            sColl.Add("tblpatbilling", "table")
            xSNo.Add(sColl)
          Else
            If GridView2.Rows[Row].Selected = True Then
              sQty = 0
              sQty = GetActiveBillQuantity($encid, GridView2[Row, 0].Text, $sBillLst)
              sColl = New Collection
              sColl.Add(GridView2[Row, 1].Text, "code")
              sColl.Add(GridView2[Row, 2].Text, "item")
              sColl.Add(GridView2[Row, 3].Text, "rate")
              sColl.Add(sQty, "qty")
              sColl.Add(CFloat(GridView2[Row, 3].Text) * sQty, "total")
              sColl.Add(GridView2[Row, 9].Text, "index")
              sColl.Add(GridView2[Row, 10].Text, "type")
              sColl.Add("tblpatbilling", "table")
              xSNo.Add(sColl)
            Endif
          Endif

        Endif
      Endif
    Next

    If xSNo.Count Then
      hForm = New CimisAPIClaim($sNSHI, $encid, $sReference, False)
      hForm.AddBilling(xSNo)
      xout = hForm.UploadClaim()

      xmsg = modClaimAPI.GetClaimOutRecording(xSNo, xout, "tblpatbilling")
      ShowReturnGrid()
    Else
      Message.Warning("No Pending Items", ("OK"))
    Endif
    Dec Application.Busy

    If xmsg Then
      Message.Warning(xmsg, "OK")
    Endif

  Endif

End
