' Gambas class file

''============================ Cashier ========================
Private $rData As Result
Private $rData1 As Result
Private $sTatus As String
Private xYear As Integer
Private $F12Lock As Boolean
Private $MiniCalc As String

Private hPatient As FmBillingEntry
Private $ShowAutoPay As String
Private $BillingOption As String
Private $DiscPackage As String
Private $PatientNum As String
Private $xFinClear As Boolean
Private $xNHISCode As String
Private $AdvPayment As String
Private $DefaultItemType As String

Private $TestArray As String[]
Private $ServiceArray As String[]
Private $ProcedureArray As String[]
Private $EquipmentArray As String[]
Private $RadioArray As String[]
Private $OthersArray As String[]
Private $AllItemArray As String[]

''=============================== Pharmacy ================================
Private $rData3 As Result
Private $HideDos As Boolean
Private $DefaultPharmType As String
Private $ClinicianLst As String[]
Private $HiCappingVar As Collection
Private $HiCapAPIView As Variant[]

Private $MSurgicalLst As String[]
Private $ExtraItemLst As String[]
Private $OralBrandLst As String[]
Private $OralGenricLst As String[]
Private $InjBrandLst As String[]
Private $InjGenricLst As String[]
Private $LiqBrandLst As String[]
Private $LiqGenricLst As String[]

Public Sub Form_Open()

  modGeneralMain.ArrangeEmbedForms(Me, Panel1, "Vertical")
  Me.Icon = Picture[modGeneralMain.$strLogo]
  $BillingOption = modBasic.$BillCashOption
  hPatient = New FmBillingEntry(Panel2)
  If modBasic.$AppCachePatientDemographics = "Yes" Then
  Else
    modGeneralMain.RemovePatientCacheSelected("PatientData")
  Endif

  ''--------------------- Cashier -------------
  cmbtype.List = ["All", "Test", "Service", "Procedure", "Equipment", "Radio", "Others", "Package", "Group"]
  cmbmode.List = modBasic.$BillBillingMode
  If modBasic.$BillAlterPackage = "Yes" Then
    cmbdisctype.List = modBasic.$BillDiscountAll
  Else
    cmbdisctype.List = modBasic.$BillDiscountCash
  Endif
  modBillings.SetCashBillingTaxDiscountText(txtax, txtdisc)
  modSettings.ShowCheckBox(chkall, "BillingOption/AllLocations")
  $ShowAutoPay = modBasic.$BillShowAutoPayable
  If modBasic.$BillLockToOwnEntry = "Yes" Then
    chkall.Value = False
    chkall.Enabled = False
  Endif
  If modBasic.$BillAddDiagnosis = "Yes" Or If modBasic.$BillAddDiagnosis = "Force" Or If modBasic.$BillAddDiagnosis = "ForceAll" Then
    pnldiagnosis.Visible = True
    If modBasic.$BillLockDiagnosis = "Yes" Then
      pnldiagnosis.Enabled = False
    Endif
  Endif
  $DefaultItemType = modSettings.ShowSettingFromFIle("BillingSettings/DefaultServiceType")

  ''--------------Pharmacy------------------
  cmbroute.List = modMedicine.AllComboRoute()
  cmbfreq.List = modMedicine.FrequencyCombo()
  $ClinicianLst = modGeneral.GetClinicianCodeList()
  modStockSub.DisplayDefaultDispensingMode(rbrand, rbgeneric)
  IniateCategoryPharmArray()
  txtpharmacy.Text = modBasic.$BillTargetMedicine
  If txtpharmacy.Text Then
    Panel6.Enabled = True
  Endif
  $F12Lock = False
  $DefaultPharmType = modSettings.ShowSettingFromFIle("BillingSettings/DefaultPharmacyType")
  $HiCappingVar = New Collection

  modGeneralMain.SetEncIDPrefix(txtencid)

End

Public Sub Form_Activate()

  If Not txtencid.Text Then
    BlankAll()
    txtencid.SetFocus
  Else If txtencid.Text = modBasic.$EncIdPrefix Then
    txtencid.SetFocus
  Endif

End

Private Sub BlankAll()

  BlankForEntry()
  txtencid.Text = ""
  txtpatientname.Text = ""
  txtgender.Text = ""
  txtpatlocation.Text = ""

End

Public Sub Form_Resize()

  modGeneralMain.ShowSelectedFormMenu(Me)

End

Public Sub Form_Close()

  CloseRightWeb()
  If txtencid.Text Then
    modPatientSub.ReleaseLockEncounter(Trim(txtencid.Text), modHelpVariable.$LogInCategory)
  Endif

  hPatient.Close

  modGeneralMain.RecordFormExit(Me)

End

Private Sub CloseRightWeb()

  Select modBasic.$RightPanelURL
    Case "https://imis.hib.gov.np/", "{HI_IMIS_Page}"
      Try modGeneralMain.$RightAdView.ExecJavascript("document.getElementById('btnCancel').click();")
    Case "https://openimis.ssf.gov.np/", "{SSF_IMIS_Page}"
      Try modGeneralMain.$RightAdView.ExecJavascript("document.getElementById('btnCancel').click();")
  End Select

End

Private Function GetPharmTarget(sRoute As String) As String

  Dim xtarg As String

  Select sRoute
    Case "msurg"
      xtarg = modBasic.$BillTargetSurgical
    Case "suture"
      xtarg = modBasic.$BillTargetSutures
    Case "ortho"
      xtarg = modBasic.$BillTargetOrthopedics
    Case "extra"
      xtarg = modBasic.$BillTargetExtras
    Case Else
      xtarg = modBasic.$BillTargetMedicine
  End Select

  Return xtarg

End

Public Sub mnusearch_Click()

  txtencid.Text = PatSearch("Encounter")

End

Public Sub mnuscanimage_Click()

  Dim hForm As FmScanForm

  If txtencid.Text Then
    hForm = New FmScanForm(Trim(txtencid.Text), "Scanned Images", "")
    hForm.ShowModal
  Endif

End

Public Sub mnucamera_Click()

  modImage.ArchiveScannedMultiImage(Trim(txtencid.Text))

End

Public Sub txtencid_KeyPress()

  If Key.Code = Key.Down Then
    If Not txtencid.Text Then
      txtencid.Text = PatSearch("Encounter")
      txtencid.SetFocus
    Else
      If modBasic.$AutoEncSuffix = "Yes" Then
        txtencid.Text = txtencid.Text & modBasic.$HospCode
      Endif
    Endif
  Else
    modGeneralMain.InputUpCaseOnly()
  Endif

End

Public Sub Form_KeyRelease()

  Dim CPayForm As GetQRSCanPay
  Dim xtraceid As String

  If Key.Code = Key["O"] And If Key.Control Then
    btnwebcam_Click()
  Else If Key.Code = Key["E"] And If Key.Control Then
    tlbtnpayment_Click()
  Else If Key.Code = Key["F"] And If Key.Control Then
    txtencid.Text = GetEncid()
  Else If Key.Code = Key["R"] And If Key.Control Then
    btnconsult_Click()

  Else If Key.Code = Key.F5 Then
    TabStrip1.Index = 0
    cmbtype.SetFocus
  Else If Key.Code = Key.F6 Then
    TabStrip1.Index = 1
    cmbroute.SetFocus
  Else If Key.Code = Key.F7 Then
    TabStrip1.Index = 2

  Else If Key.Code = Key.F12 Then
    If txtencid.Text Then
      If txtpatientname.Text Then

        xtraceid = ""
        If $AdvPayment = "Advance" Then
          If $F12Lock = False Then
            $F12Lock = True
            CPayForm = New GetQRSCanPay(Trim(txtencid.Text), hPatient.$billtype, cmbledgerac.Text, Trim(txtreference.Text), $sTatus, hPatient.$LockToComp)
            xtraceid = CPayForm.GetTransactionDone()
            If xtraceid Then
              hPatient.$AdvTraceID = xtraceid
              GetF12KeyPress()
              $F12Lock = False
            Else
              ClearQRCodeExt()
              $F12Lock = False
            Endif
          Endif
        Else
          GetF12KeyPress()
        Endif

      Endif
    Endif

  Else
    modGeneralmain.GoToNextControlTab()
  Endif

End

Public Sub mnusaveprint_Click()

  Dim CPayForm As GetQRSCanPay
  Dim xtraceid As String

  If txtencid.Text Then
    If txtpatientname.Text Then

      xtraceid = ""
      If $AdvPayment = "Advance" Then
        If $F12Lock = False Then
          $F12Lock = True
          CPayForm = New GetQRSCanPay(Trim(txtencid.Text), hPatient.$billtype, cmbledgerac.Text, Trim(txtreference.Text), $sTatus, hPatient.$LockToComp)
          xtraceid = CPayForm.GetTransactionDone()
          If xtraceid Then
            hPatient.$AdvTraceID = xtraceid
            GetF12KeyPress()
            $F12Lock = False
          Else
            ClearQRCodeExt()
            $F12Lock = False
          Endif
        Endif
      Else
        GetF12KeyPress()
      Endif

    Endif
  Endif

End

Private Sub GetF12KeyPress()

  Dim xline As String
  Dim hForm As FmMiniCalc
  Dim hForm1 As FmCalcSource

  Dim xtotamt As Float
  Dim xinvlst As String[]
  Dim xinvno As String

  If $xFinClear = True Then
  Else
    SaveGridData()
    PharmacySave()
    Wait

    If ShowBilling() = True Then
      If hPatient.Enabled = True Then
        hPatient.$ACLedger = cmbledgerac.Text
        hPatient.$ACReference = Trim(txtreference.Text)
        hPatient.DirectCashBilling()
        Wait
        RefresgOldData()

        xinvlst = New String[]
        xtotamt = 0
        xinvlst = hPatient.GetInvoiceList()
        xtotamt = hPatient.GetBillTotal()
        $MiniCalc = hPatient.$DisplayMiniCalc
        If cmbdisctype.Text = modBasic.$SSFAccident Or If cmbdisctype.Text = modBasic.$SSFMedical Or If cmbdisctype.Text = modBasic.$SSFCritical Then
          If modBasic.$SSFBookLock = "Enable" Then
            For Each xinvno In xinvlst
              GetSSFBookingLock(xinvno)
            Next
          Endif

        Else If cmbdisctype.Text = modBasic.$HIPackage Or If cmbdisctype.Text = modBasic.$HIPackageER Then
          UploadHIClaimAuto()

        Endif
        If modBasic.$BillCashSource = "Enable" Then
          If xtotamt Then
            hForm1 = New FmCalcSource(Trim(txtencid.Text), xinvlst, xtotamt)
            hForm1.ShowModal
            hPatient.GetBillingFormBlank()
          Endif
        Else
          If $MiniCalc = "BlankForm" Then
            hPatient.GetBillingFormBlank()
          Else If $MiniCalc = "Calculator" Then
            hForm = New FmMiniCalc(xtotamt)
            hForm.ShowModal
          Else If $MiniCalc = "InvoiceInfo" Then
            xline = "<b>EncID:</b> " & Trim(txtencid.Text) & "<br>"
            xline = xline & "<b>Name:</b> " & txtpatientname.Text & "<br>"
            xline = xline & "<b>Invoice:</b> " & xinvlst.Join("; ") & "<br>"
            xline = xline & "<b>RecvAMT:</b> " & modReportVar.GetLocaleNumberFormat(xtotamt, gb.Currency)
            If Message.Question(xline, ("Blank"), ("Close")) = 1 Then
              hPatient.GetBillingFormBlank()
            Endif
          Endif
        Endif

      Else
        RefresgOldData()
      Endif
    Else
      RefresgOldData()
    Endif

  Endif

End

Private Sub GetSSFBookingLock(sInvoice As String)

  Dim aForm As CssfAPIBooking
  Dim xmsg As String

  Dim res As Result
  Dim invType As String
  Dim sTable As String

  invType = modBillLock.GetInvoiceFormatNo(sInvoice)
  If invType = "Invoice" Then
    sTable = "tblpatbilldetail"
  Else If invType = "Receipt" Then
    sTable = "tbltempbilldetail"
  Endif

  If cmbdisctype.Text = modBasic.$SSFAccident Or If cmbdisctype.Text = modBasic.$SSFMedical Or If cmbdisctype.Text = modBasic.$SSFCritical Then
    res = modDatabase.$myConn.Exec(Subst("select fldencounterval,fldbillno,fldchequeno,flduserid,flditemamt from &1", sTable) & " where fldbillno=&1 and fldencounterval=&2 and fldbankname in(select fldacledger from tbldiscount where (fldreference=&3 or fldreference=&4 or fldreference=&5))", sInvoice, Trim(txtencid.Text), "Accident SSF", "Medical SSF", "Critical SSF")
    If res.Available And If res["flditemamt"] Then

      Inc Application.Busy
      aForm = New CssfAPIBooking($xNHISCode, Trim(txtencid.Text), res["fldchequeno"], sInvoice, res["flditemamt"])
      Dec Application.Busy
      xmsg = aForm.GetAPIErrorOutput()
      If xmsg Then
        $MiniCalc = ""
        Message.Warning(xmsg, "OK")
      Endif

    Endif
  Endif

End

Public Sub mnussfBooking_Click()

  Dim res As Result
  Dim xinvlst As String[]
  Dim xinvno As String
  Dim xdata As String[]

  xdata = New String[]
  res = modDatabase.$myConn.Exec("select fldbillno,flduserid,flditemamt from tblpatbilldetail where fldencounterval=&1 and fldbankname in(select fldacledger from tbldiscount where (fldreference=&2 or fldreference=&3)) UNION ALL select fldbillno,flduserid,flditemamt from tbltempbilldetail where fldencounterval=&1 and fldbankname in(select fldacledger from tbldiscount where (fldreference=&2 or fldreference=&3 or fldreference=&4))", Trim(txtencid.Text), "Accident SSF", "Medical SSF", "Critical SSF")
  If res.Available Then
    For Each res
      xdata.Add(res["fldbillno"] & "@" & res["flduserid"] & "@" & CStr(res["flditemamt"]))
    Next
  Endif
  xinvlst = GridTriColumn("SSF Booking", xdata)
  If xinvlst And If xinvlst.Count Then
    For Each xinvno In xinvlst
      GetSSFBookingLock(xinvno)
    Next
  Endif

End

Public Sub btnshow_GotFocus()

  btnshow_Click()

End

Public Sub btnshow_Click()

  Dim res As Result
  Dim resx As Result
  Dim xbilltype As String
  Dim xledger As String
  Dim xlock As Boolean
  Dim xcredit As Float
  Dim frmshow As Boolean
  Dim xlstenc As String

  If Not txtencid.Text Then Return
  If modBasic.$EncIdPrefix And If txtencid.Text = modBasic.$EncIdPrefix Then
    txtencid.SetFocus
    Return
  Endif

  ' If modPatientSub.LockEncounterDesk(Trim(txtencid.Text)) = False Then
  '   TabStrip1.Enabled = False
  '   Panel2.Enabled = False
  '   txtencid.Text = ""
  '   Balloon.Warning(("Encounter Locked"), btnshow)
  '   Balloon.Delay = modBasic.$BalloonDelay
  '   txtencid.SetFocus
  ' Endif

  If txtencid.Text Then
    frmshow = True
    Me.Title = "ENC: " & txtencid.Text
    IniateCategoryArray()
    If txtencid.Text = modBasic.$EncIdPrefix Then
    Else
      modSettings.SaveValuesToLog("LastValue/Encounter", Trim(txtencid.Text))
    Endif

    hPatient.$encid = Trim(txtencid.Text)
    hPatient.$billtype = "CashBilling"
    If ShowBilling() = False Then
      hPatient.Enabled = False
    Endif

    res = modDatabase.$myConn.Exec("select fldpatientval from tblencounter where fldencounterval=&1", Trim(txtencid.Text))
    If res.Available = False Then
      modLinkDB.CheckEncDataRemote(Trim(txtencid.Text))
      txtencid.SetFocus
    Else
      modRepository.$RepoDataStatus = False
      txtpatientname.Text = modPatient.GetPatientNameByEnc(Trim(txtencid.Text))
      If txtpatientname.Text Then
        txtgender.Text = modPatient.GetPatientAgeString(Trim(txtencid.Text), Now()) & "/" & Left(modPatient.GetPatientSex(Trim(txtencid.Text)), 1)

        $PatientNum = modPatient.GetPatientNoByEnc(Trim(txtencid.Text))
        xYear = DateDiff(modPatient.GetPatientBirthDay(Trim(txtencid.Text)), Now(), gb.Year)
        $sTatus = modPatient.CurrentAdmissionStatus(Trim(txtencid.Text))
        txtpatlocation.Text = modPatient.GetLocationSetting(Trim(txtencid.Text), $sTatus)
        $xFinClear = modNonMedical.GetFinanceClearance(Trim(txtencid.Text))
        lblstatus.Text = ShowCurrStatus($sTatus)

        $xNHISCode = modPatient.GetPatientExtCOdebyEnc(Trim(txtencid.Text))
        $DiscPackage = modNonMedical.DefaultBillingScheme(Trim(txtencid.Text), modBasic.$compID)
        If Not cmbdisctype.List.Exist($DiscPackage) Then
          cmbdisctype.Add($DiscPackage)
        Endif
        cmbdisctype.Text = $DiscPackage
        If modBasic.$BillAlterPackage = "Yes" Then
          cmbdisctype.Enabled = True
        Else If modBasic.$BillAlterPackage = "Partial" Then
          cmbdisctype.Enabled = True
        Else
          cmbdisctype.Enabled = False
        Endif
        xlock = False
        resx = modDatabase.$myConn.Exec("select fldmode,fldbillingmode,fldacledger,fldbilltype,fldreference,fldlimit from tbldiscount where fldtype=&1", $DiscPackage)
        If resx.Available Then
          ''billingmode
          If resx["fldbillingmode"] Then
            cmbmode.Text = resx["fldbillingmode"]
            If modBasic.$BillFixBillMode = "Yes" Then
              cmbmode.Enabled = False
            Endif
          Else
            cmbmode.Enabled = True
            cmbmode.Text = modBasic.$BillDefaultMode
          Endif
          ''claim code button
          If resx["fldreference"] Then
            If resx["fldreference"] = "Staff List" Then
              txtreference.ReadOnly = False
            Else
              If resx["fldreference"] = "Claim Code" Then
                txtreference.Text = modClaim.GetClaimCidePatient(Trim(txtencid.Text))
                If txtreference.Text Then
                  txtreference.Tag = modClaim.GetHIClaimState(txtreference.Text)
                  If txtreference.Tag = "Consultation" Or If txtreference.Tag = "Patient Ward" Then
                    GetHImedicineCappingVar()
                  Endif
                Endif
              Else If resx["fldreference"] = "Accident SSF" Then
                txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "Accident SSF")
              Else If resx["fldreference"] = "Critical SSF" Then
                txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "Critical SSF")
              Else If resx["fldreference"] = "Medical SSF" Then
                txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "Medical SSF")
              Endif
              If txtreference.Text Then
                txtreference.ReadOnly = True
              Else
                frmshow = False
              Endif
            Endif
          Endif
          ''ledger A/C
          xledger = resx["fldacledger"]
          If xledger Then
            cmbledgerac.Text = xledger
            cmbledgerac.Enabled = False
          Else
            cmbledgerac.Enabled = True
          Endif
          ''BillType
          xbilltype = resx["fldbilltype"]
          If xbilltype Then
            xlock = True
          Endif
          ''discount
          If resx["fldmode"] = "Lock Discount" Then
            txtdisc.ReadOnly = False
          Endif
          ''limit
          If resx["fldlimit"] = "PatientCreditAMT" Then
            lbllimit.Text = "Crdt Limit"
            txtcreditlimit.Value = modNonMedical.ShowCreditLimitEnc(Trim(txtencid.Text))
          Else If resx["fldlimit"] = "PatientDiscount" Then
            lbllimit.Text = "Disc Limit"
            txtcreditlimit.Value = modNonMedical.GetPatCharityLimit(Trim(txtencid.Text))
          Endif
        Endif
        If Not xbilltype Then
          If cmbledgerac.Text Then
            xbilltype = modNonMedical.GetDefaultACBillType(cmbledgerac.Text)
          Endif
        Endif

        If $xFinClear = True Then
          frmshow = False
        Endif

        If xbilltype Then
          hPatient.SetDefaultModeCashCredit(xbilltype, xlock)
        Else
          hPatient.SetDefaultModeCashCredit(modBasic.$BillFixBilling, xlock)
        Endif
        hPatient.$PatStatus = $sTatus

        If xledger Then
          cmbledgerac.Enabled = False
        Endif
        If $sTatus = "Admitted" Then
          If modBasic.$BillLockAdmitted = "Yes" Then
            If hPatient Then
              hPatient.Enabled = False
            Endif
          Endif
        Else
          If hPatient Then
            hPatient.ShowDepositButton()
          Endif
        Endif
        GetCashModList()
        ShowOldEntry()
        ShowNewEntry()
        FillDosingGrid()
        LockBillingOption()
        SHowDiagnosis()

        BlankDosingBox()
        BlankForEntry()
        cmbroute.Text = ""
        txtencid.ReadOnly = True
        modImage.ShowPhotoSplash("Patient", $PatientNum)
        AutoSyncRepository($PatientNum)
        modPatientSub.PopUpPatientForm(Trim(txtencid.Text), Me.Tag)
        If modBasic.$BillWarnCredits = "Yes" Then
          xlstenc = modPatient.GetSecondLastEncidPatient(Trim(txtencid.Text))
          xcredit = modNonMedical.GetTotalCreditInvoice(modDatabase.$myConn, xlstenc) - modNonMedical.GetDueClearPaidAmtbyPatient(modDatabase.$myConn, xlstenc)
          If xcredit Then
            Message.Warning(("Credit pending from last visit is ") & xcredit, "OK")
            txtpatientname.SetFocus
          Endif
        Endif
        If $xFinClear = True Then
          Balloon.Info(("Account Locked"), btnshow)
          Balloon.Delay = modBasic.$BalloonDelay
        Endif

        ' ' ShowCashCreditMode() ''not required

      Else
        frmshow = False
        Balloon.Warning(("Encounter ID not found"), btnshow)
        Balloon.Delay = modBasic.$BalloonDelay
      Endif
    Endif
  Endif

  If frmshow = True Then
    TabStrip1.Enabled = True
    Panel2.Enabled = True
    If cmbledgerac.Text Then
      cmbtype.SetFocus
    Else
      cmbledgerac.SetFocus
    Endif
  Else If frmshow = False Then
    TabStrip1.Enabled = False
    Panel2.Enabled = False
    txtencid.SetFocus
  Endif

End

Private Sub ShowBillingParam(sPack As String)

  Dim resx As Result
  Dim xbilltype As String
  Dim xledger As String
  Dim xlock As Boolean

  If sPack Then
    cmbmode.Text = ""
    BlankForEntry()
    txtreference.ReadOnly = False
    txtreference.Text = ""
    txtreference.Tag = ""
    cmbmode.Enabled = True
    cmbledgerac.Enabled = True
    xlock = False
    resx = modDatabase.$myConn.Exec("select fldmode,fldbillingmode,fldacledger,fldbilltype,fldreference,fldlimit from tbldiscount where fldtype=&1", sPack)
    If resx.Available Then
      ''billingmode
      If resx["fldbillingmode"] Then
        cmbmode.Text = resx["fldbillingmode"]
        If modBasic.$BillFixBillMode = "Yes" Then
          cmbmode.Enabled = False
        Endif
      Else
        cmbmode.Enabled = True
        cmbmode.Text = modBasic.$BillDefaultMode
      Endif
      ''claim code button
      If resx["fldreference"] Then
        If resx["fldreference"] = "Staff List" Then
          txtreference.ReadOnly = False
        Else
          If resx["fldreference"] = "Claim Code" Then
            txtreference.Text = modClaim.GetClaimCidePatient(Trim(txtencid.Text))
            If txtreference.Text Then
              txtreference.Tag = modClaim.GetHIClaimState(txtreference.Text)
              If txtreference.Tag = "Consultation" Or If txtreference.Tag = "Patient Ward" Then
                GetHImedicineCappingVar()
              Endif
            Endif
          Else If resx["fldreference"] = "Accident SSF" Then
            txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "Accident SSF")
          Else If resx["fldreference"] = "Critical SSF" Then
            txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "Critical SSF")
          Else If resx["fldreference"] = "Medical SSF" Then
            txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "Medical SSF")
          Endif
          If txtreference.Text Then
            txtreference.ReadOnly = True
          Endif
        Endif
      Endif
      ''ledger A/C
      xledger = resx["fldacledger"]
      If xledger Then
        cmbledgerac.Text = xledger
        cmbledgerac.Enabled = False
      Else
        cmbledgerac.Enabled = True
      Endif
      ''BillType
      xbilltype = resx["fldbilltype"]
      If xbilltype Then
        xlock = True
      Endif
      ''discount
      If resx["fldmode"] = "Lock Discount" Then
        txtdisc.ReadOnly = False
      Endif
      ''limit
      If resx["fldlimit"] = "PatientCreditAMT" Then
        lbllimit.Text = "Crdt Limit"
        txtcreditlimit.Value = modNonMedical.ShowCreditLimitEnc(Trim(txtencid.Text))
      Else If resx["fldlimit"] = "PatientDiscount" Then
        lbllimit.Text = "Disc Limit"
        txtcreditlimit.Value = modNonMedical.GetPatCharityLimit(Trim(txtencid.Text))
      Endif
    Endif
    If Not xbilltype Then
      If cmbledgerac.Text Then
        xbilltype = modNonMedical.GetDefaultACBillType(cmbledgerac.Text)
      Endif
    Endif

    If xbilltype Then
      hPatient.SetDefaultModeCashCredit(xbilltype, xlock)
    Else
      hPatient.SetDefaultModeCashCredit(modBasic.$BillFixBilling, xlock)
    Endif

  Endif

End

Private Sub AutoSyncRepository(patNo As String)

  If modBasic.$PatRepoAutoSync = "Enable" Then
    If modBasic.$PatRepoDBase = "mysql" Then
      modScript.GetPatRepositorySync(patNo)
    Endif
  Endif

End

Public Sub cmbdisctype_Click()

  IniateCategoryArray()
  IniateCategoryPharmArray()
  ShowBillingParam(cmbdisctype.Text)

End

Public Sub cmbledgerac_Change()

  hPatient.$ACLedger = cmbledgerac.Text

End

Public Sub txtreference_Change()

  hPatient.$ACReference = Trim(txtreference.Text)

End

Public Sub cmbledgerac_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbledgerac)
  modFillContainer.RestrictComboToContent(cmbledgerac)

End

Public Sub txtreference_LostFocus()

  cmbtype.SetFocus

End

Private Function ShowBilling() As Boolean

  Dim xx As Boolean

  If $BillingOption = "No" Then
    xx = False
  Else
    xx = True
  Endif
  Return xx

End

Private Sub LockBillingOption()

  If $BillingOption = "All" Then
  Else
    If modBasic.$BillDischargeOption = "Mixed" Then
    Else
      Select $sTatus
        Case "Discharged", "LAMA", "Death", "Refer", "Absconder"
          hPatient.Enabled = False
      End Select
    Endif
  Endif

End

Private Function CheckDepositBilling(xamt As Float) As Boolean

  Dim allow As Boolean
  Dim expenseamt As Float
  Dim paidamt As Float

  If modBasic.$BillLockIPPrintInvoice = "Both" And If $sTatus = "Admitted" And If hPatient.GetCashCreditMode() = "Cash" Then
    If modBasic.$BillLowDeposit Then
      expenseamt = xamt
      paidamt = modNonMedical.GetPatientDeposit(modDatabase.$myConn, Trim(txtencid.Text))

      If modBasic.$BillLowDeposit = "Warn" Then
        If expenseamt > paidamt Then
          allow = True
          Message.Warning(("Deposit lower than payments"), ("OK"))
        Else If expenseamt > 0.85 * paidamt Then
          allow = True
          Balloon.Warning(("85% of Deposit used. Ask for refill"), txtqty)
          Balloon.Delay = modBasic.$BalloonDelay
        Else
          allow = True
        Endif
      Else If modBasic.$BillLowDeposit = "Disable" Then
        If expenseamt > paidamt Then
          allow = False
          Message.Warning(("Deposit lower than payments"), ("OK"))
        Else If expenseamt > 0.85 * paidamt Then
          allow = True
          Balloon.Warning(("85% of Deposit used. Ask for refill"), txtqty)
          Balloon.Delay = modBasic.$BalloonDelay
        Else
          allow = True
        Endif
      Else
        allow = True
      Endif

    Else
      allow = True
    Endif
  Else
    allow = True
  Endif

  Return allow

End

Private Sub BlankForEntry()

  If $DefaultItemType Then
    If $DefaultItemType = "No Change" Then
    Else
      cmbtype.Text = $DefaultItemType
      chksave.Value = False
    Endif
  Else
    cmbtype.Text = ""
  Endif
  cmbitem.Text = ""
  txtax.Value = 0
  txtdisc.Value = 0
  txtotal.Value = 0
  txtqty.Value = 1
  txtrate.Value = 0
  txtlastsaledate.Text = ""
  txtlastsaledate.Foreground = Color.Default

End

Private Sub BlankDosingBox()

  cmbmedicine.Text = ""
  cmbfreq.Text = ""
  txtdose.Value = 0
  txtday.Value = 0
  lblqty.Text = ""
  txtqtymed.Value = 0
  txtqtymed.Tag = ""
  txtdose.Enabled = True
  cmbfreq.Enabled = True
  txtday.Enabled = True
  txtinventory.Value = 0
  txtitemrate.Value = 0
  $HideDos = False
  txtitemrate.Background = Color.Default
  txtinventory.Background = Color.Default
  txtlastdispdate.Text = ""
  txtlastdispdate.Foreground = Color.Default
  txttotalqty.Value = 0

End

Public Sub tlbtnpayment_Click()

  If txtencid.Text Then
    modNonMedical.CurrentPayStatusMsg(Trim(txtencid.Text))
  Endif

End

Public Sub btnconsult_Click()

  Dim xMedUser As String[]

  xMedUser = MedicalSelectedValue(("Select Referral User"), modBasic.$ReferUserList)
  If xMedUser And If xMedUser.Count Then
    btnconsult.Tag = xMedUser[0]
    btnconsult.Text = xMedUser[1]
  Else
    btnconsult.Tag = ""
    btnconsult.Text = ""
  Endif

End

Public Sub btnconsult_Change()

  If btnconsult.Text = "" Then
    btnconsult.Tag = ""
  Endif

End

''=============================================== CASHIER ======================================
''------------------ Array List for Items ------------------
Private Sub IniateCategoryArray()

  $TestArray = New String[]
  $ServiceArray = New String[]
  $ProcedureArray = New String[]
  $EquipmentArray = New String[]
  $RadioArray = New String[]
  $OthersArray = New String[]
  $AllItemArray = New String[]

End

Private Function GetCashSectionQuery(sType As String) As String

  Dim xcateg As String

  If sType = "Test" Then
    If modBasic.$BillTestSection Then
      If modBasic.$BillTestSection = "%" Then
        xcateg = ""
      Else
        xcateg = " and fldreport like &5"
      Endif
    Else
      xcateg = ""
    Endif

  Else If sType = "Service" Then
    If modBasic.$BillServiceSection Then
      If modBasic.$BillServiceSection = "%" Then
        xcateg = ""
      Else
        xcateg = " and fldreport like &5"
      Endif
    Else
      xcateg = ""
    Endif

  Else If sType = "Procedure" Then
    If modBasic.$BillProcSection Then
      If modBasic.$BillProcSection = "%" Then
        xcateg = ""
      Else
        xcateg = " and fldreport like &5"
      Endif
    Else
      xcateg = ""
    Endif

  Else If sType = "Equipment" Then
    If modBasic.$BillEquipSection Then
      If modBasic.$BillEquipSection = "%" Then
        xcateg = ""
      Else
        xcateg = " and fldreport like &5"
      Endif
    Else
      xcateg = ""
    Endif

  Else If sType = "Radio" Then
    If modBasic.$BillRadioSection Then
      If modBasic.$BillRadioSection = "%" Then
        xcateg = ""
      Else
        xcateg = " and fldreport like &5"
      Endif
    Else
      xcateg = ""
    Endif

  Else If sType = "Others" Then
    If modBasic.$BillOtherSection Then
      If modBasic.$BillOtherSection = "%" Then
        xcateg = ""
      Else
        xcateg = " and fldreport like &5"
      Endif
    Else
      xcateg = ""
    Endif

  Else If sType = "All" Then
    If modBasic.$BillAllItemSection Then
      If modBasic.$BillAllItemSection = "%" Then
        xcateg = ""
      Else
        xcateg = " and fldreport like &5"
      Endif
    Else
      xcateg = ""
    Endif

  Endif
  Return xcateg

End

Private Function GetCashSectionValue(sType As String) As String

  Dim xcateg As String

  If sType = "Test" Then
    If modBasic.$BillTestSection Then
      xcateg = modBasic.$BillTestSection
    Else
      xcateg = "%"
    Endif

  Else If sType = "Service" Then
    If modBasic.$BillServiceSection Then
      xcateg = modBasic.$BillServiceSection
    Else
      xcateg = "%"
    Endif

  Else If sType = "Procedure" Then
    If modBasic.$BillProcSection Then
      xcateg = modBasic.$BillProcSection
    Else
      xcateg = "%"
    Endif

  Else If sType = "Equipment" Then
    If modBasic.$BillEquipSection Then
      xcateg = modBasic.$BillEquipSection
    Else
      xcateg = "%"
    Endif

  Else If sType = "Radio" Then
    If modBasic.$BillRadioSection Then
      xcateg = modBasic.$BillRadioSection
    Else
      xcateg = "%"
    Endif

  Else If sType = "Others" Then
    If modBasic.$BillOtherSection Then
      xcateg = modBasic.$BillOtherSection
    Else
      xcateg = "%"
    Endif

  Else If sType = "All" Then
    If modBasic.$BillAllItemSection Then
      xcateg = modBasic.$BillAllItemSection
    Else
      xcateg = "%"
    Endif

  Endif
  Return xcateg

End

Private Function GetCategoryArray(sType As String) As String[]

  Dim xarry As String[]

  If sType = "Test" Then
    If Not $TestArray.Count Then
      $TestArray.Insert(GetCashierArray(sType))
    Endif
    xarry = $TestArray

  Else If sType = "Service" Then
    If Not $ServiceArray.Count Then
      $ServiceArray.Insert(GetCashierArray(sType))
    Endif
    xarry = $ServiceArray

  Else If sType = "Procedure" Then
    If Not $ProcedureArray.Count Then
      $ProcedureArray.Insert(GetCashierArray(sType))
    Endif
    xarry = $ProcedureArray

  Else If sType = "Equipment" Then
    If Not $EquipmentArray.Count Then
      $EquipmentArray.Insert(GetCashierArray(sType))
    Endif
    xarry = $EquipmentArray

  Else If sType = "Radio" Then
    If Not $RadioArray.Count Then
      $RadioArray.Insert(GetCashierArray(sType))
    Endif
    xarry = $RadioArray

  Else If sType = "Others" Then
    If Not $OthersArray.Count Then
      $OthersArray.Insert(GetCashierArray(sType))
    Endif
    xarry = $OthersArray

  Else If sType = "All" Then
    If Not $AllItemArray.Count Then
      $AllItemArray.Insert(GetCashierArray(sType))
    Endif
    xarry = $AllItemArray

  Endif

  Return xarry

End

Private Function GetCashierArray(sType As String) As String[]

  Dim res As Result
  Dim xdata As String[]
  Dim xcode As String

  If sType = "All" Then
    res = modDatabase.$myConn.Exec("select flditemname,fldcode,flditemcost,flditemunit from tblservicecost where flditemtype like &1 and (fldgroup=&2 or fldgroup=&4) and fldstatus=&3" & GetCashSectionQuery(sType) & " ORDER BY flditemname ASC", "%", cmbmode.Text, "Active", "%", GetCashSectionValue(sType))
  Else
    res = modDatabase.$myConn.Exec("select flditemname,fldcode,flditemcost,flditemunit from tblservicecost where flditemtype like &1 and (fldgroup=&2 or fldgroup=&4) and fldstatus=&3" & GetCashSectionQuery(sType) & " ORDER BY flditemname ASC", modNonMedical.GetBillItemCategoryFromCombo(sType), cmbmode.Text, "Active", "%", GetCashSectionValue(sType))
  Endif
  xdata = New String[]
  If res.Available Then
    For Each res
      If res["fldcode"] Then
        xcode = res["fldcode"]
      Else
        xcode = ""
      Endif
      If res["flditemunit"] Then
        xdata.Add(res["flditemname"] & "|" & xcode & "|" & CStr(modNonMedical.GetCurrConvertAmount(res["flditemcost"], res["flditemunit"])))
      Else
        xdata.Add(res["flditemname"] & "|" & xcode & "|" & CStr(res["flditemcost"]))
      Endif
    Next
  Endif
  Return xdata

End

Public Sub cmbmode_Change()

  IniateCategoryArray()
  IniateCategoryPharmArray()

End

''---------------------------------- END ---------------------------------------------
Private Sub GetCashModList()

  If chkall.Value = True Then
    hPatient.$LockToComp = False
  Else
    hPatient.$LockToComp = True
  Endif

End

Public Sub chkall_Click()

  modSettings.EnterCheckSetting(chkall, "BillingOption/AllLocations")
  GetCashModList()
  If txtencid.Text Then

    hPatient.ShowBillingDatainBox()

    ShowNewEntry()
    FillDosingGrid()
  Endif

End

Public Sub cmbdisctype_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbdisctype)
  modFillContainer.RestrictComboToContent(cmbdisctype)

End

Public Sub cmbdisctype_LostFocus()

  modFillContainer.RestrictCombo(cmbdisctype)

End

Public Sub cmbmode_Click()

  modSettings.SaveSettingsToFile("Invoice/CashBilling_Mode", cmbmode.Text)
  cmbtype.SetFocus

End

Public Sub cmbmode_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbmode)
  modFillContainer.RestrictComboToContent(cmbmode)

End

Public Sub cmbmode_LostFocus()

  modFillContainer.RestrictCombo(cmbmode)

End

Public Sub btnwebcam_Click()

  txtencid.Text = modDevice.ChooseBarCodeSource()
  txtencid.SetFocus
  txtencid.Pos = Len(txtencid.Text)

End

Public Sub btnipnum_Click()

  Dim res As Result
  Dim xx As String

  xx = InputBox("Provide Inpatient (IP) Number of Patient", "Encounter", "")
  If xx Then
    res = modDatabase.$myConn.Exec("select fldencounterval from tblencounter where fldadmitid=&1 ORDER BY fldregdate", xx)
    If res.Available Then
      res.MoveLast
      txtencid.Text = res["fldencounterval"]
      txtencid.SetFocus
    Else
      Message.Info("IP Number Not Registered", "OK")
    Endif
  Endif

End

Public Sub cmbtype_Click()

  chksave.Value = False
  cmbitem.Clear
  cmbitem.Text = ""

End

Public Sub txtdisc_Change()

  If txtdisc.Value > 100 Then
    txtdisc.Value = 0
  Endif

End

Public Sub txtax_Change()

  If txtax.Value > 100 Then
    txtax.Value = 0
  Endif

End

Public Sub ShowCashCreditMode()

  Dim xType As String
  Dim xList As String[]

  xType = hPatient.GetCashCreditMode()
  If xType = "Cash" Then
    lcdmode.Text = "CASH"
    lcdmode.Foreground = Color.Red
    xList = modBasic.$ACLedgerListCash
  Else If xType = "Credit" Then
    lcdmode.Text = "CREDIT"
    lcdmode.Foreground = Color.Blue
    xList = modBasic.$ACLedgerListCredit
  Endif
  If xList Then
    cmbledgerac.Enabled = True
    cmbledgerac.List = xList
  Endif

End

Public Sub cmbtype_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbtype)
  modFillContainer.RestrictComboToContent(cmbtype)

End

Public Sub cmbitem_GotFocus()

  Dim res As Result
  Dim xdata As String[]
  Dim xcode As String

  If Not cmbtype.Text Then
    cmbtype.SetFocus

  Else If cmbtype.Text Then
    If Not cmbitem.Text Then

      If cmbtype.Text = "Group" Then
        xdata = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldgroup) as col from tblservicegroup where flditemname in(select flditemname from tblservicecost where fldstatus=&1 and (fldgroup=&2 or fldgroup=&3))", "Active", cmbmode.Text, "%"))
        If xdata Then
          cmbitem.Text = GridViewNew("Select Cashier Pack", xdata, False, Panel7, Panel4.Height - cmbitem.Top + GridView1.Height)
        Endif
        txtdisc.SetFocus
      Else If cmbtype.Text = "Package" Then
        xdata = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldbillitem) as col from tblservicecost where fldbillitem IS NOT NULL and fldstatus=&1 and (fldgroup=&2 or fldgroup=&3)", "Active", cmbmode.Text, "%"))
        If xdata Then
          cmbitem.Text = GridViewNew("Select Service Package", xdata, False, Panel7, Panel4.Height - cmbitem.Top + GridView1.Height)
        Endif
        txtdisc.SetFocus
      Else
        If modBasic.$AppCacheGridViewData = "No" Then
          xdata = New String[]
          If cmbtype.Text = "All" Then
            res = modDatabase.$myConn.Exec("select flditemname,fldcode,flditemcost,flditemunit from tblservicecost where (fldgroup=&1 or fldgroup=&3) and fldstatus=&2" & GetCashSectionQuery(cmbtype.Text) & " ORDER BY flditemname ASC", cmbmode.Text, "Active", "%", "", GetCashSectionValue(cmbtype.Text))                                                           ''
          Else
            res = modDatabase.$myConn.Exec("select flditemname,fldcode,flditemcost,flditemunit from tblservicecost where flditemtype=&1 and (fldgroup=&2 or fldgroup=&4) and fldstatus=&3" & GetCashSectionQuery(cmbtype.Text) & " ORDER BY flditemname ASC", modNonMedical.GetBillItemCategoryFromCombo(cmbtype.Text), cmbmode.Text, "Active", "%", GetCashSectionValue(cmbtype.Text))                                                           ''
          Endif
          If res.Available Then
            For Each res
              If res["fldcode"] Then
                xcode = res["fldcode"]
              Else
                xcode = ""
              Endif
              If res["flditemunit"] Then
                xdata.Add(res["flditemname"] & "|" & xcode & "|" & CStr(modNonMedical.GetCurrConvertAmount(res["flditemcost"], res["flditemunit"])))
              Else
                xdata.Add(res["flditemname"] & "|" & xcode & "|" & CStr(res["flditemcost"]))
              Endif
            Next
            cmbitem.Text = CashGridList(xdata, Panel7, Panel4.Height - cmbitem.Top + GridView1.Height)
          Endif
        Else
          cmbitem.Text = CashGridList(GetCategoryArray(cmbtype.Text), Panel7, Panel4.Height - cmbitem.Top + GridView1.Height)
        Endif
        txtdisc.SetFocus
      Endif

    Endif
  Endif

End

Public Sub txtdisc_GotFocus()

  Dim xtype As String
  Dim xdate As Date
  Dim xcapday As Integer

  If cmbitem.Text Then

    If cmbtype.Text = "Group" Or If cmbtype.Text = "Package" Then
      If cmbdisctype.Text Then
        txtdisc.Value = modNonMedical.DiscPercentForCategoryValue(Trim(txtencid.Text), cmbdisctype.Text, xtype, cmbitem.Text, cmbmode.Text)
      Endif
      txtax.Value = modNonMedical.ShowTaxValues("%", cmbitem.Text)
    Else

      If modNonMedical.GetControlServCombo(cmbitem.Text) = False Then
        cmbitem.Text = ""
        Balloon.Warning(("Item not listed"), cmbitem)
        Balloon.Delay = modBasic.$BalloonDelay
        cmbtype.SetFocus
      Else
        If cmbtype.Text = "All" Then
          xtype = modNonMedical.GetBillingCategory(cmbitem.Text)
        Else
          xtype = modNonMedical.GetBillItemCategoryFromCombo(cmbtype.Text)
        Endif
        txtrate.Value = modNonMedical.GetCashBillItemCost(cmbitem.Text, xtype)
        lblratemode.Text = modNonMedical.GetBillingTargeDept(cmbitem.Text, xtype)
        If cmbdisctype.Text Then
          txtdisc.Value = modNonMedical.DiscPercentForCategoryValue(Trim(txtencid.Text), cmbdisctype.Text, xtype, cmbitem.Text, cmbmode.Text)
        Endif
        txtax.Value = modNonMedical.ShowTaxValues(xtype, cmbitem.Text)

        xdate = modBillings.CheckLastSalesItemDate(cmbitem.Text, $PatientNum, $xNHISCode, cmbdisctype.Text)
        If xdate Then
          txtlastsaledate.Text = modReportVar.GetDateTimeReport(xdate, gb.MediumDate)
          If DateDiff(xdate, Now(), gb.Month) <= 3 Then
            txtlastsaledate.Foreground = Color.Red
          Endif

          If txtreference.Tag = "Consultation" Or If txtreference.Tag = "Patient Ward" Then
            xcapday = modNonMedical.GetCappingDayFromItemName(cmbitem.Text)
            If xcapday Then
              If DateDiff(xdate, Now(), gb.Day) <= xcapday Then
                Message.Info("Use once in " & CStr(xcapday) & " days.")
                BlankForEntry()
                cmbtype.SetFocus
              Endif
            Endif
          Endif

        Endif

      Endif
    Endif
    txtdisc.SelectAll

  Endif

End

Public Sub txtdisc_LostFocus()

  If cmbitem.Text Then
    If modGridView.GetItemPresentGrid(GridView1, 4, cmbitem.Text) = True Then
      Select modBasic.$BillDuplication
        Case "Inform"
          Balloon.Warning(("Item already punched"), lblratemode)
          Balloon.Delay = modBasic.$BalloonDelay
          txtqty.SetFocus
        Case "Warn"
          Message.Warning("Duplicate Entry", ("OK"))
          txtqty.SetFocus
        Case "Disable"
          Message.Warning("Duplicate Entry not allowed", ("OK"))
          cmbitem.Text = ""
          cmbtype.SetFocus
      End Select
    Endif
  Endif

End

Public Sub txtax_GotFocus()

  txtax.SelectAll

End

Public Sub txtqty_GotFocus()

  Dim xx As Float

  If txtqty.Value Then
    If cmbtype.Text = "Group" Then
    Else If cmbtype.Text = "Package" Then
    Else
      xx = Round(txtrate.Value * txtqty.Value, -2)
      xx = xx * (1 - txtdisc.Value / 100)
      xx = xx * (1 + txtax.Value / 100)
      txtotal.Value = xx
    Endif
  Endif
  txtqty.SelectAll

End

Public Sub txtqty_Change()

  Dim xx As Float

  If modBasic.$BillFractionQty = "Disable" Then
    If Frac(txtqty.Value) Then
      txtqty.Value = Fix(txtqty.Value)
    Endif
  Endif

  If cmbtype.Text = "Group" Then
  Else If cmbtype.Text = "Package" Then
  Else
    xx = Round(txtrate.Value * txtqty.Value, -2)
    xx = xx * (1 - txtdisc.Value / 100)
    xx = xx * (1 + txtax.Value / 100)
    txtotal.Value = xx
  Endif

End

Public Sub txtqty_LostFocus()

  If Not txtqty.Value Then
    txtqty.SetFocus
  Else
    If CheckDepositBilling(txtotal.Value + txttotnew.Value + txttotsaved.Value) = True Then
      chksave.SetFocus
    Else
      BlankForEntry()
      cmbtype.SetFocus
    Endif
  Endif

End

Private Function GetIDBillingItemForGroup(encid As String, sItem As String, sRate As Float, BillingMode As String, sComp As String) As Long

  Dim res As Result
  Dim xx As Long

  res = modDatabase.$myConn.Exec("select fldid from tblpatbilling where fldencounterval=&1 and fldbillingmode=&2 and flditemname=&3 and flditemrate=&4 and fldordcomp=&5 and fldsave=&6 and fldprint=&7 and fldstatus=&8", encid, BillingMode, sItem, sRate, sComp, False, False, "Punched")
  If res.Available Then
    res.MoveLast
    xx = res["fldid"]
  Endif
  Return xx

End

Private Sub InsertCashGroupEntry(aPay As String)

  Dim res As Result
  Dim sPay As String
  Dim sRefer As String
  Dim xid As Long
  Dim xtax As Float
  Dim xdisc As Float

  sRefer = btnconsult.Tag
  If Not cmbdisctype.Text Then
    cmbdisctype.Text = $DiscPackage
  Endif
  res = modDatabase.$myConn.Exec("select flditemname,flditemtype,flditemqty from tblservicegroup where fldgroup=&1 and flditemname in(select flditemname from tblservicecost where fldgroup=&2 or fldgroup=&3)", cmbitem.Text, cmbmode.Text, "%")
  If res.Available Then
    For Each res
      sPay = aPay
      If Not sPay Then
        sPay = modBillings.GetPayableUserSetting(res["flditemtype"], Trim(txtencid.Text))
      Endif
      If Not sRefer Then
        sRefer = modBillings.GetReferralUserSetting(res["flditemtype"], Trim(txtencid.Text))
      Endif
      If txtax.ReadOnly = False Then
        xtax = txtax.Value
      Else
        xtax = modNonMedical.ShowTaxValues(res["flditemtype"], res["flditemname"])
      Endif
      If txtdisc.ReadOnly = False Then
        xdisc = txtdisc.Value
      Else
        xdisc = modNonMedical.DiscPercentForCategoryValue(Trim(txtencid.Text), cmbdisctype.Text, res["flditemtype"], res["flditemname"], cmbmode.Text)
      Endif
      If modBasic.$BillPunchItems = "Yes" Then
        xid = GetIDBillingItemForGroup(Trim(txtencid.Text), res["flditemname"], txtrate.Value, cmbmode.Text, modBasic.$compID)
        If xid Then
          modBillings.UpdateGroupBillQTY(xid, Trim(txtencid.Text), res["flditemname"], txtqty.Value * res["flditemqty"])
        Else
          modBillings.ServiceBillBlank(Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, res["flditemtype"], res["flditemname"], txtqty.Value * res["flditemqty"], xtax, xdisc, "Punched", 0, False, False, sPay, sRefer)
        Endif
      Else
        modBillings.ServiceBillBlank(Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, res["flditemtype"], res["flditemname"], txtqty.Value * res["flditemqty"], xtax, xdisc, "Punched", 0, False, False, sPay, sRefer)
      Endif
    Next
  Endif

End

Private Sub InsertCashPackageEntry(aPay As String)

  Dim res As Result
  Dim sPay As String
  Dim sRefer As String
  Dim xid As Long
  Dim xtype As String
  Dim xtax As Float
  Dim xdisc As Float

  sRefer = btnconsult.Tag
  If Not cmbdisctype.Text Then
    cmbdisctype.Text = $DiscPackage
  Endif
  res = modDatabase.$myConn.Exec("select flditemname,flditemtype from tblservicecost where fldbillitem=&1 and fldstatus=&2 and (fldgroup=&3 or fldgroup=&4)", cmbitem.Text, "Active", cmbmode.Text, "%")
  If res.Available Then
    For Each res
      sPay = aPay
      If Not sPay Then
        sPay = modBillings.GetPayableUserSetting(res["flditemtype"], Trim(txtencid.Text))
      Endif
      If Not sRefer Then
        sRefer = modBillings.GetReferralUserSetting(res["flditemtype"], Trim(txtencid.Text))
      Endif
      xtype = modNonMedical.GetServiceKeyFromCategory(res["flditemtype"])
      If txtax.ReadOnly = False Then
        xtax = txtax.Value
      Else
        xtax = modNonMedical.ShowTaxValues(xtype, res["flditemname"])
      Endif
      If txtdisc.ReadOnly = False Then
        xdisc = txtdisc.Value
      Else
        xdisc = modNonMedical.DiscPercentForCategoryValue(Trim(txtencid.Text), cmbdisctype.Text, xtype, res["flditemname"], cmbmode.Text)
      Endif
      If modBasic.$BillPunchItems = "Yes" Then
        xid = GetIDBillingItemForGroup(Trim(txtencid.Text), res["flditemname"], txtrate.Value, cmbmode.Text, modBasic.$compID)
        If xid Then
          modBillings.UpdateGroupBillQTY(xid, Trim(txtencid.Text), res["flditemname"], txtqty.Value)
        Else
          modBillings.ServiceBillBlank(Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, xtype, res["flditemname"], txtqty.Value, xtax, xdisc, "Punched", 0, False, False, sPay, sRefer)
        Endif
      Else
        modBillings.ServiceBillBlank(Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, xtype, res["flditemname"], txtqty.Value, xtax, xdisc, "Punched", 0, False, False, sPay, sRefer)                          ''
      Endif
    Next
  Endif

End

Private Sub AddEntryToBill()

  Dim sPay As String
  Dim xid As Long
  Dim xtype As String
  Dim sRefer As String

  sRefer = btnconsult.Tag
  If modNonMedical.GetAllowPayableEdit(cmbitem.Text) = True Then
    sPay = MedicalSelectedUser(("Select Payable User"), modBasic.$PayUserList)
  Else
    If $ShowAutoPay = "All" Then
      sPay = MedicalSelectedUser(("Select Payable User"), modBasic.$PayUserList)
    Else If $ShowAutoPay = cmbmode.Text Then
      sPay = MedicalSelectedUser(("Select Payable User"), modBasic.$PayUserList)
    Endif
  Endif

  If Not cmbdisctype.Text Then
    cmbdisctype.Text = $DiscPackage
  Endif

  Inc Application.Busy
  modDatabase.$myConn.Begin
  If cmbtype.Text = "Group" Then
    InsertCashGroupEntry(sPay)

  Else If cmbtype.Text = "Package" Then
    InsertCashPackageEntry(sPay)

  Else If cmbtype.Text = "All" Then
    xtype = modNonMedical.GetServiceComboFromCategory(cmbitem.Text)
    If xtype Then
      If Not sPay Then
        sPay = modBillings.GetPayableUserSetting(xtype, Trim(txtencid.Text))
      Endif
      If Not sRefer Then
        sRefer = modBillings.GetReferralUserSetting(xtype, Trim(txtencid.Text))
      Endif
      If modBasic.$BillPunchItems = "Yes" Then
        xid = GetIDBillingItemForGroup(Trim(txtencid.Text), cmbitem.Text, txtrate.Value, cmbmode.Text, modBasic.$compID)
        If xid Then
          modBillings.UpdateGroupBillQTY(xid, Trim(txtencid.Text), cmbitem.Text, txtqty.Value)
        Else
          modBillings.ServiceBillBlank(Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, xtype, cmbitem.Text, txtqty.Value, txtax.Value, txtdisc.Value, "Punched", 0, False, False, sPay, sRefer)
        Endif
      Else
        modBillings.ServiceBillBlank(Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, xtype, cmbitem.Text, txtqty.Value, txtax.Value, txtdisc.Value, "Punched", 0, False, False, sPay, sRefer)                          ''
      Endif
    Endif

  Else
    If Not sPay Then
      sPay = modBillings.GetPayableUserSetting(cmbtype.Text, Trim(txtencid.Text))
    Endif
    If Not sRefer Then
      sRefer = modBillings.GetReferralUserSetting(cmbtype.Text, Trim(txtencid.Text))
    Endif
    If modBasic.$BillPunchItems = "Yes" Then
      xid = GetIDBillingItemForGroup(Trim(txtencid.Text), cmbitem.Text, txtrate.Value, cmbmode.Text, modBasic.$compID)
      If xid Then
        modBillings.UpdateGroupBillQTY(xid, Trim(txtencid.Text), cmbitem.Text, txtqty.Value)
      Else
        modBillings.ServiceBillBlank(Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, cmbtype.Text, cmbitem.Text, txtqty.Value, txtax.Value, txtdisc.Value, "Punched", 0, False, False, sPay, sRefer)
      Endif
    Else
      modBillings.ServiceBillBlank(Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, cmbtype.Text, cmbitem.Text, txtqty.Value, txtax.Value, txtdisc.Value, "Punched", 0, False, False, sPay, sRefer)                          ''
    Endif
  Endif
  modDatabase.$myConn.Commit
  Dec Application.Busy
  ShowNewEntry()

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

Public Sub chksave_Click()

  If txtencid.Text And If cmbledgerac.Text And If cmbdisctype.Text Then
    If chksave.Value = True Then
      If cmbtype.Text And If cmbitem.Text And If txtqty.Value Then

        If AllowLockCheckPunching() = True Then
          AddEntryToBill()
          BlankForEntry()
          cmbtype.SetFocus()
        Else
          Balloon.Info(("Encounter Locked"), chksave)
          Balloon.Delay = modBasic.$BalloonDelay
        Endif

      Endif
    Endif
  Endif

End

Public Sub chksave_GotFocus()

  chksave.Value = True
  chksave_Click()

End

Private Sub AllowLockCheckPunching() As Boolean

  Dim xallow As Boolean
  Dim dtlast As Date

  If hPatient.GetCashCreditMode() = "Cash" Then
    xallow = True
    If modBasic.$BillAddDiagnosis = "ForceAll" Then
      If txtsearch.Text And If txtcode.Text Then
      Else
        xallow = False
      Endif
    Endif

  Else

    If modBasic.$BillPunchingLock Then
      Select $sTatus
        Case "Admitted"
          xallow = True
        Case "Discharged", "LAMA", "Death", "Refer", "Absconder"
          dtlast = modPatient.GetDischargeDate(Trim(txtencid.Text))
          If DateDiff(dtlast, Now(), gb.Day) > modBasic.$BillPunchingLock Then
            xallow = False
          Else
            xallow = True
          Endif
        Case Else
          dtlast = modPatient.GetRecordDate(Trim(txtencid.Text))
          If DateDiff(dtlast, Now(), gb.Day) > modBasic.$BillPunchingLock Then
            xallow = False
          Else
            xallow = True
          Endif
      End Select
    Else
      xallow = True
    Endif
    If modBasic.$BillAddDiagnosis = "Force" And If txtreference.Text Then
      If txtsearch.Text And If txtcode.Text Then
      Else
        xallow = False
      Endif
    Else If modBasic.$BillAddDiagnosis = "ForceAll" Then
      If txtsearch.Text And If txtcode.Text Then
      Else
        xallow = False
      Endif
    Endif

  Endif
  Return xallow

End

''============================ new entry =============================
Private Sub ExecuteNewQuery()

  Dim sql As String
  Dim xcomp As String

  If chkall.Value Then
    xcomp = "%"
  Else
    xcomp = modBasic.$compID
  Endif

  sql = "select fldid,fldordtime,flditemtype,flditemno,flditemname,flditemrate,flditemqty,flddiscper,fldtaxper,fldditemamt,fldtaxamt,flddiscamt,fldbillingmode,fldsample,fldreason,fldbilltype,flddisctype,fldacledger,fldpayto,fldrefer,fldcashincredit from tblpatbilling where fldencounterval=&1 and fldsave=&2 and fldprint=&3 and fldordcomp like &4 and fldstatus=&5 and flditemqty>&6 ORDER BY fldid DESC"
  $rData = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), False, False, xcomp, "Punched", 0)

End

Private Sub ShowNewEntry()

  Dim xitem As Float
  Dim xx As Float
  Dim disc As Float
  Dim tax As Float
  Dim xCashCrd As Float
  Dim Column As Integer
  Dim fld As ResultField

  ExecuteNewQuery()
  GridView1.Clear
  GridView1.Columns.Count = $rData.Fields.Count
  GridView1.Rows.Count = $rData.Count

  xitem = 0
  tax = 0
  disc = 0
  xx = 0
  xCashCrd = 0
  For Each $rData
    xitem = xitem + $rData["flditemrate"] * $rData["flditemqty"]
    tax = tax + $rData["fldtaxamt"]
    disc = disc + $rData["flddiscamt"]
    xx = xx + $rData["fldditemamt"]
    If $rData["fldbilltype"] = "Cash" Then
      xCashCrd = xCashCrd + $rData["fldditemamt"]
    Else If $rData["fldbilltype"] = "Credit" Then
      If $rData["fldcashincredit"] Then
        xCashCrd = xCashCrd + ($rData["fldcashincredit"] / 100) * $rData["fldditemamt"]
      Endif
    Endif

    Column = 0
    For Each fld In $rData.Fields
      modGeneralMain.GridExplicitDecoration(GridView1, $rData.Index, Column)
      If Column = 1 Then
        GridView1[$rData.Index, Column].Text = modReportVar.GetDateTimeReport($rData["fldordtime"], gb.GeneralDate)
      Else If Column = 18 Then
        GridView1[$rData.Index, Column].Text = modGeneral.GetUserFullName($rData[fld.Name])
      Else If Column = 19 Then
        GridView1[$rData.Index, Column].Text = modGeneral.GetUserFullName($rData[fld.Name])
      Else
        GridView1[$rData.Index, Column].Text = $rData[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  GridView1.Row = 0

  With GridView1
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[1].Text = "DateTime"
    .Columns[4].Text = "Particulars"
    .Columns[5].Text = "Rate"
    .Columns[6].Text = "QTY"
    .Columns[7].Text = "Disc%"
    .Columns[8].Text = "Tax%"
    .Columns[9].Text = "Total"
    .Columns[15].Text = "Mode"
    .Columns[16].Text = "Package"
    .Columns[17].Text = "Account"
    .Columns[18].Text = "Payable"
    .Columns[19].Text = "Referral"
    .Columns[20].Text = "Cash %"

    .Columns[0].Width = 1
    .Columns[1].Width = 150 * modBasic.$AppWidthRatio
    .Columns[2].Width = 1
    .Columns[3].Width = 1
    .Columns[4].Width = 300 * modBasic.$AppWidthRatio
    .Columns[5].Width = 75 * modBasic.$AppWidthRatio
    .Columns[6].Width = 50 * modBasic.$AppWidthRatio
    .Columns[7].Width = 50 * modBasic.$AppWidthRatio
    .Columns[8].Width = 50 * modBasic.$AppWidthRatio
    .Columns[9].Width = 100 * modBasic.$AppWidthRatio
    .Columns[10].Width = 1
    .Columns[11].Width = 1
    .Columns[12].Width = 1
    .Columns[13].Width = 1
    .Columns[14].Width = 1
    .Columns[15].Width = 75 * modBasic.$AppWidthRatio
    .Columns[16].Width = 125 * modBasic.$AppWidthRatio
    .Columns[17].Width = 125 * modBasic.$AppWidthRatio
    .Columns[18].Width = 125 * modBasic.$AppWidthRatio
    .Columns[19].Width = 125 * modBasic.$AppWidthRatio
    .Columns[20].Width = 50 * modBasic.$AppWidthRatio
  End With
  txtsubtotalnew.Value = Round(xitem, -2)
  txttotaxnew.Value = Round(tax, -2)
  txtdiscnew.Value = Round(disc, -2)
  txtnetotalnew.Value = Round(xx, -2)
  txtpaynew.Value = Round(xCashCrd, -2)
  txttotnew.Value = txtpaynew.Value + txtpayitem.Value

End

Public Sub GridView1_Click()

  Dim res As Result
  Dim col As Integer
  Dim row As Integer
  Dim xval As Float
  Dim xx As String
  Dim xamt As Float

  Dim fixtax As String
  Dim fixdisc As String
  Dim allowDisc As Boolean
  Dim allowRate As Boolean

  Dim res1 As Result
  Dim xpack As String
  Dim xcshCrd As Float
  Dim pckList As String[]

  col = GridView1.Column
  row = GridView1.Row
  If GridView1.Column = 6 Then
    xval = InputValue(GridView1[GridView1.Row, 4].Text, ("Change Quantity"), GridView1[GridView1.Row, 6].Text)
    If xval > 0 Then
      res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1 and fldsave=&2 and fldprint=&3 and fldstatus=&4", GridView1[GridView1.Row, 0].Text, False, False, "Punched")
      If res.Available Then
        res["flditemqty"] = xval
        res["flddiscamt"] = res["flditemrate"] * xval * (res["flddiscper"] / 100)
        res["fldtaxamt"] = res["flditemrate"] * xval * (1 - res["flddiscper"] / 100) * (res["fldtaxper"] / 100)
        res["fldditemamt"] = res["flditemrate"] * xval * (1 - res["flddiscper"] / 100) * (1 + res["fldtaxper"] / 100)
        res["xyz"] = False
        res.Update
        ShowNewEntry()
      Endif
    Endif

  Else If GridView1.Column = 5 Then
    If modBasic.$BillEditRate = "Yes" Then
      allowRate = modNonMedical.GetAllowRateEdit(GridView1[GridView1.Row, 4].Text, GridView1[GridView1.Row, 2].Text)
      If allowRate = True Then
        xamt = InputValue(GridView1[GridView1.Row, 4].Text, ("Change Particular Rate"), CFloat(GridView1[GridView1.Row, 5].Text))
        If xamt > 0 Then
          res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1 and fldsave=&2 and fldprint=&3 and fldstatus=&4", GridView1[GridView1.Row, 0].Text, False, False, "Punched")
          If res.Available Then
            res["flditemrate"] = xamt
            res["flddiscamt"] = xamt * res["flditemqty"] * (res["flddiscper"] / 100)
            res["fldtaxamt"] = xamt * res["flditemqty"] * (1 - res["flddiscper"] / 100) * (res["fldtaxper"] / 100)
            res["fldditemamt"] = xamt * res["flditemqty"] * (1 - res["flddiscper"] / 100) * (1 + res["fldtaxper"] / 100)
            res["xyz"] = False
            res.Update
            ShowNewEntry()
          Endif
        Endif
      Else
        Message.Warning(("Rate alteration not allowed"), ("OK"))
      Endif
    Endif

  Else If GridView1.Column = 8 Then
    fixtax = modBasic.$BillFixTax
    If fixtax = "No" Then
      If modBasic.$BillEditTaxDiscForm = "Amount" Then
      Else
        xval = InputValue(GridView1[GridView1.Row, 4].Text, ("Change Tax Percentage"), GridView1[GridView1.Row, 8].Text)
        If xval >= 0 And If xval <= 100 Then
          res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1 and fldsave=&2 and fldprint=&3 and fldstatus=&4", GridView1[GridView1.Row, 0].Text, False, False, "Punched")
          If res.Available Then
            res["fldtaxper"] = xval
            res["fldtaxamt"] = res["flditemrate"] * res["flditemqty"] * (1 - res["flddiscper"] / 100) * (xval / 100)
            res["fldditemamt"] = res["flditemrate"] * res["flditemqty"] * (1 - res["flddiscper"] / 100) * (1 + xval / 100)
            res["xyz"] = False
            res.Update
            ShowNewEntry()
          Endif
        Endif
      Endif
    Endif

  Else If GridView1.Column = 7 Then
    If modNonMedical.GetFixedDiscount(GridView1[GridView1.Row, 16].Text) = "Lock Discount" Then
      Message.Warning(("Discount alteration not allowed in this scheme"), ("OK"))
    Else
      fixdisc = modBasic.$BillFixDisc
      If fixdisc = "No" Then
        allowDisc = modNonMedical.GetAllowDiscEdit(GridView1[GridView1.Row, 4].Text, GridView1[GridView1.Row, 2].Text)
        If allowDisc = True Then

          If modBasic.$BillEditTaxDiscForm = "Amount" Then
            xamt = InputValue(GridView1[GridView1.Row, 4].Text, ("Change Discount Amount"), CFloat(GridView1[GridView1.Row, 5].Text) * CFloat(GridView1[GridView1.Row, 6].Text) * (CFloat(GridView1[GridView1.Row, 7].Text) / 100))
            If xamt >= 0 And If xamt <= CFloat(GridView1[GridView1.Row, 5].Text) * CFloat(GridView1[GridView1.Row, 6].Text) Then
              res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1 and fldsave=&2 and fldprint=&3 and fldstatus=&4", GridView1[GridView1.Row, 0].Text, False, False, "Punched")
              If res.Available Then
                xval = Round(xamt * 100 / (res["flditemrate"] * res["flditemqty"]), -2)
                res["flddiscper"] = xval
                res["flddiscamt"] = Round(xamt, -2)
                res["fldtaxamt"] = ((res["flditemrate"] * res["flditemqty"]) - xamt) * (res["fldtaxper"] / 100)
                res["fldditemamt"] = ((res["flditemrate"] * res["flditemqty"]) - xamt) * (1 + res["fldtaxper"] / 100)
                res["xyz"] = False
                res.Update
                ShowNewEntry()
              Endif
            Endif
          Else
            xval = InputValue(GridView1[GridView1.Row, 4].Text, ("Change Discount Percentage"), GridView1[GridView1.Row, 7].Text)
            If xval >= 0 And If xval <= 100 Then
              res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1 and fldsave=&2 and fldprint=&3 and fldstatus=&4", GridView1[GridView1.Row, 0].Text, False, False, "Punched")
              If res.Available Then
                res["flddiscper"] = xval
                res["flddiscamt"] = res["flditemrate"] * res["flditemqty"] * (xval / 100)
                res["fldtaxamt"] = res["flditemrate"] * res["flditemqty"] * (1 - xval / 100) * (res["fldtaxper"] / 100)
                res["fldditemamt"] = res["flditemrate"] * res["flditemqty"] * (1 - xval / 100) * (1 + res["fldtaxper"] / 100)
                res["xyz"] = False
                res.Update
                ShowNewEntry()
              Endif
            Endif
          Endif

        Else
          Message.Warning(("Discount alteration not allowed"), ("OK"))
        Endif
      Endif
    Endif

  Else If GridView1.Column = 16 Then
    If modBasic.$BillAlterPackage = "Yes" Or If modBasic.$BillAlterPackage = "Partial" Then
      If modBasic.$BillAlterPackage = "Yes" Then
        pckList = modBasic.$BillDiscountAll
      Else If modBasic.$BillAlterPackage = "Partial" Then
        pckList = modBasic.$BillDiscountCash
      Endif
      xpack = InputCombo("Select Package", Trim(txtencid.Text), pckList, GridView1[GridView1.Row, 16].Text, True)
      If xpack Then
        res1 = modDatabase.$myConn.Exec("select fldbillingmode,fldacledger,fldreference,fldbilltype from tbldiscount where fldtype=&1", xpack)
        If res1.Available Then
          res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView1[GridView1.Row, 0].Text)
          res["flddisctype"] = xpack
          If res1["fldbilltype"] Then
            res["fldbilltype"] = res1["fldbilltype"]
          Endif
          If res1["fldbillingmode"] Then
            res["fldbillingmode"] = res1["fldbillingmode"]
          Endif
          If res1["fldacledger"] Then
            res["fldacledger"] = res1["fldacledger"]
          Endif
          If res["fldcashincredit"] Then
          Else
            res["fldcashincredit"] = 0
          Endif
          res.Update
          ShowNewEntry()
        Endif
      Endif
    Endif

  Else If GridView1.Column = 18 Then
    xx = MedicalSelectedUser(("Select Payable User"), modBasic.$PayUserList)
    If xx Then
      res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1 and fldsave=&2 and fldprint=&3 and fldstatus=&4", GridView1[GridView1.Row, 0].Text, False, False, "Punched")
      If res.Available Then
        res["fldpayto"] = xx
        res["xyz"] = False
        res.Update
        ShowNewEntry()
      Endif
    Endif

  Else If GridView1.Column = 20 Then
    If GridView1[GridView1.Row, 15].Text = "Credit" Then
      xcshCrd = InputValue("Provide percentage of Cash from this item", "Cash in Credit", GridView1[GridView1.Row, 20].Text)
      If xcshCrd <= 100 And If xcshCrd >= CFloat(GridView1[GridView1.Row, 20].Text) Then
        res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1 and fldsave=&2 and fldprint=&3 and fldstatus=&4", GridView1[GridView1.Row, 0].Text, False, False, "Punched")
        If res.Available Then
          res["fldcashincredit"] = xcshCrd
          res["xyz"] = False
          res.Update
          ShowNewEntry()
        Endif
      Endif
    Endif

  Endif
  GridView1.Column = col
  GridView1.Row = row

End

Public Sub btnexponew_Click()

  modCHTMLReport.ExportGridToHTML(GridView1, modReportVar.GetDateTimeReport(Date(), gb.MediumDate), "New Entry Report",, Trim(txtencid.Text))

End

Public Sub GridView1_Menu()

  mnuhidden.Popup

End

Public Sub mnudiscash_Click()

  Dim fixdisc As String
  Dim xamt As Float
  Dim xval As Float
  Dim res As Result
  Dim i As Integer

  fixdisc = modBasic.$BillFixDisc
  If fixdisc = "No" Then

    If modBasic.$BillEditTaxDiscForm = "Amount" Then
      xamt = InputValue(("Set Discount Amount for all Rows"), ("Change Discount Amount"), 0)
      If xamt Then
        For i = 0 To GridView1.Rows.Count - 1

          If xamt >= 0 And If xamt <= CFloat(GridView1[i, 5].Text) * CFloat(GridView1[i, 6].Text) Then
            res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1 and fldsave=&2 and fldprint=&3 and fldstatus=&4", GridView1[i, 0].Text, False, False, "Punched")
            If res.Available Then
              xval = Round(xamt * 100 / (res["flditemrate"] * res["flditemqty"]), -2)
              res["flddiscper"] = xval
              res["flddiscamt"] = Round(xamt, -2)
              res["fldtaxamt"] = ((res["flditemrate"] * res["flditemqty"]) - xamt) * (res["fldtaxper"] / 100)
              res["fldditemamt"] = ((res["flditemrate"] * res["flditemqty"]) - xamt) * (1 + res["fldtaxper"] / 100)
              res["xyz"] = False
              res.Update
            Endif
          Endif

        Next
        ShowNewEntry()
      Endif

    Else
      xval = InputValue(("Set Discount Precentage for all Rows"), ("Change Discount Percentage"), 0)
      If xval Then
        If xval > 0 And If xval <= 100 Then
          For i = 0 To GridView1.Rows.Count - 1

            res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1 and fldsave=&2 and fldprint=&3 and fldstatus=&4", GridView1[i, 0].Text, False, False, "Punched")
            If res.Available Then
              res["flddiscper"] = xval
              res["flddiscamt"] = res["flditemrate"] * res["flditemqty"] * (xval / 100)
              res["fldtaxamt"] = res["flditemrate"] * res["flditemqty"] * (1 - xval / 100) * (res["fldtaxper"] / 100)
              res["fldditemamt"] = res["flditemrate"] * res["flditemqty"] * (1 - xval / 100) * (1 + res["fldtaxper"] / 100)
              res["xyz"] = False
              res.Update
            Endif

          Next
          ShowNewEntry()
        Endif
      Endif

    Endif
  Endif

End

Public Sub mnupackageall_Click()

  Dim res As Result
  Dim res1 As Result
  Dim xpack As String
  Dim Row As Integer
  Dim pckList As String[]

  If modBasic.$BillAlterPackage = "Yes" Or If modBasic.$BillAlterPackage = "Partial" Then
    If modBasic.$BillAlterPackage = "Yes" Then
      pckList = modBasic.$BillDiscountAll
    Else If modBasic.$BillAlterPackage = "Partial" Then
      pckList = modBasic.$BillDiscountCash
    Endif
    xpack = InputCombo("Select Package", Trim(txtencid.Text), pckList, "", True)
    If xpack Then
      res1 = modDatabase.$myConn.Exec("select fldbillingmode,fldacledger,fldreference,fldbilltype from tbldiscount where fldtype=&1", xpack)
      If res1.Available Then
        For Row = 0 To GridView1.Rows.Count - 1
          res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView1[Row, 0].Text)
          res["flddisctype"] = xpack
          If res1["fldbilltype"] Then
            res["fldbilltype"] = res1["fldbilltype"]
          Endif
          If res1["fldbillingmode"] Then
            res["fldbillingmode"] = res1["fldbillingmode"]
          Endif
          If res1["fldacledger"] Then
            res["fldacledger"] = res1["fldacledger"]
          Endif
          If res["fldcashincredit"] Then
          Else
            res["fldcashincredit"] = 0
          Endif
          res.Update
        Next
        ShowNewEntry()
      Endif
    Endif
  Endif

End

Public Sub mnucashbulk_Click()

  Dim sql As String
  Dim res As Result
  Dim xcrdt As Float
  Dim xtotal As Float

  Dim xnewval As Float
  Dim xperc As Float
  Dim res1 As Result
  Dim xcomp As String

  If chkall.Value Then
    xcomp = "%"
  Else
    xcomp = modBasic.$compID
  Endif

  xcrdt = 0
  xtotal = 0
  sql = "select fldid,flditemname,flditemrate,flditemqty,fldditemamt,fldcashincredit from tblpatbilling where fldencounterval=&1 and fldsave=&2 and fldprint=&3 and fldordcomp like &4 and fldstatus=&5 and flditemqty>&6 and flddisctype=&7 and fldbilltype=&8"
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), False, False, xcomp, "Punched", 0, cmbdisctype.Text, "Credit")
  If res.Available Then
    For Each res
      If res["fldcashincredit"] Then
        xcrdt = xcrdt + (res["fldcashincredit"] / 100) * res["fldditemamt"]
      Endif
      xtotal = xtotal + res["fldditemamt"]
    Next
  Endif

  If xtotal Then
    xnewval = InputValue("Total Cash Amount to collect from Credit Invoice of this scheme", "Cash in Credit Amount", xcrdt)
    If xnewval <= xtotal And If xnewval >= xcrdt Then
      xperc = Round((xnewval * 100) / xtotal, -2)
      For Each res
        res1 = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", res["fldid"])
        res1["fldcashincredit"] = xperc
        res1["xyz"] = False
        res1.Update
      Next
      ShowNewEntry()
    Endif
  Else
    Message.Warning("No Credit Amount", "OK")
  Endif

End

Public Sub mnudel_Click()

  If GridView1.Rows.Selection.Count > 0 Then
    modDatabase.$myConn.Delete("tblpatbilling", "fldid=&1 and fldsave=&2 and fldprint=&3 and fldstatus=&4", GridView1[GridView1.Row, 0].Text, False, False, "Punched")
    ShowNewEntry()
  Endif

End

Public Sub mnudelall_Click()

  Dim i As Integer

  For i = 0 To GridView1.Rows.Count - 1
    modDatabase.$myConn.Delete("tblpatbilling", "fldid=&1 and fldsave=&2 and fldprint=&3 and fldstatus=&4", GridView1[i, 0].Text, False, False, "Punched")
  Next
  ShowNewEntry()

End

Public Sub mnuuser_Click()

  Dim xx As String
  Dim res1 As Result
  Dim Row As Integer

  If GridView1.Rows.Selection.Count > 0 Then
    Row = GridView1.Row
    xx = MedicalSelectedUser(("Select Payable User"), modBasic.$PayUserList)
    If xx Then
      res1 = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView1[GridView1.Row, 0].Text)
      res1["fldpayto"] = xx
      res1["xyz"] = False
      res1.Update
      ShowNewEntry()
    Endif
    GridView1.Row = Row
  Endif

End

Public Sub mnurefer_Click()

  Dim xx As String
  Dim res1 As Result
  Dim Row As Integer

  If GridView1.Rows.Selection.Count > 0 Then
    Row = GridView1.Row
    xx = MedicalSelectedUser(("Select Referral User"), modBasic.$ReferUserList)
    If xx Then
      res1 = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView1[GridView1.Row, 0].Text)
      res1["fldrefer"] = xx
      res1["xyz"] = False
      res1.Update
      ShowNewEntry()
    Endif
    GridView1.Row = Row
  Endif

End

Public Sub mnuremovpay_Click()

  Dim res1 As Result
  Dim Row As Integer

  If GridView1.Rows.Selection.Count > 0 Then
    Row = GridView1.Row
    res1 = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView1[GridView1.Row, 0].Text)
    res1["fldpayto"] = ""
    res1["xyz"] = False
    res1.Update
    ShowNewEntry()
    GridView1.Row = Row
  Endif

End

Public Sub mnuremovrefer_Click()

  Dim res1 As Result
  Dim Row As Integer

  If GridView1.Rows.Selection.Count > 0 Then
    Row = GridView1.Row
    res1 = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView1[GridView1.Row, 0].Text)
    res1["fldrefer"] = ""
    res1["xyz"] = False
    res1.Update
    ShowNewEntry()
    GridView1.Row = Row
  Endif

End

Public Sub mnuconsult_Click()

  Dim hForm As FmNewConsult

  If txtencid.Text Then
    If $xFinClear = False Then
      hForm = New FmNewConsult(Trim(txtencid.Text))
      hForm.ShowModal
      txtpatlocation.Text = modPatient.GetLocationSetting(Trim(txtencid.Text), $sTatus)
    Endif
  Endif

End

Public Sub mnuopvisit_Click()

  Dim hForm As FmNewOPVisit

  If txtencid.Text Then
    If $xFinClear = False Then
      hForm = New FmNewOPVisit(Trim(txtencid.Text))
      hForm.ShowModal
      txtpatlocation.Text = modPatient.GetLocationSetting(Trim(txtencid.Text), $sTatus)
    Endif
  Endif

End

Public Sub mnuregslip_Click()

  Dim $hReport As CRegistLabel

  If txtencid.Text Then
    If modNonMedical.AllowRegistSlipWithInvoiceEncid(Trim(txtencid.Text)) = True Then
      $hReport = New CRegistLabel(Trim(txtencid.Text))
      modControlSub.OpenHTMLPreview(Trim(txtencid.Text), $hReport.RegistLabelPath(), "LabelSize")
    Endif
  Endif

End

Public Sub mnusershare_Click()

  Dim hForm As FmDiffShare

  If GridView1.Rows.Selection.Count > 0 Then
    If Not GridView1[GridView1.Row, 18].Text Then
      hForm = New FmDiffShare(GridView1[GridView1.Row, 0].Text)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnureason_Click()

  Dim res As Result
  Dim xreason As String
  Dim xx As String[]

  If GridView1.Rows.Selection.Count > 0 Then
    If GridView1[GridView1.Row, 11].Text And If CFloat(GridView1[GridView1.Row, 11].Text) Then
      xx = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldgroup as col from tbldiscgroup"))
      xreason = InputCombo("Select Discount Title", Trim(txtencid.Text), xx, GridView1[GridView1.Row, 14].Text, False)
      If xreason Then
        res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView1[GridView1.Row, 0].Text)
        res["fldreason"] = xreason
        res.Update
      Endif
    Else
      Message.Warning(("No Doscount set"), ("OK"))
    Endif
  Endif

End

''============================ saved entry ============================
Private Sub ExecuteOldQuery()

  Dim sql As String
  Dim cashsubt As Float
  Dim cashtax As Float
  Dim cashdisc As Float
  Dim cashtot As Float
  Dim cashpay As Float

  Dim crdtsubt As Float
  Dim crdttax As Float
  Dim crdtdisc As Float
  Dim crdttot As Float
  Dim crdtpay As Float

  cashsubt = 0
  cashtax = 0
  cashdisc = 0
  cashtot = 0
  cashpay = 0

  crdtsubt = 0
  crdttax = 0
  crdtdisc = 0
  crdttot = 0
  crdtpay = 0

  If modBasic.$BillSeparateReturn = "No" Then
    sql = "select fldid,fldtime,flditemtype,flditemno,flditemname,flditemrate,flditemqty,flddiscper,fldtaxper,fldditemamt,fldtaxamt,flddiscamt,fldbillingmode,fldsample,fldbilltype,flddisctype,fldacledger,fldretqty,flduserid,fldcomp,fldpayto,fldrefer,fldcashincredit from tblpatbilling where fldencounterval=&1 and fldsave=&2 and fldprint=&3"
  Else
    sql = "select fldid,fldtime,flditemtype,flditemno,flditemname,flditemrate,flditemqty,flddiscper,fldtaxper,fldditemamt,fldtaxamt,flddiscamt,fldbillingmode,fldsample,fldbilltype,flddisctype,fldacledger,fldretqty,flduserid,fldcomp,fldpayto,fldrefer,fldcashincredit from tblpatbilling where fldencounterval=&1 and fldsave=&2 and fldprint=&3 and flditemqty>&4"
  Endif
  $rData1 = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, False, 0)

  For Each $rData1
    If $rData1["fldbilltype"] = "Cash" Then
      cashsubt = cashsubt + $rData1["flditemrate"] * $rData1["flditemqty"]
      cashtax = cashtax + $rData1["fldtaxamt"]
      cashdisc = cashdisc + $rData1["flddiscamt"]
      cashtot = cashtot + $rData1["fldditemamt"]
      cashpay = cashpay + $rData1["fldditemamt"]
    Else If $rData1["fldbilltype"] = "Credit" Then
      crdtsubt = crdtsubt + $rData1["flditemrate"] * $rData1["flditemqty"]
      crdttax = crdttax + $rData1["fldtaxamt"]
      crdtdisc = crdtdisc + $rData1["flddiscamt"]
      crdttot = crdttot + $rData1["fldditemamt"]
      If $rData1["fldcashincredit"] Then
        crdtpay = crdtpay + ($rData1["fldcashincredit"] / 100) * $rData1["fldditemamt"]
      Endif
    Endif
  Next

  txtsubtotasave.Value = cashsubt
  txttotaxsave.Value = cashtax
  txtdiscsave.Value = cashdisc
  txtnetotalsave.Value = cashtot
  txtpaysavecash.Value = cashpay

  txtsubtotasavecredit.Value = crdtsubt
  txtdiscsavecredit.Value = crdttax
  txttotaxsavecredit.Value = crdtdisc
  txtnetotalsavecredit.Value = crdttot
  txtpaysavecredit.Value = crdtpay

  txttotsaved.Value = Round(cashpay + crdtpay, -2)
  ShowPendingAmounts()

End

Private Sub ShowPendingAmounts()

  Dim res1 As Result
  Dim res2 As Result

  If modBasic.$BillSeparateReturn = "No" Then
  Else
    res1 = modDatabase.$myConn.Exec("select SUM(fldditemamt) as xtot from tblpatbilling where fldencounterval=&1 and fldsave=&2 and fldprint=&3 and flditemqty<&4 and fldbilltype=&5", Trim(txtencid.Text), True, False, 0, "Credit")
    If res1.Available Then
      If res1["xtot"] Then
        txtsavedcreditreturn.Value = res1["xtot"]
      Endif
    Endif

    res2 = modDatabase.$myConn.Exec("select SUM(fldditemamt) as xtot from tblpatbilling where fldencounterval=&1 and fldsave=&2 and fldprint=&3 and flditemqty<&4 and fldbilltype=&5", Trim(txtencid.Text), True, False, 0, "Cash")
    If res2.Available Then
      If res2["xtot"] Then
        txtsavedcashreturn.Value = res2["xtot"]
      Endif
    Endif
  Endif

End

Private Sub ShowOldEntry()

  Dim Column As Integer
  Dim fld As ResultField

  ExecuteOldQuery()
  GridView2.Clear
  GridView2.Columns.Count = $rData1.Fields.Count
  GridView2.Rows.Count = $rData1.Count

  For Each $rData1
    Column = 0
    For Each fld In $rData1.Fields
      modGeneralMain.GridExplicitDecoration(GridView2, $rData1.Index, Column)
      If $rData1["fldretqty"] > 0 Then
        GridView2[$rData1.Index, Column].Foreground = Color.Red
      Endif
      If Column = 1 Then
        GridView2[$rData1.Index, Column].Text = modReportVar.GetDateTimeReport($rData1["fldtime"], gb.GeneralDate)
      Else If Column = 20 Then
        GridView2[$rData1.Index, Column].Text = modGeneral.GetUserFullName($rData1[fld.Name])
      Else If Column = 21 Then
        GridView2[$rData1.Index, Column].Text = modGeneral.GetUserFullName($rData1[fld.Name])
      Else
        GridView2[$rData1.Index, Column].Text = $rData1[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  GridView2.Row = 0

  With GridView2
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[1].Text = "DateTime"
    .Columns[4].Text = "Particulars"
    .Columns[5].Text = "Rate"
    .Columns[6].Text = "QTY"
    .Columns[7].Text = "Disc%"
    .Columns[8].Text = "Tax%"
    .Columns[9].Text = "Total"
    .Columns[14].Text = "Mode"
    .Columns[15].Text = "Package"
    .Columns[16].Text = "Account"
    .Columns[18].Text = "UserID"
    .Columns[19].Text = "CompID"
    .Columns[20].Text = "Payable"
    .Columns[21].Text = "Referral"
    .Columns[22].Text = "Cash%"

    .Columns[0].Width = 1
    .Columns[1].Width = 150 * modBasic.$AppWidthRatio
    .Columns[2].Width = 1
    .Columns[3].Width = 1
    .Columns[4].Width = 300 * modBasic.$AppWidthRatio
    .Columns[5].Width = 75 * modBasic.$AppWidthRatio
    .Columns[6].Width = 50 * modBasic.$AppWidthRatio
    .Columns[7].Width = 50 * modBasic.$AppWidthRatio
    .Columns[8].Width = 50 * modBasic.$AppWidthRatio
    .Columns[9].Width = 75 * modBasic.$AppWidthRatio
    .Columns[10].Width = 1
    .Columns[11].Width = 1
    .Columns[12].Width = 1
    .Columns[13].Width = 1
    .Columns[14].Width = 75 * modBasic.$AppWidthRatio
    .Columns[15].Width = 125 * modBasic.$AppWidthRatio
    .Columns[16].Width = 125 * modBasic.$AppWidthRatio
    .Columns[17].Width = 1
    .Columns[18].Width = 100 * modBasic.$AppWidthRatio
    .Columns[19].Width = 100 * modBasic.$AppWidthRatio
    .Columns[20].Width = 125 * modBasic.$AppWidthRatio
    .Columns[21].Width = 125 * modBasic.$AppWidthRatio
    .Columns[22].Width = 75 * modBasic.$AppWidthRatio
  End With

  hPatient.ShowBillingDatainBox()

End

'----------------------- Allow edit of saved entry (distort several records) ----------------------
Public Sub GridView2_Click()

  Dim res As Result
  Dim col As Integer
  Dim row As Integer
  Dim xval As Float
  Dim xx As String
  Dim xamt As Float

  Dim fixtax As String
  Dim fixdisc As String
  Dim allowDisc As Boolean
  Dim allowRate As Boolean

  col = GridView2.Column
  row = GridView2.Row

  If GridView2[GridView2.Row, 17].Text = 0 Then
    If GridView2.Column = 5 Then
      If modBasic.$BillEditRateSaved = "Yes" Then
        allowRate = modNonMedical.GetAllowRateEdit(GridView2[GridView2.Row, 4].Text, GridView2[GridView2.Row, 2].Text)
        If allowRate = True Then
          xamt = InputValue(GridView2[GridView2.Row, 4].Text, ("Change Particular Rate"), CFloat(GridView2[GridView2.Row, 5].Text))
          If xamt > 0 Then
            res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView2[GridView2.Row, 0].Text)
            If res.Available Then
              res["flditemrate"] = xamt
              res["flddiscamt"] = xamt * res["flditemqty"] * (res["flddiscper"] / 100)
              res["fldtaxamt"] = xamt * res["flditemqty"] * (1 - res["flddiscper"] / 100) * (res["fldtaxper"] / 100)
              res["fldditemamt"] = xamt * res["flditemqty"] * (1 - res["flddiscper"] / 100) * (1 + res["fldtaxper"] / 100)
              res["xyz"] = False
              res.Update
            Endif
          Endif
        Else
          Message.Warning(("Rate alteration not allowed"), ("OK"))
        Endif
      Endif

    Else If GridView2.Column = 8 Then
      fixtax = modBasic.$BillFixTaxSaved
      If fixtax = "No" Then
        If modBasic.$BillEditTaxDiscForm = "Amount" Then
        Else
          xval = InputValue(GridView2[GridView2.Row, 4].Text, ("Change Tax Percentage"), GridView2[GridView2.Row, 8].Text)
          If xval >= 0 And If xval <= 100 Then
            res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView2[GridView2.Row, 0].Text)
            If res.Available Then
              res["fldtaxper"] = xval
              res["fldtaxamt"] = res["flditemrate"] * res["flditemqty"] * (1 - res["flddiscper"] / 100) * (xval / 100)
              res["fldditemamt"] = res["flditemrate"] * res["flditemqty"] * (1 - res["flddiscper"] / 100) * (1 + xval / 100)
              res["xyz"] = False
              res.Update
            Endif
          Endif
        Endif
      Endif

    Else If GridView2.Column = 7 Then
      If modNonMedical.GetFixedDiscount(GridView2[GridView2.Row, 15].Text) = "Lock Discount" Then
        Message.Warning(("Discount alteration not allowed in this scheme"), ("OK"))
      Else
        fixdisc = modBasic.$BillFixDiscSaved
        If fixdisc = "No" Then
          allowDisc = modNonMedical.GetAllowDiscEdit(GridView2[GridView2.Row, 4].Text, GridView2[GridView2.Row, 2].Text)
          If allowDisc = True Then

            If modBasic.$BillEditTaxDiscForm = "Amount" Then
              xamt = InputValue(GridView2[GridView2.Row, 4].Text, ("Change Discount Amount"), CFloat(GridView2[GridView2.Row, 5].Text) * CFloat(GridView2[GridView2.Row, 6].Text) * (CFloat(GridView2[GridView2.Row, 7].Text) / 100))
              If xamt >= 0 And If xamt <= CFloat(GridView2[GridView2.Row, 5].Text) * CFloat(GridView2[GridView2.Row, 6].Text) Then
                res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView2[GridView2.Row, 0].Text)
                If res.Available Then
                  xval = Round(xamt * 100 / (res["flditemrate"] * res["flditemqty"]), -2)
                  res["flddiscper"] = xval
                  res["flddiscamt"] = Round(xamt, -2)
                  res["fldtaxamt"] = ((res["flditemrate"] * res["flditemqty"]) - xamt) * (res["fldtaxper"] / 100)
                  res["fldditemamt"] = ((res["flditemrate"] * res["flditemqty"]) - xamt) * (1 + res["fldtaxper"] / 100)
                  res["xyz"] = False
                  res.Update
                Endif
              Endif
            Else
              xval = InputValue(GridView2[GridView2.Row, 4].Text, ("Change Discount Percentage"), GridView2[GridView2.Row, 7].Text)
              If xval >= 0 And If xval <= 100 Then
                res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView2[GridView2.Row, 0].Text)
                If res.Available Then
                  res["flddiscper"] = xval
                  res["flddiscamt"] = res["flditemrate"] * res["flditemqty"] * (xval / 100)
                  res["fldtaxamt"] = res["flditemrate"] * res["flditemqty"] * (1 - xval / 100) * (res["fldtaxper"] / 100)
                  res["fldditemamt"] = res["flditemrate"] * res["flditemqty"] * (1 - xval / 100) * (1 + res["fldtaxper"] / 100)
                  res["xyz"] = False
                  res.Update
                Endif
              Endif
            Endif

          Else
            Message.Warning(("Discount alteration not allowed"), ("OK"))
          Endif
        Endif
      Endif

    Else If GridView2.Column = 20 Then
      If modBasic.$BillEditPayable = "Yes" Then
        xx = MedicalSelectedUser(("Select Payable User"), modBasic.$PayUserList)
        If xx Then
          res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView2[GridView2.Row, 0].Text)
          res["fldpayto"] = xx
          res["xyz"] = False
          res.Update
        Endif
      Endif

    Else
      ShowBillingParam(GridView2[GridView2.Row, 15].Text)
    Endif

    ShowOldEntry()
  Endif
  GridView2.Column = col
  GridView2.Row = row

End

Private Sub UpdateSelectedDiscount(sType As String, xval As Float)

  Dim Row As Integer
  Dim res As Result

  If xval >= 0 And If xval <= 100 Then
    For Row = 0 To GridView2.Rows.Count - 1
      res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1 and flditemtype=&2 and fldretqty=&3", GridView2[Row, 0].Text, sType, 0)
      If res.Available Then
        res["flddiscper"] = xval
        res["flddiscamt"] = res["flditemrate"] * res["flditemqty"] * (xval / 100)
        res["fldtaxamt"] = res["flditemrate"] * res["flditemqty"] * (1 - xval / 100) * (res["fldtaxper"] / 100)
        res["fldditemamt"] = res["flditemrate"] * res["flditemqty"] * (1 - xval / 100) * (1 + res["fldtaxper"] / 100)
        res["xyz"] = False
        res.Update
      Endif
    Next
  Endif

End

Public Sub btnsavedcash_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowPendingExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Complete", ["Cash"])
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btnsavedcredit_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowPendingExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Complete", ["Credit"])
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub GridView2_Menu()

  mnusaved.Popup

End

Public Sub mnusavediscount_Click()

  Dim hForm As FmDiscLevel

  If modBasic.$BillFixDiscSaved = "No" Then
    hForm = New FmDiscLevel(Trim(txtencid.Text))
    hForm.ShowModal()

    If modNonMedical.$DiscLaboratory Then
      UpdateSelectedDiscount("Diagnostic Tests", modNonMedical.$DiscLaboratory)
    Endif
    If modNonMedical.$DiscRadiology Then
      UpdateSelectedDiscount("Radio Diagnostics", modNonMedical.$DiscRadiology)
    Endif
    If modNonMedical.$DiscProcedure Then
      UpdateSelectedDiscount("Procedures", modNonMedical.$DiscProcedure)
    Endif
    If modNonMedical.$DiscEquipment Then
      UpdateSelectedDiscount("Equipment", modNonMedical.$DiscEquipment)
    Endif
    If modNonMedical.$DiscServices Then
      UpdateSelectedDiscount("General Services", modNonMedical.$DiscServices)
    Endif
    If modNonMedical.$DiscOthers Then
      UpdateSelectedDiscount("Other Items", modNonMedical.$DiscOthers)
    Endif
    If modNonMedical.$DiscMedicine Then
      UpdateSelectedDiscount("Medicines", modNonMedical.$DiscMedicine)
    Endif
    If modNonMedical.$DiscSurgical Then
      UpdateSelectedDiscount("Surgicals", modNonMedical.$DiscSurgical)
    Endif
    If modNonMedical.$DiscExtraItem Then
      UpdateSelectedDiscount("Extra Items", modNonMedical.$DiscExtraItem)
    Endif
    ShowOldEntry()
    modNonMedical.$DiscLaboratory = 0
    modNonMedical.$DiscRadiology = 0
    modNonMedical.$DiscProcedure = 0
    modNonMedical.$DiscEquipment = 0
    modNonMedical.$DiscServices = 0
    modNonMedical.$DiscOthers = 0
    modNonMedical.$DiscMedicine = 0
    modNonMedical.$DiscSurgical = 0
    modNonMedical.$DiscExtraItem = 0
  Endif

End

Public Sub mnusharesaved_Click()

  Dim hForm As FmDiffShare

  If GridView2.Rows.Selection.Count > 0 Then
    If modBasic.$BillEditPayable = "Yes" Then
      If Not GridView2[GridView2.Row, 20].Text Then
        hForm = New FmDiffShare(GridView2[GridView2.Row, 0].Text)
        hForm.ShowModal
      Endif
    Endif
  Endif

End

Public Sub mnueditcashcredit_Click()

  Dim res As Result
  Dim res1 As Result
  Dim xpack As String

  Dim col As Integer
  Dim row As Integer

  If GridView2.Rows.Selection.Count Then
    col = GridView2.Column
    row = GridView2.Row
    If GridView2[GridView2.Row, 17].Text = 0 Then
      If modBasic.$BillEditSavePack = "Yes" Or If modBasic.$BillEditSavePack = "Partial" Then
        If Message.Question(("Are you sure ?"), ("No"), ("OK")) = 2 Then

          If modBasic.$BillEditSavePack = "Yes" Then
            xpack = InputCombo("Select Package", Trim(txtencid.Text), modBasic.$BillDiscountAll, GridView2[GridView2.Row, 15].Text, True)
          Else If modBasic.$BillEditSavePack = "Partial" Then
            xpack = InputCombo("Select Package", Trim(txtencid.Text), modBasic.$BillDiscountCash, GridView2[GridView2.Row, 15].Text, True)
          Endif
          If xpack Then
            res1 = modDatabase.$myConn.Exec("select fldbillingmode,fldacledger,fldreference,fldbilltype from tbldiscount where fldtype=&1", xpack)
            If res1.Available Then
              res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView2[GridView2.Row, 0].Text)
              res["flddisctype"] = xpack
              If res1["fldbilltype"] Then
                res["fldbilltype"] = res1["fldbilltype"]
              Endif
              If res1["fldbillingmode"] Then
                res["fldbillingmode"] = res1["fldbillingmode"]
              Endif
              If res1["fldacledger"] Then
                res["fldacledger"] = res1["fldacledger"]
              Endif
              res.Update
              ShowOldEntry()
            Endif
          Endif

        Endif
      Endif
    Endif
    GridView2.Column = col
    GridView2.Row = row
  Endif

End

Public Sub mucancelpack_Click()

  Dim hForm As FmGroupClaims

  If txtencid.Text Then
    If cmbdisctype.Text = modBasic.$HIPackage Or If cmbdisctype.Text = modBasic.$HIPackageER Then
      hForm = New FmGroupClaims(Trim(txtencid.Text), cmbdisctype.Text)
      hForm.ShowModal
      ShowOldEntry()
    Endif
  Endif

End

' ' Public Sub mucancelpack_Click()
' '
' '   Dim res As Result
' '   Dim res1 As Result
' '
' '   If GridView2.Rows.Selection.Count Then
' '     If modBasic.$HICancelPack Then
' '
' '       If GridView2[GridView2.Row, 17].Text = 0 Then
' '         If modBasic.$BillEditSavePack = "Yes" Or If modBasic.$BillEditSavePack = "Partial" Then
' '           If Message.Question(("Are you sure ?"), ("No"), ("OK")) = 2 Then
' '
' '             res1 = modDatabase.$myConn.Exec("select fldbillingmode,fldacledger,fldreference,fldbilltype from tbldiscount where fldtype=&1", modBasic.$HICancelPack)
' '             If res1.Available Then
' '               res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", GridView2[GridView2.Row, 0].Text)
' '               res["flddisctype"] = modBasic.$HICancelPack
' '               If res1["fldbilltype"] Then
' '                 res["fldbilltype"] = res1["fldbilltype"]
' '               Endif
' '               If res1["fldbillingmode"] Then
' '                 res["fldbillingmode"] = res1["fldbillingmode"]
' '               Endif
' '               If res1["fldacledger"] Then
' '                 res["fldacledger"] = res1["fldacledger"]
' '               Endif
' '               res["flddiscper"] = 100
' '               res["fldditemamt"] = 0
' '
' '               res["fldsample"] = "Grouped"
' '               res["fldprint"] = True
' '               res["fldstatus"] = "Cleared"
' '               res["xyz"] = False
' '               res.Update
' '               ShowOldEntry()
' '             Endif
' '
' '           Endif
' '         Endif
' '       Endif
' '
' '     Endif
' '   Endif
' '
' ' End

Public Sub mnuadvrecept_Click()

  Dim res As Result

  If GridView2.Rows.Selection.Count Then
    res = modDatabase.$myConn.Exec("select fldencounterval,fldextracol from tblpatbilling where fldid=&1 and (flditemqty-fldretqty)>&2", GridView2[GridView2.Row, 0].Text, 0)
    If res.Available Then
      If res["fldextracol"] Then
        modBILLFormat.AdvanceReceipt(res["fldencounterval"], res["fldextracol"], "ADVANCE RECEIPT (COPY)")
      Endif
    Endif
  Endif

End

''============================ Save All entry ============================
Public Sub mnusave_Click()

  If txtencid.Text Then
    If modBasic.$BillTwoStepBilling = "Yes" Then
      If $xFinClear = True Then
      Else
        SaveGridData()
        PharmacySave()
        Wait

        RefresgOldData()

        hPatient.$ACLedger = cmbledgerac.Text
        hPatient.$ACReference = Trim(txtreference.Text)
        hPatient.txtdiscamt.SetFocus

      Endif
    Endif
  Endif

End

Public Sub chkqrscan_Click()

  If chkqrscan.Value = True Then
    $AdvPayment = "Advance"
  Else
    $AdvPayment = ""
  Endif
  Message.Optional("<h1>Terms of Use of QR Scan Payment</h1><br>" & modLongVar.$AppLegalWarning, ("Accept"), ("Always Accept Terms of Use of QR Scan Payment"))

End

Public Sub RemoveQRCheck()

  chkqrscan.Value = False

End

Public Sub RefresgOldData()

  ShowNewEntry()
  FillDosingGrid()
  TabStrip1.Index = 2
  ShowOldEntry()

End

Private Sub SaveGridData()

  Dim res As Result
  Dim res1 As Result
  Dim res3 As Result
  Dim xcomp As String
  Dim xerr As String
  Dim xallow As Boolean
  Dim xfixcode As String

  If chkall.Value Then
    xcomp = "%"
  Else
    xcomp = modBasic.$compID
  Endif
  xerr = ""

  If modBasic.$BillSeparateReturn = "No" Then
    res = modDatabase.$myConn.Exec("select fldid,flditemtype,flditemno,flditemname,flditemrate,flditemqty,flddiscamt,fldditemamt,fldparent,fldencounterval,flddisctype,fldacledger,fldbilltype,fldcashincredit from tblpatbilling where fldencounterval=&1 and fldsave=&2 and fldprint=&3 and fldordcomp like &4 and fldstatus=&5 and fldbilltype=&6 and fldacledger=&7", Trim(txtencid.Text), False, False, xcomp, "Punched", hPatient.GetCashCreditMode(), cmbledgerac.Text)     ''
  Else
    res = modDatabase.$myConn.Exec("select fldid,flditemtype,flditemno,flditemname,flditemrate,flditemqty,flddiscamt,fldditemamt,fldparent,fldencounterval,flddisctype,fldacledger,fldbilltype,fldcashincredit from tblpatbilling where fldencounterval=&1 and fldsave=&2 and fldprint=&3 and fldordcomp like &4 and fldstatus=&5 and flditemqty>&6 and fldbilltype=&7 and fldacledger=&8", Trim(txtencid.Text), False, False, xcomp, "Punched", 0, hPatient.GetCashCreditMode(), cmbledgerac.Text)     ''
  Endif

  If res.Available = True Then
    Inc Application.Busy
    modDatabase.$myConn.Begin
    For Each res
      xallow = modNonMedical.AllowProceedBilling(Trim(txtencid.Text), res["flddisctype"], res["flddiscamt"], res["fldditemamt"], res["fldbilltype"], res["fldcashincredit"], res["flditemtype"], res["flditemname"], res["flditemqty"])
      If xallow = True Then
        xfixcode = modNonMedical.GetBillItemHIAbbv(res["flditemname"], res["flditemtype"])
        If GetHICapGo(xfixcode, res["flditemname"], res["flditemqty"], res["flddisctype"]) = True Then
          If xfixcode And If $HiCappingVar.Exist(xfixcode) Then
            $HiCappingVar[xfixcode] = $HiCappingVar[xfixcode] - res["fldqtydisp"]
          Endif

          If res["flditemqty"] < 0 Then
            If modBasic.$BillSeparateReturn = "No" Then
              res1 = modDatabase.$myConn.Exec("select flditemqty,fldretqty from tblpatbilling where fldid=&1", res["fldparent"])
              If res1.Available Then
                If (0 - res["flditemqty"]) <= (res1["flditemqty"] - res1["fldretqty"]) Then
                  ''update parent bill with return qty
                  modBillings.UpdateReturnBillQTY(res["fldparent"], res["fldencounterval"], res["flditemname"], res["flditemqty"])
                  ''update current record
                  res3 = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", res["fldid"])
                  res3["fldstatus"] = "Done"
                  res3["fldsave"] = True
                  res3["flduserid"] = modBasic.$lbluser
                  res3["fldtime"] = Now()
                  res3["fldcomp"] = modBasic.$compID
                  res3["xyz"] = False
                  res3.Update()
                Endif
              Endif
            Endif
          Else
            ''update current record
            res3 = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", res["fldid"])
            res3["fldstatus"] = "Done"
            res3["fldsave"] = True
            res3["flduserid"] = modBasic.$lbluser
            res3["fldtime"] = Now()
            res3["fldcomp"] = modBasic.$compID
            res3["xyz"] = False
            res3.Update()
          Endif

        Else
          xerr = xerr & "Cap Limit exceeded for " & res["flditemname"] & gb.NewLine
        Endif
      Else
        xerr = xerr & res["flditemname"] & gb.NewLine
      Endif
    Next
    modDatabase.$myConn.Commit
    Dec Application.Busy
    If xerr Then
      Balloon.Warning("<b>Over Set Discount/Credit Limit:</b>" & gb.NewLine & xerr, GridView1)
    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

''====================== visible menu ==============================
Public Sub mnublnk_Click()

  Me.Close
  Wait

  modWorkSpace.Add(fmCashBilling)

End

Public Sub mnulastencid_Click()

  txtencid.Text = modSettings.ShowLogValues("LastValue/Encounter")

End

Public Sub mnuregistr_Click()

  If modBasic.$regF1Cashier = "No" Then
  Else
    If Not txtencid.Text Or If txtencid.Text = modBasic.$EncIdPrefix Then
      If modBasic.$RegStartTime And If modBasic.$ResEndTime Then
        If Time() > modBasic.$RegStartTime And If Time() < modBasic.$ResEndTime Then
          txtencid.Text = RegistrationForm(False)
          If txtencid.Text Then
            hPatient.$StickerMode = True
          Endif
        Endif
      Else
        txtencid.Text = RegistrationForm(False)
        If txtencid.Text Then
          hPatient.$StickerMode = True
        Endif
      Endif
    Endif
  Endif

End

Public Sub mnuregistfollow_Click()

  If modBasic.$regF1Cashier = "No" Then
  Else
    If Not txtencid.Text Or If txtencid.Text = modBasic.$EncIdPrefix Then
      If modBasic.$RegStartTime And If modBasic.$ResEndTime Then
        If Time() > modBasic.$RegStartTime And If Time() < modBasic.$ResEndTime Then
          txtencid.Text = RegistrationForm(True)
          If txtencid.Text Then
            hPatient.$StickerMode = True
          Endif
        Endif
      Else
        txtencid.Text = RegistrationForm(True)
        If txtencid.Text Then
          hPatient.$StickerMode = True
        Endif
      Endif
    Endif
  Endif

End

Public Sub mnubedallocat_Click()

  Dim hForm As FmBedManage

  If txtencid.Text Then
    If $Status = "Admitted" Then
      hForm = New FmBedManage(Trim(txtencid.Text), txtpatlocation)
      hForm.ShowModal
    Endif
  Endif

End

Private Function ShowCurrStatus(xStatus As String) As String

  Dim xx As String

  Select xStatus
    Case "Discharged", "LAMA", "Death", "Refer", "Absconder"
      If $xFinClear = True Then
        xx = xStatus
      Else
        xx = "Waiting"
      Endif
    Case Else
      xx = xStatus
  End Select
  Return xx

End

Public Sub mnuchangestate_Click()

  Dim status As String[] = ["Recovered", "Improved", "Unchanged", "Worse", "LAMA", "Death", "Refer", "Absconder"]
  Dim xx As String
  Dim xmsg As String

  If $sTatus = "Admitted" Then
    If modPathoSub.AllowDischargeDiagno(Trim(txtencid.Text)) = True Then
      xx = InputCombo(("Select Clinical Status of patient ") & modPatient.GetPatientNameByEnc(Trim(txtencid.Text)), "Enc: " & Trim(txtencid.Text), status, "", True)
      If xx Then
        Inc Application.Busy
        modDatabase.$myConn.Begin
        xmsg = modBillings.ExitPatientWithBillingOfBed(Trim(txtencid.Text))
        Select xx
          Case "Recovered", "Improved", "Unchanged", "Worse"
            modPatientSub.UpdateCurrentStatus(Trim(txtencid.Text), "Discharged", xx)
          Case "LAMA", "Death", "Refer", "Absconder"
            modPatientSub.UpdateCurrentStatus(Trim(txtencid.Text), xx, "")
        End Select
        modDatabase.$myConn.Commit
        Dec Application.Busy
        $sTatus = modPatient.CurrentAdmissionStatus(Trim(txtencid.Text))
        lblstatus.Text = ShowCurrStatus($sTatus)
        txtpatlocation.Text = modPatient.GetLocationSetting(Trim(txtencid.Text), $sTatus)

        hPatient.$PatStatus = $sTatus
        If $sTatus = "Admitted" Then
        Else
          If hPatient Then
            hPatient.ShowDepositButton()
          Endif
        Endif
        If xmsg Then
          Message.Warning(xmsg, "OK")
        Endif
        GetExitBilling()
        ShowNewEntry()
        ShowOldEntry()
        LockBillingOption()
        SerBedEntryCount()
        mnubedcharge_Click()
      Endif
    Else
      Message.Warning("No Diagnosis", "OK")
    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

Private Sub SerBedEntryCount()

  Dim res As Result
  Dim xdoa As Date
  Dim xidno As Long

  xdoa = modPatient.GetAdmissionDate(Trim(txtencid.Text))
  res = modDatabase.$myConn.Exec("select fldid,fldfirsttime from tblpattiming where fldencounterval=&1 and fldtype=&2 and fldfirstreport=&3 ORDER BY fldfirsttime ASC", Trim(txtencid.Text), "General Services", "Bed")
  If res.Available = False Then
    xidno = modPatientGeneral.AddPatientTableFirstTime(Trim(txtencid.Text), "General Services", cmbdisctype.Text, "", "Bed", xdoa, "", Now())
  Else
    res.MoveFirst
    If Date(res["fldfirsttime"]) > Date(xdoa) Then
      xidno = modPatientGeneral.AddPatientTableFirstTime(Trim(txtencid.Text), "General Services", cmbdisctype.Text, "", "Bed", xdoa, "", res["fldfirsttime"])
    Endif
  Endif

End

Private Sub GetExitBilling()

  Dim res As Result
  Dim xitem As String

  res = modDatabase.$myConn.Exec("select fldid,flditem,fldsecondtime from tblpattiming where fldencounterval=&1 and fldtype=&2 and (fldfirstreport=&3 or fldfirstreport=&4)", Trim(txtencid.Text), "General Services", "BedCharge", "Bed")
  If res.Available Then
    res.MoveLast
    If res["flditem"] Then
      xitem = modNonMedical.GetExitAutoCharge(res["flditem"], cmbdisctype.Text)
      If xitem Then
        modBillings.ServiceBillBlankLedgerPack(Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, "Service", xitem, 1, "Punched", 0, False, False)
      Else
        Message.Warning("Exit Auto Billing not punched", ("OK"))
      Endif
    Endif
  Endif

End

Public Sub mnubedcharge_Click()

  Dim hForm1 As FmBedNewBilling

  If txtencid.Text Then
    If $xFinClear = False Then
      hForm1 = New FmBedNewBilling(Trim(txtencid.Text), txtpatlocation.Text, cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, hPatient.GetCashCreditMode())
      hForm1.ShowModal
      RefresgOldData()
    Endif
  Endif

End

Public Sub mnubedbillnew_Click()

  Dim hForm As FmBedNewBilling

  If txtencid.Text Then
    If $xFinClear = False Then
      hForm = New FmBedNewBilling(Trim(txtencid.Text), txtpatlocation.Text, cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, hPatient.GetCashCreditMode())
      hForm.ShowModal
      ShowOldEntry()
      ShowNewEntry()
    Endif
  Endif

End

Public Sub mnureturn_Click()

  Dim hForm As FmInvReturn

  If txtencid.Text Then
    If $xFinClear = False Then
      hForm = New FmInvReturn(Trim(txtencid.Text))
      hForm.ShowModal
      ShowOldEntry()
    Endif
  Endif

End

Public Sub mnunoninvinpat_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowPendingExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Admitted", ["Credit", "Cash"])
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnudemo_Click()

  Dim hForm As FmPatdemograph

  If txtencid.Text Then
    If $xFinClear = False Then
      If modBasic.$RegistAutoDemograph Then
        hForm = New FmPatdemograph(Trim(txtencid.Text), modBasic.$RegistAutoDemograph)
        hForm.ShowModal
      Endif
    Endif
  Endif

End

Public Sub mnupatacc_Click()

  Dim hForm As FmPatAccEdit

  If txtencid.Text Then
    If $xFinClear = False Then
      hForm = New FmPatAccEdit(Trim(txtencid.Text))
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnugroupadmitted_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowTotalGroupbyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Admitted")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnucreditpack_Click()

  Dim xmodeList As String[]
  Dim xmode As String
  Dim xPath As String

  If txtencid.Text Then
    xmodeList = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(flddisctype) as col from tblpatbilling where fldencounterval=&1 and fldsave=&2 and fldbilltype=&3", Trim(txtencid.Text), True, "Credit"))
    xmodeList.Add("%")
    xmode = InputCombo("Select Package", Trim(txtencid.Text), xmodeList, "%", True)
    If xmode Then
      Inc Application.Busy
      xPath = modCHTMLInvoice.ShowCreditSelExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Admitted", xmode)
      Dec Application.Busy
      modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
    Endif
  Endif

End

Public Sub mnucreditalldet_Click()

  Dim xmodeList As String[]
  Dim xmode As String
  Dim xPath As String

  If txtencid.Text Then
    xmodeList = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(flddisctype) as col from tblpatbilling where fldencounterval=&1 and fldsave=&2 and fldbilltype=&3", Trim(txtencid.Text), True, "Credit"))
    xmodeList.Add("%")
    xmode = InputCombo("Select Package", Trim(txtencid.Text), xmodeList, "%", True)
    If xmode Then
      Inc Application.Busy
      xPath = modCHTMLInvoice.ShowCreditSelExpensebyPatientDetail(modDatabase.$syConn, Trim(txtencid.Text), "Admitted", xmode)
      Dec Application.Busy
      modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
    Endif
  Endif

End

''
Public Sub mnuipall_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowTotalInvoicebyPatient(Trim(txtencid.Text), "Admitted")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuipdisc_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowTotalInvoicebyPatient(Trim(txtencid.Text), "Discharged")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnubill_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowTotalInvoicebyPatient(Trim(txtencid.Text), "Complete")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexpensummary_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowSummaryExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Complete")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexpenseIpat_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowSummaryExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Admitted")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexpense_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowTotalExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Complete")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexpadmited_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowTotalExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Admitted")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexpensedate_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowTotalExpenseDatebyPatient(modDatabase.$syConn, Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexpensedept_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowTotalGroupbyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Complete")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuextraexpen_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowExtraExpensePatient(modDatabase.$syConn, Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnumed_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Medicines")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnusurg_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Surgicals")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuextra_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Extra Items")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnulaboratory_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Diagnostic Tests")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuradio_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Radio Diagnostics")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuproc_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Procedures")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuserv_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "General Services")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuequip_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Equipment")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuother_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Other Items")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnunoninvoiced_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowPendingExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Complete", ["Credit", "Cash"])
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexpenselocal_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowTotalExpenseAllEncPatient(modDatabase.$syConn, Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexpenseremote_Click()

  modPatReports.ShowRepoExpensePatient(Trim(txtencid.Text))

End

Public Sub mnulocalsummary_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowSummExpenseAllEncPatient(modDatabase.$syConn, Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnureposummary_Click()

  modPatReports.ShowRepoSummExpensePatient(Trim(txtencid.Text))

End

''========================================================= Pharmacy =====================================
Public Sub rbgeneric_Click()

  modSettings.SaveSettingsToFile("BrandOrGeneric/Dispensing", "Generic")

End

Public Sub rbrand_Click()

  modSettings.SaveSettingsToFile("BrandOrGeneric/Dispensing", "Brand")

End

Private Function GetBrandGenerricType() As String

  Dim brandOrGeneric As String

  If rbrand.Value = True Then
    brandOrGeneric = "Brand"
  Else
    brandOrGeneric = "Generic"
  Endif
  Return brandOrGeneric

End

''--------------------- Array for Items to Load ----------------------------
Private Sub IniateCategoryPharmArray()

  $MSurgicalLst = New String[]
  $ExtraItemLst = New String[]
  $OralBrandLst = New String[]
  $OralGenricLst = New String[]
  $InjBrandLst = New String[]
  $InjGenricLst = New String[]
  $LiqBrandLst = New String[]
  $LiqGenricLst = New String[]

End

Private Function GetPharmCategoryArray(sRoute As String, sMode As String) As String[]

  Dim xarry As String[]

  If sRoute = "oral" Then
    If sMode = "Brand" Then
      If Not $OralBrandLst.Count Then
        $OralBrandLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, GetPharmTarget(sRoute), cmbmode.Text))
      Endif
      xarry = $OralBrandLst
    Else If sMode = "Generic" Then
      If Not $OralGenricLst.Count Then
        $OralGenricLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, GetPharmTarget(sRoute), cmbmode.Text))
      Endif
      xarry = $OralGenricLst
    Endif

  Else If sRoute = "liquid" Then
    If sMode = "Brand" Then
      If Not $LiqBrandLst.Count Then
        $LiqBrandLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, GetPharmTarget(sRoute), cmbmode.Text))
      Endif
      xarry = $LiqBrandLst
    Else If sMode = "Generic" Then
      If Not $LiqGenricLst.Count Then
        $LiqGenricLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, GetPharmTarget(sRoute), cmbmode.Text))
      Endif
      xarry = $LiqGenricLst
    Endif

  Else If sRoute = "injection" Then
    If sMode = "Brand" Then
      If Not $InjBrandLst.Count Then
        $InjBrandLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, GetPharmTarget(sRoute), cmbmode.Text))
      Endif
      xarry = $InjBrandLst
    Else If sMode = "Generic" Then
      If Not $InjGenricLst.Count Then
        $InjGenricLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, GetPharmTarget(sRoute), cmbmode.Text))
      Endif
      xarry = $InjGenricLst
    Endif

  Else If sRoute = "msurg" Then
    If Not $MSurgicalLst.Count Then
      $MSurgicalLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, GetPharmTarget(sRoute), cmbmode.Text))
    Endif
    xarry = $MSurgicalLst

  Else If sRoute = "extra" Then
    If Not $ExtraItemLst.Count Then
      $ExtraItemLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, GetPharmTarget(sRoute), cmbmode.Text))
    Endif
    xarry = $ExtraItemLst

  Else
    xarry = modStock.FillMedicinesDispensingArrayList(sRoute, sMode, GetPharmTarget(sRoute), cmbmode.Text)
  Endif

  Return xarry

End

''------------------medicine entry ---------------------------------------
Public Sub cmbroute_Click()

  chksavenew.Value = False
  cmbmedicine.Clear()
  BlankDosingBox()

End

Public Sub cmbroute_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbroute)
  modFillContainer.RestrictComboToContent(cmbroute)

End

Public Sub cmbmedicine_GotFocus()

  Dim xList As String[]

  If Not cmbroute.Text Then
    cmbroute.SetFocus

  Else If cmbroute.Text Then
    If Not cmbmedicine.Text Then

      txtdose.Tag = "Auto"
      txtdose.Parent.Tag = "Auto"

      If modBasic.$AppCacheGridViewData = "Yes" Then
        cmbmedicine.Text = PharmGridList("Select Particulars", cmbroute.Text, GetBrandGenerricType(), GetPharmCategoryArray(cmbroute.Text, GetBrandGenerricType()), Panel12, TabStrip1.Height)
      Else
        xList = modStock.FillMedicinesDispensingArrayList(cmbroute.Text, GetBrandGenerricType(), GetPharmTarget(cmbroute.Text), cmbmode.Text)
        cmbmedicine.Text = PharmGridList("Select Particulars", cmbroute.Text, GetBrandGenerricType(), xList, Panel12, TabStrip1.Height)
      Endif

      If Not cmbmedicine.Text Then
        txtdose.SetFocus
      Endif

    Endif

  Endif

End

Private Sub SHowInventoryStatus()

  ' Dim xvarfix As Variant[]
  Dim xcateg As String
  Dim CPharmFix As CFixRatePharmacy

  If GetPharmTarget(cmbroute.Text) Then
    txtinventory.Value = modStock.TotalQTYbyBrand(cmbmedicine.Text, GetPharmTarget(cmbroute.Text))
    If cmbroute.Text = "All" Then
      xcateg = modStock.GetPharmCategoryFromStockName(cmbmedicine.Text, GetPharmTarget(cmbroute.Text))
    Else
      xcateg = modNonMedical.GetBillItemCategoryFromCombo(cmbroute.Text)
    Endif

    CPharmFix = New CFixRatePharmacy(xcateg, cmbmedicine.Text, cmbmode.Text)
    txtitemrate.Value = CPharmFix.GetFixRate()
    txtitemrate.Tag = CPharmFix.GetFixItem()
    If Not txtitemrate.Tag Then
      txtqtymed.Tag = ""
      txtitemrate.Value = modStock.GetCurrentSellingPrice(cmbmedicine.Text, GetPharmTarget(cmbroute.Text))
    Else
      If txtreference.Tag = "Consultation" Or If txtreference.Tag = "Patient Ward" Then
        If $HiCappingVar.Exist(CPharmFix.GetFixCode()) Then
          txtqtymed.Tag = CStr($HiCappingVar[CPharmFix.GetFixCode()] - modNonMedical.GetPatientItemSavedSalesPackage(Trim(txtencid.Text), txtitemrate.Tag, cmbdisctype.Text))
        Else
          If CPharmFix.GetFixCapQTY() Then
            txtqtymed.Tag = CStr(CPharmFix.GetFixCapQTY() - modNonMedical.GetPatientItemAllSalesPackage(Trim(txtencid.Text), txtitemrate.Tag, cmbdisctype.Text))
          Else
            txtqtymed.Tag = ""
          Endif
        Endif
      Else
        txtqtymed.Tag = ""
      Endif
      txtitemrate.Background = Color.Yellow
    Endif
    ' xvarfix = modStock.GetSellingPriceFixByStockID(xcateg, cmbmedicine.Text, cmbmode.Text)
    ' If Not xvarfix Then
    '   txtitemrate.Value = modStock.GetCurrentSellingPrice(cmbmedicine.Text, GetPharmTarget(cmbroute.Text))
    ' Else
    '   txtitemrate.Value = xvarfix[1]
    '   txtitemrate.Tag = xvarfix[0]
    '   txtitemrate.Background = Color.Yellow
    ' Endif

    If modStock.GetCurrentExpiredStockOneComp(cmbmedicine.Text, GetPharmTarget(cmbroute.Text)) = True Then
      txtinventory.Background = Color.Orange
    Endif
  Endif

End

Public Sub txtdose_GotFocus()

  If cmbmedicine.Text Then
    If modStockSub.GetComboControlGeneric(cmbroute.Text, cmbmedicine.Text, modDatabase.$medConn) = False Then
      cmbmedicine.Text = ""
      Balloon.Warning(("Item not listed"), cmbmedicine)
      Balloon.Delay = modBasic.$BalloonDelay
      cmbroute.SetFocus
    Else

      If cmbroute.Text = "suture" Or If cmbroute.Text = "msurg" Or If cmbroute.Text = "ortho" Or If cmbroute.Text = "extra" Then
        SHowInventoryStatus()
        txtdose.Enabled = False
        cmbfreq.Enabled = False
        txtday.Enabled = False
        If CheckDuplicate() = True Then
          txtqtymed.SetFocus
          txtqtymed.SelectAll
        Endif

      Else
        SHowInventoryStatus()
        If modBasic.$MedNoRegimen = "Enable" Then
          txtdose.Enabled = False
          cmbfreq.Enabled = False
          txtday.Enabled = False
          If $HideDos = False Then
            $HideDos = True
            CheckLastDispensing(cmbmedicine.Text)
          Endif
          If CheckDuplicate() = True Then
            txtqtymed.SetFocus
            txtqtymed.SelectAll
          Endif
        Else
          txtdose.Enabled = True
          cmbfreq.Enabled = True
          txtday.Enabled = True

          If modBasic.$MedDoseRecommend = "Yes" Then
            txtdose.Value = modMedDosing.RecommendedDoseDrug(Trim(txtencid.Text), xYear, cmbmedicine.Text)
            cmbfreq.Text = modMedDosing.RecommendedFrequencyDrug(xYear, cmbmedicine.Text)
          Endif

          If $HideDos = False Then
            $HideDos = True
            CheckLastDispensing(cmbmedicine.Text)
          Endif

          If CheckDuplicate() = True Then
            txtdose.SelectAll
          Endif
        Endif  ''if dose regimen enabled
      Endif ''med/surg/extra

    Endif
  Endif

End

Private Sub CheckLastDispensing(xmedicine As String)

  Dim cForm As CLastDispensing
  Dim xdate As Date
  Dim xdays As Integer

  cForm = New CLastDispensing(xmedicine, $PatientNum, $xNHISCode, cmbdisctype.Text)
  txttotalqty.Value = cForm.GetLastQty()
  xdate = cForm.GetLastDate()
  xdays = cForm.GetLastDays()

  If xdate Then
    txtlastdispdate.Text = modReportVar.GetDateTimeReport(xdate, gb.MediumDate)
    If DateDiff(xdate, Now(), gb.Month) <= 3 Then
      txtlastdispdate.Foreground = Color.Red
    Endif

    If xdays Then
      If DateAdd(xdate, gb.Day, xdays) > Now() Then
        Message.Warning("Dispensed for " & xdays & " Days On " & modReportVar.GetDateTimeReport(xdate, gb.GeneralDate), ("OK"))
      Endif
    Endif
  Endif

End

Private Function CheckDuplicate() As Boolean

  Dim xbool As Boolean

  If modGridView.GetItemPresentGrid(GridView3, 3, cmbmedicine.Text) = True Then
    Select modBasic.$BillDuplication
      Case "Inform"
        Balloon.Warning(("Item already punched"), Panel9)
        Balloon.Delay = modBasic.$BalloonDelay
        xbool = True
      Case "Warn"
        Message.Warning("Duplicate Entry", ("OK"))
        xbool = True
      Case "Disable"
        Message.Warning("Duplicate Entry not allowed", ("OK"))
        cmbmedicine.Text = ""
        cmbroute.SetFocus
        xbool = False
      Case Else
        xbool = True
    End Select
  Else
    xbool = True
  Endif

  Return xbool

End

Public Sub cmbfreq_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbfreq)
  modFillContainer.RestrictComboToContent(cmbfreq)

End

Public Sub txtday_GotFocus()

  txtday.SelectAll

End

Public Sub txtday_LostFocus()

  Dim xval As Float

  If txtdose.Value And If cmbfreq.Text Then
    xval = modMedConstant.GetQuantityDosing(cmbmedicine.Text, txtdose.Value, cmbfreq.Text, txtday.Value)
    lblqty.Text = Round(xval, -1)
    txtqtymed.Value = Ceil(xval)
  Endif

End

Public Sub txtqtymed_GotFocus()

  If txtdose.Value And If cmbfreq.Text Then
    If Not txtday.Value Then
      txtday.SetFocus
    Else
      txtqtymed.SelectAll
    Endif
  Endif

End

Public Sub txtqtymed_Change()

  If modBasic.$BillFractionQty = "Disable" Then
    If Frac(txtqtymed.Value) Then
      txtqtymed.Value = Fix(txtqtymed.Value)
    Endif
  Endif

End

Public Sub txtqtymed_LostFocus()

  If txtqtymed.Tag Then
    If txtqtymed.Value > CFloat(txtqtymed.Tag) Then
      txtqtymed.Value = CFloat(txtqtymed.Tag)
    Endif
  Endif

End

Public Sub chksavenew_GotFocus()

  Dim xx As Float
  Dim xmax As Float
  Dim xmsg1 As String
  Dim xmsg2 As String
  Dim xroute As String

  If Not txtqtymed.Value Then
    txtqtymed.SetFocus
  Else

    If cmbroute.Text = "All" Then
      xroute = modStock.GetPharmCategoryFromStockName(cmbmedicine.Text, GetPharmTarget(cmbroute.Text))
    Else
      xroute = modNonMedical.GetBillItemCategoryFromCombo(cmbroute.Text)
    Endif
    xmax = modStock.GetMaximumSales(cmbmedicine.Text, xroute)

    If txtqtymed.Tag Then
      If txtqtymed.Value > CFloat(txtqtymed.Tag) Then
        txtqtymed.Value = CFloat(txtqtymed.Tag)
      Endif
    Else
      If xmax And If xmax < txtqtymed.Value Then
        xmsg1 = ("Max Sale Allowed : ") & xmax & gb.NewLine
      Endif
    Endif

    xx = modStock.GetToDispenseStockOneComp(cmbmedicine.Text, GetPharmTarget(cmbroute.Text), txtday.Value)
    If txtqtymed.Value > xx Then
      xmsg2 = ("Max Stock available : ") & xx
      txtqtymed.SetFocus
    Endif

    If xmsg1 Or If xmsg2 Then
      Balloon.Warning(xmsg1 & xmsg2, txtqtymed)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif

  Endif

End

Public Sub chksavenew_Click()

  If chksavenew.Value Then
    If txtencid.Text And If cmbroute.Text And If cmbmedicine.Text And If txtqtymed.Value Then

      If AllowLockCheckPunching() = True Then
        EnterDosingRecord()
        cmbroute.SetFocus
      Else
        Balloon.Info(("Encounter Locked"), chksavenew)
        Balloon.Delay = modBasic.$BalloonDelay
      Endif

    Endif
  Endif

End

Public Sub chksavenew_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    chksavenew.Value = True
    chksavenew_Click()
  Endif

End

Public Sub btnexpophm_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowMedicationOrder(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

''----------------------------- save entry and display grid ------------------------------
Public Sub btngroup_Click()

  Dim sType As String
  Dim xList As String[]
  Dim xgroup As String
  Dim txprescriber As String
  Dim txpresno As String
  Dim dispmode As String
  Dim res As Result
  Dim xdose As Float
  Dim xtax As Float
  Dim discval As Float
  Dim itemtype As String
  Dim xfixrate As Float
  Dim xfixname As String
  ' Dim xvarfix As Variant[]
  Dim itemmode As String
  Dim xnarcotic As String[]
  Dim CPharmFix As CFixRatePharmacy

  sType = $sTatus
  dispmode = "OPD"

  If AllowLockCheckPunching() = True Then

    xList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldmedgroup) as col from tblproductgroup"))
    xgroup = GridViewNew("select Protocol", xList, False)
    If xgroup Then
      res = modDatabase.$myConn.Exec("select fldroute,flditem,flddose,flddoseunit,fldfreq,fldday,fldqty,fldstart,fldadvice from tblproductgroup where fldmedgroup=&1", xgroup)
      If res.Available Then
        For Each res

          itemtype = modNonMedical.GetBillItemCategoryFromCombo(res["fldroute"])
          CPharmFix = New CFixRatePharmacy(itemtype, res["flditem"], cmbmode.Text)
          xfixrate = CPharmFix.GetFixRate()
          xfixname = CPharmFix.GetFixItem()
          ' xvarfix = modStock.GetSellingPriceFixByStockID(itemtype, res["flditem"], cmbmode.Text)
          ' If xvarfix Then
          '   xfixrate = xvarfix[1]
          '   xfixname = xvarfix[0]
          ' Else
          '   xfixrate = 0
          '   xfixname = ""
          ' Endif
          itemmode = cmbmode.Text
          xtax = modNonMedical.ShowTaxValues(itemtype, res["flditem"])
          discval = modNonMedical.DiscPercentForCategoryValue(Trim(txtencid.Text), cmbdisctype.Text, itemtype, res["flditem"], itemmode)
          If res["fldroute"] = "suture" Or If res["fldroute"] = "msurg" Or If res["fldroute"] = "ortho" Then
            modPharmSub.InsertNonMedDosingEntry("Surgicals", Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, res["fldroute"], res["flditem"], res["fldqty"], sType, res["fldstart"], xtax, discval, xfixname, xfixrate, "UseOwn", dispmode, res["fldadvice"], 0)
          Else If res["fldroute"] = "extra" Then
            modPharmSub.InsertNonMedDosingEntry("Extra Items", Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, res["fldroute"], res["flditem"], res["fldqty"], sType, res["fldstart"], xtax, discval, xfixname, xfixrate, "UseOwn", dispmode, res["fldadvice"], 0)
          Else
            xdose = modMedDosing.GetDoseInMg(res["flddose"], res["flddoseunit"], Trim(txtencid.Text))
            If modMedConstant.GetNarcoticType(res["flditem"]) = "Yes" Then
              xnarcotic = DualGridValue(("Select Narcotic Prescriber"), $ClinicianLst, False)
              If xnarcotic Then
                txprescriber = xnarcotic[1]
                txpresno = xnarcotic[0]
              Endif
            Else
              txprescriber = ""
              txpresno = ""
            Endif
            modPharmSub.InsertDosingEntry(Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, res["fldroute"], res["flditem"], xdose, res["fldfreq"], res["fldday"], res["fldqty"], sType, txprescriber, txpresno, res["fldstart"], xtax, discval, xfixname, xfixrate, "UseOwn", dispmode, res["fldadvice"], 0)
          Endif

        Next
        FillDosingGrid()
      Endif
    Endif

  Else
    Balloon.Info(("Encounter Locked"), btngroup)
    Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Private Sub EnterDosingRecord()

  Dim sType As String
  Dim txprescriber As String
  Dim txpresno As String
  Dim dispmode As String
  Dim xtax As Float
  Dim discval As Float
  Dim itemtype As String
  Dim xfixrate As Float
  Dim xfixname As String
  ' Dim xvarfix As Variant[]
  Dim itemmode As String
  Dim xnarcotic As String[]
  Dim CPharmFix As CFixRatePharmacy

  sType = $sTatus
  dispmode = "OPD"
  If Not cmbdisctype.Text Then
    cmbdisctype.Text = $DiscPackage
  Endif

  If chksavenew.Value = True Then
    If txtencid.Text And If cmbroute.Text And If cmbmedicine.Text And If txtqtymed.Value Then
      If cmbroute.Text = "All" Then
        itemtype = modStock.GetPharmCategoryFromStockName(cmbmedicine.Text, GetPharmTarget(cmbroute.Text))
      Else
        itemtype = modNonMedical.GetBillItemCategoryFromCombo(cmbroute.Text)
      Endif

      If itemtype = "Surgicals" Or If itemtype = "Extra Items" Then
        CPharmFix = New CFixRatePharmacy(itemtype, cmbmedicine.Text, cmbmode.Text)
        xfixrate = CPharmFix.GetFixRate()
        xfixname = CPharmFix.GetFixItem()
        ' xvarfix = modStock.GetSellingPriceFixByStockID(itemtype, cmbmedicine.Text, cmbmode.Text)
        ' If xvarfix Then
        '   xfixrate = xvarfix[1]
        '   xfixname = xvarfix[0]
        ' Else
        '   xfixrate = 0
        '   xfixname = ""
        ' Endif
        itemmode = cmbmode.Text
        xtax = modNonMedical.ShowTaxValues(itemtype, cmbmedicine.Text)
        discval = modNonMedical.DiscPercentForCategoryValue(Trim(txtencid.Text), cmbdisctype.Text, itemtype, cmbmedicine.Text, itemmode)
        Inc Application.Busy
        modPharmSub.InsertNonMedDosingEntry(itemtype, Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, cmbroute.Text, cmbmedicine.Text, txtqtymed.Value, sType, 0, xtax, discval, xfixname, xfixrate, "UseOwn", dispmode, "", 0)
        Dec Application.Busy

      Else
        If modMedConstant.GetNarcoticType(cmbmedicine.Text) = "Yes" Then
          xnarcotic = DualGridValue(("Select Narcotic Prescriber"), $ClinicianLst, False)
          If xnarcotic Then
            txprescriber = xnarcotic[1]
            txpresno = xnarcotic[0]
          Endif
        Else
          txprescriber = ""
          txpresno = ""
        Endif
        CPharmFix = New CFixRatePharmacy(itemtype, cmbmedicine.Text, cmbmode.Text)
        xfixrate = CPharmFix.GetFixRate()
        xfixname = CPharmFix.GetFixItem()
        ' xvarfix = modStock.GetSellingPriceFixByStockID(itemtype, cmbmedicine.Text, cmbmode.Text)
        ' If xvarfix Then
        '   xfixrate = xvarfix[1]
        '   xfixname = xvarfix[0]
        ' Else
        '   xfixrate = 0
        '   xfixname = ""
        ' Endif
        itemmode = cmbmode.Text
        xtax = modNonMedical.ShowTaxValues(itemtype, cmbmedicine.Text)
        discval = modNonMedical.DiscPercentForCategoryValue(Trim(txtencid.Text), cmbdisctype.Text, itemtype, cmbmedicine.Text, itemmode)
        Inc Application.Busy
        modPharmSub.InsertDosingEntry(Trim(txtencid.Text), hPatient.GetCashCreditMode(), cmbmode.Text, cmbdisctype.Text, cmbledgerac.Text, cmbroute.Text, cmbmedicine.Text, txtdose.Value, cmbfreq.Text, txtday.Value, txtqtymed.Value, sType, txprescriber, txpresno, 0, xtax, discval, xfixname, xfixrate, "UseOwn", dispmode, "", 0)                    '
        Dec Application.Busy
      Endif

      If $DefaultPharmType Then
        If $DefaultPharmType = "No Change" Then
        Else
          cmbroute.Text = $DefaultPharmType
          chksavenew.Value = False
        Endif
      Else
        cmbroute.Text = ""
      Endif
      BlankDosingBox()
      FillDosingGrid()
    Endif
  Endif

End

''============================ Pharmacy Grid ========================
Public Sub FillDosingGrid()

  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim xcomp As String

  If chkall.Value Then
    xcomp = "%"
  Else
    xcomp = modBasic.$compID
  Endif
  sql = "select fldid,fldtime_order,fldroute,flditem,flddose,fldfreq,flddays,fldqtydisp,fldlabel,flduserid_order,flddiscper,fldtaxper,fldstarttime,fldfixrate,flddirection,flduserid_order,fldcomp_order,flditemtype,flddisctype,fldbilltype,fldbillingmode,fldcashincredit from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldqtydisp>&3 and fldcomp_order like &4 ORDER BY fldid DESC"                                                   ''
  $rData3 = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), False, 0, xcomp)

  GridView3.Clear
  GridView3.Columns.Count = $rData3.Fields.Count
  GridView3.Rows.Count = $rData3.Count

  For Each $rData3
    Column = 0
    For Each fld In $rData3.Fields
      modGeneralMain.GridExplicitDecoration(GridView3, $rData3.Index, Column)
      If Column = 1 Then
        GridView3[$rData3.Index, Column].Text = modReportVar.GetDateTimeReport($rData3["fldtime_order"], gb.GeneralDate)
      Else If Column = 8 Then
        GridView3[$rData3.Index, Column].Picture = Picture[modMisc.SetGridCheckIcon($rData3["fldlabel"])]
        GridView3[$rData3.Index, Column].Text = ""
      Else If Column = 15 Then
        GridView3[$rData3.Index, Column].Text = modGeneral.GetUserFullName($rData3[fld.Name])
      Else
        GridView3[$rData3.Index, Column].Text = $rData3[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  GridView3.Row = 0

  With GridView3
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 150 * modBasic.$AppWidthRatio
    .Columns[2].Width = 75 * modBasic.$AppWidthRatio
    If modBasic.$MedNoRegimen = "Enable" Then
      .Columns[3].Width = 450 * modBasic.$AppWidthRatio
      .Columns[4].Width = 1
      .Columns[5].Width = 1
      .Columns[6].Width = 1
    Else
      .Columns[3].Width = 350 * modBasic.$AppWidthRatio
      .Columns[4].Width = 75 * modBasic.$AppWidthRatio
      .Columns[5].Width = 50 * modBasic.$AppWidthRatio
      .Columns[6].Width = 50 * modBasic.$AppWidthRatio
    Endif
    .Columns[7].Width = 50 * modBasic.$AppWidthRatio
    .Columns[8].Width = 25 * modBasic.$AppWidthRatio
    .Columns[9].Width = 75 * modBasic.$AppWidthRatio
    .Columns[10].Width = 75 * modBasic.$AppWidthRatio
    .Columns[11].Width = 75 * modBasic.$AppWidthRatio
    .Columns[12].Width = 1
    .Columns[13].Width = 75 * modBasic.$AppWidthRatio
    If modBasic.$MedNoRegimen = "Enable" Then
      .Columns[14].Width = 1
    Else
      .Columns[14].Width = 125 * modBasic.$AppWidthRatio
    Endif
    .Columns[15].Width = 125 * modBasic.$AppWidthRatio
    .Columns[16].Width = 75 * modBasic.$AppWidthRatio
    .Columns[17].Width = 1
    .Columns[18].Width = 125 * modBasic.$AppWidthRatio
    .Columns[19].Width = 75 * modBasic.$AppWidthRatio
    .Columns[20].Width = 1
    .Columns[21].Width = 50 * modBasic.$AppWidthRatio

    .Columns[1].Text = "DateTime"
    .Columns[2].Text = "Route"
    .Columns[3].Text = "Particulars"
    If modBasic.$MedNoRegimen = "Enable" Then
    Else
      .Columns[4].Text = "Dose"
      .Columns[5].Text = "Freq"
      .Columns[6].Text = "Day"
    Endif
    .Columns[7].Text = "QTY"
    .Columns[9].Text = "User"
    .Columns[10].Text = "Disc%"
    .Columns[11].Text = "Tax%"
    .Columns[13].Text = "FixRate"
    If modBasic.$MedNoRegimen = "Enable" Then
    Else
      .Columns[14].Text = "Direction"
    Endif
    .Columns[15].Text = "Requested By"
    .Columns[16].Text = "CompID"
    .Columns[18].Text = "Package"
    .Columns[19].Text = "Mode"
    .Columns[21].Text = "Cash %"
  End With
  TotalDispensedAmount()

End

Private Sub TotalDispensedAmount()

  Dim i As Integer
  Dim amt As Float
  Dim subtot As Float
  Dim xtax As Float
  Dim xdisc As Float
  Dim xval As Float
  Dim discper As Float
  Dim taxper As Float
  Dim xCashCrd As Float
  Dim xCrdForm As Float

  amt = 0
  subtot = 0
  xtax = 0
  xdisc = 0
  xCashCrd = 0
  For i = 0 To GridView3.Rows.Count - 1
    If GridView3[i, 11].Text Then
      taxper = GridView3[i, 11].Text
    Else
      taxper = 0
    Endif
    If GridView3[i, 10].Text Then
      discper = GridView3[i, 10].Text
    Else
      discper = 0
    Endif
    xval = 0
    If GridView3[i, 13].Text And If CFloat(GridView3[i, 13].Text) Then
      xval = CFloat(GridView3[i, 13].Text) * CFloat(GridView3[i, 7].Text)
    Else
      xval = modStock.GetToDispenseCostOneComp(cmbmode.Text, GridView3[i, 3].Text, GetPharmTarget(GridView3[i, 2].Text), CFloat(GridView3[i, 6].Text), CFloat(GridView3[i, 7].Text))
    Endif

    subtot = subtot + xval
    xdisc = xdisc + (xval * (discper / 100))
    xtax = xtax + (xval * (1 - discper / 100) * (taxper / 100))
    amt = amt + (xval * (1 - discper / 100) * (1 + taxper / 100))

    If GridView3[i, 19].Text = "Cash" Then
      xCashCrd = xCashCrd + (xval * (1 - discper / 100) * (1 + taxper / 100))
    Else If GridView3[i, 19].Text = "Credit" Then
      If GridView3[i, 21].Text Then
        xCrdForm = GridView3[i, 21].Text
      Else
        xCrdForm = 0
      Endif
      If xCrdForm Then
        xCashCrd = xCashCrd + ((xCrdForm / 100) * xval * (1 - discper / 100) * (1 + taxper / 100))
      Endif
    Endif
  Next

  txtsubtotalitem.Value = Round(subtot, -2)
  txtdiscitem.Value = Round(xdisc, -2)
  txttotaxitem.Value = Round(xtax, -2)
  txtnetotalitem.Value = Round(amt, -2)
  txtpayitem.Value = Round(xCashCrd, -2)
  txttotnew.Value = txtpaynew.Value + txtpayitem.Value

End

Public Sub GridView3_Click()

  Dim xval As Float
  Dim yval As String
  Dim col As Integer
  Dim row As Integer

  Dim fixtax As String
  Dim fixdisc As String
  Dim xcshCrd As Float
  Dim res As Result

  col = GridView3.Column
  row = GridView3.Row
  If GridView3.Column = 8 Then
    If GridView3[GridView3.Row, 4].Text And If GridView3[GridView3.Row, 5].Text And If GridView3[GridView3.Row, 6].Text Then
      modGridView.CheckUncheckGridWithDB(modDatabase.$myConn, GridView3, 8, "fldlabel", "fldid", "tblpatdosing", GridView3[GridView3.Row, 0].Text)
    Endif

  Else If GridView3.Column = 4 Then
    xval = InputValue(GridView3[GridView3.Row, 3].Text, ("Alter Unit Dose"), GridView3[GridView3.Row, 4].Text)
    If xval > 0 Then
      modPharmSub.UpdateDoseBefDispensing(GridView3[GridView3.Row, 0].Text, xval)
      FillDosingGrid()
    Endif
  Else If GridView3.Column = 5 Then
    yval = InputCombo(GridView3[GridView3.Row, 3].Text, ("Alter Frequency"), modMedicine.FrequencyCombo(), GridView3[GridView3.Row, 5].Text, True)
    If yval Then
      modPharmSub.UpdateFreqBefDispensing(GridView3[GridView3.Row, 0].Text, yval)
      FillDosingGrid()
    Endif
  Else If GridView3.Column = 6 Then
    xval = InputValue(GridView3[GridView3.Row, 3].Text, ("Alter Duration"), GridView3[GridView3.Row, 6].Text)
    If xval > 0 Then
      modPharmSub.UpdateDaysBefDispensing(GridView3[GridView3.Row, 0].Text, xval)
      FillDosingGrid()
    Endif
  Else If GridView3.Column = 7 Then
    xval = InputValue(GridView3[GridView3.Row, 3].Text, ("Alter Quantity"), GridView3[GridView3.Row, 7].Text)
    If xval > 0 Then
      modPharmSub.UpdateQTYBefDispensing(GridView3[GridView3.Row, 0].Text, xval)
      FillDosingGrid()
    Endif

  Else If GridView3.Column = 11 Then
    fixtax = modBasic.$BillFixTax
    If fixtax = "No" Then
      If modBasic.$BillEditTaxDiscForm = "Amount" Then
      Else
        xval = InputValue(GridView3[GridView3.Row, 3].Text, ("Change Tax Percentage"), GridView3[GridView3.Row, 11].Text)
        If xval >= 0 And If xval <= 100 Then
          modPharmSub.UpdateTaxPerDispensing(GridView3[GridView3.Row, 0].Text, xval)
          FillDosingGrid()
        Endif
      Endif
    Endif
  Else If GridView3.Column = 10 Then
    fixdisc = modBasic.$BillFixDisc
    If fixdisc = "No" Then
      If modBasic.$BillEditTaxDiscForm = "Amount" Then
      Else
        xval = InputValue(GridView3[GridView3.Row, 3].Text, ("Change Discount Percentage"), GridView3[GridView3.Row, 10].Text)
        If xval >= 0 And If xval <= 100 Then
          modPharmSub.UpdateDiscPerDispensing(GridView3[GridView3.Row, 0].Text, xval)
          FillDosingGrid()
        Endif
      Endif
    Endif

  Else If GridView3.Column = 21 Then
    If GridView3[GridView3.Row, 19].Text = "Credit" Then
      xcshCrd = InputValue("Provide percentage of Cash from this item", "Cash in Credit", GridView3[GridView3.Row, 21].Text)
      If xcshCrd <= 100 And If xcshCrd >= CFloat(GridView3[GridView3.Row, 21].Text) Then
        res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", GridView3[GridView3.Row, 0].Text)
        If res.Available Then
          res["fldcashincredit"] = xcshCrd
          res["xyz"] = False
          res.Update
          FillDosingGrid()
        Endif
      Endif
    Endif

  Endif
  GridView3.Column = col
  GridView3.Row = row

End

Public Sub btnexpopharm_Click()

  modCHTMLReport.ExportGridToHTML(GridView3, modReportVar.GetDateTimeReport(Date(), gb.MediumDate), "New Pharmacy Report",, Trim(txtencid.Text))

End

Public Sub GridView3_Menu()

  mnupharm.Popup

End

Public Sub mnuselallph_Click()

  Dim i As Integer

  For i = 0 To GridView3.Rows.Count - 1
    If GridView3[i, 4].Text And If GridView3[i, 5].Text And If GridView3[i, 6].Text Then
      GridView3[i, 8].Picture = Picture["icons/checked.png"]
    Endif
  Next

End

Public Sub mnudselalph_Click()

  Dim i As Integer

  For i = 0 To GridView3.Rows.Count - 1
    GridView3[i, 8].Picture = Picture["icons/unchecked.png"]
  Next

End

Public Sub mnuphmbulkdisc_Click()

  Dim fixdisc As String
  Dim xval As Float
  Dim i As Integer

  fixdisc = modBasic.$BillFixDisc
  If fixdisc = "No" Then
    If modBasic.$BillEditTaxDiscForm = "Amount" Then
    Else
      xval = InputValue(("Edit Discount Percentage for all Rows"), ("Change Discount Percentage"), 0)

      If xval > 0 And If xval <= 100 Then
        For i = 0 To GridView3.Rows.Count - 1
          modPharmSub.UpdateDiscPerDispensing(GridView3[i, 0].Text, xval)
        Next
      Endif
      FillDosingGrid()

    Endif
  Endif

End

Public Sub mnupackphmall_Click()

  Dim res As Result
  Dim res1 As Result
  Dim xpack As String
  Dim Row As Integer
  Dim pckList As String[]

  If modBasic.$BillAlterPackage = "Yes" Or If modBasic.$BillAlterPackage = "Partial" Then
    If modBasic.$BillAlterPackage = "Yes" Then
      pckList = modBasic.$BillDiscountAll
    Else If modBasic.$BillAlterPackage = "Partial" Then
      pckList = modBasic.$BillDiscountCash
    Endif
    xpack = InputCombo("Select Package", Trim(txtencid.Text), pckList, "", True)
    If xpack Then
      res1 = modDatabase.$myConn.Exec("select fldbillingmode,fldacledger,fldreference,fldbilltype from tbldiscount where fldtype=&1", xpack)
      If res1.Available Then
        For Row = 0 To GridView3.Rows.Count - 1
          res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", GridView3[Row, 0].Text)
          res["flddisctype"] = xpack
          If res1["fldbilltype"] Then
            res["fldbilltype"] = res1["fldbilltype"]
          Endif
          If res1["fldbillingmode"] Then
            res["fldbillingmode"] = res1["fldbillingmode"]
          Endif
          If res1["fldacledger"] Then
            res["fldacledger"] = res1["fldacledger"]
          Endif
          If res["fldcashincredit"] Then
          Else
            res["fldcashincredit"] = 0
          Endif
          res.Update
        Next
        FillDosingGrid()
      Endif
    Endif
  Endif

End

Public Sub mnucashpharm_Click()

  Dim sql As String
  Dim res As Result
  Dim xcrdt As Float
  Dim xtotal As Float

  Dim xnewval As Float
  Dim xperc As Float
  Dim res1 As Result
  Dim xcomp As String

  Dim taxper As Float
  Dim discper As Float
  Dim xval As Float

  If chkall.Value Then
    xcomp = "%"
  Else
    xcomp = modBasic.$compID
  Endif

  xcrdt = 0
  xtotal = 0
  sql = "select fldid,flditemtype,fldroute,flditem,flddays,fldqtydisp,flddiscper,fldtaxper,fldfixrate,flddisctype,fldbilltype,fldbillingmode,fldcashincredit from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldqtydisp>&3 and fldcomp_order like &4 and flddisctype=&5 and fldbilltype=&6"
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), False, 0, xcomp, cmbdisctype.Text, "Credit")
  If res.Available Then
    For Each res
      If res["fldtaxper"] Then
        taxper = res["fldtaxper"]
      Else
        taxper = 0
      Endif
      If res["flddiscper"] Then
        discper = res["flddiscper"]
      Else
        discper = 0
      Endif

      xval = 0
      If res["fldfixrate"] Then
        xval = CFloat(res["fldfixrate"]) * CFloat(res["fldqtydisp"])
      Else
        xval = modStock.GetToDispenseCostOneComp(cmbmode.Text, res["flditem"], GetPharmTarget(res["fldroute"]), CFloat(res["flddays"]), CFloat(res["fldqtydisp"]))
      Endif

      If res["fldcashincredit"] Then
        xcrdt = xcrdt + (res["fldcashincredit"] / 100) * xval
      Endif
      xtotal = xtotal + xval
    Next
  Endif

  If xtotal Then
    xnewval = InputValue("Total Cash Amount to collect from Credit Invoice of this scheme", "Cash in Credit Amount", xcrdt)
    If xnewval <= xtotal And If xnewval >= xcrdt Then
      xperc = Round((xnewval * 100) / xtotal, -2)
      For Each res
        res1 = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", res["fldid"])
        res1["fldcashincredit"] = xperc
        res1["xyz"] = False
        res1.Update
      Next
      FillDosingGrid()
    Endif
  Else
    Message.Warning("No Credit Amount", "OK")
  Endif

End

Public Sub mnudelph_Click()

  If GridView3.Rows.Selection.Count > 0 Then
    modDatabase.$myConn.Delete("tblpatdosing", "fldid=&1 and fldsave_order=&2", GridView3[GridView3.Row, 0].Text, False)
    FillDosingGrid()
  Endif

End

Public Sub mnudelallph_Click()

  Dim i As Integer

  For i = 0 To GridView3.Rows.Count - 1
    modDatabase.$myConn.Delete("tblpatdosing", "fldid=&1 and fldsave_order=&2", GridView3[i, 0].Text, False)
  Next
  FillDosingGrid()

End

Public Sub mnustock_Click()

  Dim hForm As FRequest
  Dim sql As String
  Dim res As Result

  If GridView3.Rows.Selection.Count > 0 Then
    sql = "select fldstockno,fldstockid,fldbatch,fldexpiry,fldqty,fldsellpr,fldstatus,fldcomp from tblentry where fldstockid=&1"
    res = modDatabase.$myConn.Exec(sql, GridView3[GridView3.Row, 3].Text)
    If res.Available Then
      hForm = New FRequest(res, GridView3[GridView3.Row, 3].Text, "StockDB", False)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnucost_Click()

  Dim xx As String
  Dim cstamt As Float
  Dim discper As Float
  Dim taxper As Float

  If GridView3.Rows.Selection.Count > 0 Then
    cstamt = modStock.GetToDispenseCostOneComp(cmbmode.Text, GridView3[GridView3.Row, 3].Text, GetPharmTarget(GridView3[GridView3.Row, 2].Text), CFloat(GridView3[GridView3.Row, 6].Text), CFloat(GridView3[GridView3.Row, 7].Text))
    taxper = GridView3[GridView3.Row, 11].Text
    discper = GridView3[GridView3.Row, 10].Text

    xx = "<b>" & GridView3[GridView3.Row, 3].Text & "</b>" & "<br>"
    xx = xx & "Item Cost: " & modReportVar.GetLocaleNumberFormat(cstamt, gb.Currency) & "<br>"
    xx = xx & "Tax: " & modReportVar.GetLocaleNumberFormat(cstamt * taxper / 100, gb.Currency) & "<br>"
    xx = xx & "Disc: " & modReportVar.GetLocaleNumberFormat(cstamt * discper / 100, gb.Currency) & "<br>"
    xx = xx & "Total: " & modReportVar.GetLocaleNumberFormat(cstamt * (1 - discper / 100) * (1 + taxper / 100), gb.Currency)
    Message.Info(xx, ("OK"))
  Endif

End

Public Sub mnuclearmed_Click()

  If GridView3.Rows.Selection.Count > 0 Then
    If Message.Question(("Do you want to send out of pharmacy ?"), ("No"), ("Yes")) = 2 Then
      modPharmSub.UpdateDispensing(GridView3[GridView3.Row, 0].Text, True)
    Endif
    FillDosingGrid()
  Endif

End

''========================= Pharmacy Save =============================
Private Function GetHICapGo(sFixCode As String, sFixItem As String, sQty As Float, sDiscType As String) As Boolean

  Dim xgo As Boolean
  Dim xmax As Float

  xgo = True
  If sFixCode Then
    If $HiCappingVar.Exist(sFixCode) Then

      If Not $HiCappingVar[sFixCode] Then
        xgo = False
      Else
        xmax = $HiCappingVar[sFixCode] - modNonMedical.GetPatientItemSavedSalesPackage(Trim(txtencid.Text), sFixItem, sDiscType)
        If xmax < sQty Then
          xgo = False
        Endif
      Endif

    Endif
  Endif

  Return xgo

End

Private Sub PharmacySave()

  Dim sql1 As String
  Dim res1 As Result

  Dim tax As Float
  Dim disc As Float
  Dim xrate As Float
  Dim xitem As String

  Dim res2 As Result
  Dim sql2 As String
  Dim qtynew As Float

  Dim patno As String
  Dim xerr As String
  Dim xallow As Boolean
  Dim xCshCrd As Float
  Dim xcomp As String
  Dim xfixcode As String

  If chkall.Value Then
    xcomp = "%"
  Else
    xcomp = modBasic.$compID
  Endif

  If txtencid.Text Then
    patno = $PatientNum
    xerr = ""

    If modBasic.$BillAlterPharmStock = "No" Then
    Else
      sql1 = "select fldid,fldtime,fldroute,flditem,flddose,fldfreq,flddays,fldqtydisp,fldlabel,flditemtype,fldfixname,fldfixrate,fldtaxper,flddiscper,fldbillingmode,flddisctype,fldacledger,fldbilltype,fldcashincredit from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldqtydisp>&3 and fldbilltype=&4 and fldacledger=&5 and fldcomp_order like &6"                                                   ''
      res1 = modDatabase.$myConn.Exec(sql1, Trim(txtencid.Text), False, 0, hPatient.GetCashCreditMode(), cmbledgerac.Text, xcomp)
      If res1.Available = True Then
        If GetPharmTarget(res1["fldroute"]) Then

          Inc Application.Busy
          For Each res1
            'get tax and discount percentages
            If res1["fldtaxper"] Then
              tax = res1["fldtaxper"]
            Else
              tax = 0
            Endif
            If res1["flddiscper"] Then
              disc = res1["flddiscper"]
            Else
              disc = 0
            Endif
            If res1["fldcashincredit"] Then
              xCshCrd = res1["fldcashincredit"]
            Else
              xCshCrd = 0
            Endif

            If res1["fldfixrate"] Then
              xrate = res1["fldfixrate"]
            Else
              xrate = modStock.GetCurrentSellingPrice(res1["flditem"], GetPharmTarget(res1["fldroute"]))
            Endif
            xallow = modNonMedical.AllowPharmProceedPreBill(Trim(txtencid.Text), res1["flddisctype"], res1["fldqtydisp"], xrate, res1["flddiscper"], res1["fldbilltype"], xCshCrd, res1["fldroute"], res1["flditem"])
            If xallow = True Then
              xfixcode = modNonMedical.GetBillItemHIAbbv(res1["fldfixname"], res1["flditemtype"])
              If GetHICapGo(xfixcode, res1["fldfixname"], res1["fldqtydisp"], res1["flddisctype"]) = True Then
                If xfixcode And If $HiCappingVar.Exist(xfixcode) Then
                  $HiCappingVar[xfixcode] = $HiCappingVar[xfixcode] - res1["fldqtydisp"]
                Endif

                qtynew = res1["fldqtydisp"]
                modDatabase.$myConn.Begin
                While qtynew > 0
                  'get stockno, rate and quantity based on expiry check
                  If modBasic.$SkipExpiry = "ExpireOnUse" Then
                    sql2 = "select fldstockno,fldqty from tblentry where fldstockid=&1 and fldcomp=&2 and fldstatus=&3 and fldexpiry>&4 and fldqty>&5"
                    res2 = modDatabase.$myConn.Exec(sql2, res1["flditem"], GetPharmTarget(res1["fldroute"]), 1, DateAdd(modDate.StartSqlDate(Now()), gb.Day, CInt(res1["flddays"])), 0)
                  Else If modBasic.$SkipExpiry = "Expired" Then
                    sql2 = "select fldstockno,fldqty from tblentry where fldstockid=&1 and fldcomp=&2 and fldstatus=&3 and fldexpiry>&4 and fldqty>&5"
                    res2 = modDatabase.$myConn.Exec(sql2, res1["flditem"], GetPharmTarget(res1["fldroute"]), 1, modDate.StartSqlDate(Now()), 0)
                  Else
                    sql2 = "select fldstockno,fldqty from tblentry where fldstockid=&1 and fldcomp=&2 and fldstatus=&3 and fldqty>&4"
                    res2 = modDatabase.$myConn.Exec(sql2, res1["flditem"], GetPharmTarget(res1["fldroute"]), 1, 0)
                  Endif
                  If res2.Available Then
                    res2.MoveFirst

                    xitem = res1["flditem"]
                    If res1["fldfixname"] Then
                      xitem = res1["fldfixname"]
                      If res1["fldfixrate"] Then
                        xrate = res1["fldfixrate"]
                      Else
                        xrate = 0
                      Endif
                    Else
                      xrate = modStock.GetSellingPriceByStockNo(res2["fldstockno"], res1["fldbillingmode"])
                    Endif

                    If qtynew <= res2["fldqty"] Then
                      modBillings.InsertBlankBillItemNewApp(Trim(txtencid.Text), res1["fldbilltype"], res1["fldbillingmode"], res1["flddisctype"], res1["fldacledger"], res1["flditemtype"], res2["fldstockno"], xitem, xrate, qtynew, tax, disc, xCshCrd, "Done", res1["fldid"], True, False)
                      modStockSub.AddToExistEntry(res2["fldstockno"], (0 - qtynew), GetPharmTarget(res1["fldroute"]))
                      qtynew = 0
                    Else If qtynew > res2["fldqty"] Then
                      modBillings.InsertBlankBillItemNewApp(Trim(txtencid.Text), res1["fldbilltype"], res1["fldbillingmode"], res1["flddisctype"], res1["fldacledger"], res1["flditemtype"], res2["fldstockno"], xitem, xrate, res2["fldqty"], tax, disc, xCshCrd, "Done", res1["fldid"], True, False)
                      modStockSub.AddToExistEntry(res2["fldstockno"], (0 - res2["fldqty"]), GetPharmTarget(res1["fldroute"]))
                      qtynew = qtynew - res2["fldqty"]
                    Endif
                    Wait
                  Else
                    Break
                  Endif
                Wend

                If qtynew > 0 Then
                  modPharmSub.DuplicateRecordWithQTY(res1["fldid"], qtynew)
                  modPharmSub.UpdateQTYBefDispensing(res1["fldid"], res1["fldqtydisp"] - qtynew)
                Endif
                modPharmSub.UpdateDispensing(res1["fldid"], False)
                modDatabase.$myConn.Commit

              Else
                xerr = xerr & "Cap Limit exceeded for " & res1["fldfixname"] & gb.NewLine
              Endif
            Else
              xerr = xerr & res1["fldfixname"] & gb.NewLine
            Endif
          Next
          Dec Application.Busy
          If xerr Then
            Balloon.Warning("<b>Over Set Discount/Credit Limit:</b>" & gb.NewLine & xerr, GridView3)
          Endif

        Endif
      Endif
    Endif

  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

Public Sub btncopycode_Click()

  Clipboard.Copy(txtreference.Text)

End

Public Sub btncopypatno_Click()

  If txtencid.Text Then
    If $xNHISCode Then
      Clipboard.Copy($xNHISCode)
    Endif
  Endif

End

Public Sub btncrdstate_Click()

  Dim xrefer As String
  Dim xmsg As String

  If cmbdisctype.Text Then
    Inc Application.Busy
    xrefer = modNonMedical.GetFixedReferenceScheme(cmbdisctype.Text)
    If xrefer = "Claim Code" Then
      xmsg = modClaim.CheckIMISStatus(Trim(txtencid.Text))
    Else If xrefer = "Accident SSF" Then
      xmsg = modSSF.CheckSSFStatus(Trim(txtencid.Text), "Accident SSF")
    Else If xrefer = "Critical SSF" Then
      xmsg = modSSF.CheckSSFStatus(Trim(txtencid.Text), "Critical SSF")
    Else If xrefer = "Medical SSF" Then
      xmsg = modSSF.CheckSSFStatus(Trim(txtencid.Text), "Medical SSF")
    Endif
    Dec Application.Busy
    If xmsg Then
      Message.Warning(xmsg, "OK")
    Endif
  Endif

End

Public Sub mnuclear_Click()

  Dim xexpense As Integer
  Dim xdeposit As Float

  If txtencid.Text Then
    If $xFinClear = True Then
      Message.Warning(("Discharge Lock already done"), ("OK"))
    Else
      If $sTatus = "Admitted" Then
      Else
        If Message.Question("Discharge Lock will disable further billing. Are you sure?", ("No"), ("OK")) = 2 Then

          xexpense = modNonMedical.TotalUnpaidCountPatient(modDatabase.$myConn, Trim(txtencid.Text))
          xdeposit = modNonMedical.GetPatientDeposit(modDatabase.$myConn, Trim(txtencid.Text))
          If xexpense = 0 And If xdeposit = 0 Then
            modPatientSub.EnterPatientImpDate(Trim(txtencid.Text), "Clearance", "")
            $xFinClear = modNonMedical.GetFinanceClearance(Trim(txtencid.Text))
            lblstatus.Text = ShowCurrStatus($sTatus)
            If $xFinClear = True Then
              TabStrip1.Enabled = False
              Panel2.Enabled = False
            Endif
            Message.Info(("Discharge Lock completed"), ("OK"))
          Else
            Message.Warning(("Please invoice Pending items"), ("OK"))
          Endif

        Endif
      Endif
    Endif
  Endif

End

Public Sub mnugenreport_Click()

  Dim res As Result
  Dim hForm As FRequest

  If txtencid.Text Then
    res = modDatabase.$syConn.Exec("select fldid,fldtime,fldencounterval,fldtitle,flddetail,fldsave,fldlink,fldencounterval from tblpatreport where fldcateg=&1 and fldencounterval like &2 and (flvisible=&3 or flvisible IS NULL) ORDER BY fldid DESC", "General Reports", Trim(txtencid.Text), "Visible")
    hForm = New FRequest(res, ("General Reports"), "ArchivedReports", False)
    hForm.ShowModal
  Endif

End

''------------------- For Diagnosis ----------------
Public Sub btndiuser_Click()

  Dim xMedUser As String[]

  xMedUser = MedicalSelectedTwo(("Select Consultant User"), modBasic.$OPConsultCodeList)
  If xMedUser And If xMedUser.Count Then
    btndiuser.Tag = xMedUser[0]
    btndiuser.Text = xMedUser[1]
  Endif

End

Public Sub btnaddicd_Click()

  Dim sName As String[]

  If txtencid.Text Then
    If btndiuser.Tag Then
      sName = ICDGridView("Select Diseases")
      If sName Then
        txtsearch.Text = sName[0]
        txtcode.Text = sName[1]
        txtcodeold.Text = sName[2]
        If txtsearch.Text And If txtcode.Text Then
          If btndiuser.Tag Then
            modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), txtsearch.Text, txtcode.Text, txtcodeold.Text, btndiuser.Tag)
          Else
            modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), txtsearch.Text, txtcode.Text, txtcodeold.Text)
          Endif
          If txtreference.Tag = "Consultation" Or If txtreference.Tag = "Patient Ward" Then
            GetHImedicineCappingVar()
          Endif
          Balloon.Info(("Information saved"), txtcode)
          Balloon.Delay = modBasic.$BalloonDelay
          cmbtype.SetFocus
        Endif
      Endif
    Else
      Message.Warning("No Consultant selected", "OK")
    Endif
  Endif

End

Public Sub txtsearch_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    btnaddicd_Click()
  Endif

End

Public Sub btnadddiagno_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    btnaddicd_Click()
  Endif

End

Private Sub SHowDiagnosis()

  Dim res As Result

  If txtencid.Text Then
    res = modDatabase.$syConn.Exec("select fldcode,fldcodeid,fldcodenew,flduserid from tblpatfindings where fldencounterval=&1 and fldtype=&2 and fldsave=&3", Trim(txtencid.Text), "Provisional Diagnosis", True)
    If res.Available Then
      res.MoveLast
      txtsearch.Text = res["fldcode"]
      txtcode.Text = res["fldcodenew"]
      txtcodeold.Text = res["fldcodeid"]
      btndiuser.Tag = res["flduserid"]
      If res["flduserid"] Then
        btndiuser.Text = modGeneral.GetUserFullName(res["flduserid"])
      Endif
    Endif
  Endif

End

Private Sub ClearQRCodeExt()

  Dim Row As Integer
  Dim res As Result

  For Row = 0 To GridView1.Rows.Count - 1
    res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1 and fldsave=&2 and fldprint=&3", GridView1[Row, 0].Text, False, False)
    If res.Available Then
      res["fldextracol"] = ""
      res.Update
    Endif
  Next

  For Row = 0 To GridView3.Rows.Count - 1
    res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1 and fldsave_order=&2", GridView3[Row, 0].Text, False)
    If res.Available Then
      res["fldextracol"] = ""
      res.Update
    Endif
  Next

End

Public Sub mnuclearqrscan_Click()

  ClearQRCodeExt()
  Message.Info("QR Code cleared", "OK")

End

''===================== HI Claim Upload =================
Public Sub mnuimisclaim_Click()

  If cmbdisctype.Text = modBasic.$HIPackage Or If cmbdisctype.Text = modBasic.$HIPackageER Then
    UploadHIClaimAuto()
  Endif

End

Private Sub AutoClaimProcedure(sType As String[])

  Dim hForm As FmScanForm
  Dim hForm1 As FmCreateReport
  Dim hForm2 As FmUploadReport

  AutoClaimIMIS(cmbdisctype.Text, sType)
  If modBasic.$ClaimAutoDocs = "Enable" Then
    AutoUploadClaimDocs(cmbdisctype.Text, txtreference.Text, sType)
  Else If modBasic.$ClaimAutoDocs = "AutoScan" Then
    AutoUploadClaimDocs(cmbdisctype.Text, txtreference.Text, sType)
    If hPatient.$StickerMode = True Then
    Else
      hForm = New FmScanForm(Trim(txtencid.Text), "Scanned Images", cmbdisctype.Text & "|" & txtreference.Text)
      hForm.ShowModal
    Endif
  Else If modBasic.$ClaimAutoDocs = "AutoDocs" Then
    AutoUploadClaimDocs(cmbdisctype.Text, txtreference.Text, sType)
    If hPatient.$StickerMode = True Then
    Else
      hForm1 = New FmCreateReport(Trim(txtencid.Text), cmbdisctype.Text & "|" & txtreference.Text)
      hForm1.ShowModal
    Endif
  Else If modBasic.$ClaimAutoDocs = "AddDocs" Then
    AutoUploadClaimDocs(cmbdisctype.Text, txtreference.Text, sType)
    If hPatient.$StickerMode = True Then
    Else
      hForm2 = New FmUploadReport(Trim(txtencid.Text), cmbdisctype.Text & "|" & txtreference.Text)
      hForm2.ShowModal
    Endif
  Endif

End

Private Sub UploadHIClaimAuto()

  If modBasic.$IMISAutoClaim = "Consultation" Then
    If modClaim.GetHIClaimState(txtreference.Text) = "Consultation" Then
      If cmbdisctype.Text = modBasic.$HIPackage Or If cmbdisctype.Text = modBasic.$HIPackageER Then
        AutoClaimProcedure(["Consultation"])
      Endif
    Endif

  Else If modBasic.$IMISAutoClaim = "Emergency" Then
    If modClaim.GetHIClaimState(txtreference.Text) = "Emergency" Then
      If cmbdisctype.Text = modBasic.$HIPackageER Then
        AutoClaimProcedure(["Emergency"])
      Endif
    Endif

  Else If modBasic.$IMISAutoClaim = "Both" Then
    AutoClaimProcedure(["Consultation", "Emergency"])

  Endif

End

Private Sub AutoUploadClaimDocs(sPackage As String, sClaim As String, TypeLst As String[])

  Dim sType As String
  Dim xacc As String
  Dim res As Result
  Dim sInvList As String[]

  Dim aOutPath As String
  Dim xinvoice As String
  Dim xFilePath As String

  Inc Application.Busy
  For Each sType In TypeLst
    xacc = ""
    xacc = modNonMedical.GetLedgerFromDiscount(sPackage)

    sInvList = New String[]
    res = modDatabase.$myConn.Exec("select fldbillno from tblpatbilldetail where fldencounterval=&1 and fldbankname=&2 and fldchequeno=&3 and fldchequeno in(select fldclaimid from tblclaimcode where fldstatus=&4) and fldbillno not in(select fldbillno from tblbillupload)", Trim(txtencid.Text), xacc, sClaim, sType)
    If res.Available Then
      For Each res
        sInvList.Add(res["fldbillno"])
      Next

      aOutPath = ""
      xinvoice = ""
      xFilePath = ""
      xFilePath = modClaimAPI.GetHIInvoiceReceiptData(sInvList)
      Wait
      If Exist(xFilePath) Then
        aOutPath = modClaimAPI.UploadImagesFilesClaimServerHI(sClaim, xFilePath, modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory))
        If aOutPath = xFilePath Then
          For Each xinvoice In sInvList
            modAccount.InsertClaimInvoice(xinvoice)
          Next
        Endif
      Endif

    Endif
  Next
  Dec Application.Busy

End

Private Sub AutoClaimIMIS(sPackage As String, TypeList As String[])

  Dim sType As String
  Dim xfldList As String[]
  Dim xacc As String
  Dim rex As Result
  Dim sql As String
  Dim res1 As Result

  Dim aCode As String
  Dim sColl As Collection
  Dim xSNo As Variant[]
  Dim hForm As CimisAPIClaim
  Dim xout As String
  Dim xmsg As String

  Dim ySNo As Variant[]
  Dim hForm1 As CimisAPIClaim
  Dim xout1 As String
  Dim xmsg1 As String

  Dim xdiagno As String
  Dim regLst As String[] = ["EMRT", "OPD4", "ER01", "OPD01"]

  Inc Application.Busy
  xfldList = ["flditemname", "CONCAT(flditemtype,'|', flditemname) as flditemcode", "flditemname", "AVG(flditemrate) as flditemrate", "SUM(flditemqty) as flditemqty", "SUM(fldditemamt) as fldditemamt", "GROUP_CONCAT(DISTINCT fldid) as fldid", "flditemtype"]
  For Each sType In TypeList
    xacc = ""
    xacc = modNonMedical.GetLedgerFromDiscount(sPackage)
    If xacc Then
      If modBasic.$IMISICDForm = "ICD10" Then
        rex = modDatabase.$myConn.Exec("select fldcode,flduserid from tblpatfindings where fldencounterval=&1 and (fldtype=&2 or fldtype=&3) and fldsave=&4 and fldcodeid<>&5 and fldcodeid<>&6 and flduserid in(select flduserid from tbluser where fldusercode like &7)", Trim(txtencid.Text), "Provisional Diagnosis", "Final Diagnosis", True, "Obstetrics", "Other", "%")
      Else
        rex = modDatabase.$myConn.Exec("select fldcode,flduserid from tblpatfindings where fldencounterval=&1 and (fldtype=&2 or fldtype=&3) and fldsave=&4 and fldcodenew<>&5 and fldcodenew<>&6 and flduserid in(select flduserid from tbluser where fldusercode like &7)", Trim(txtencid.Text), "Provisional Diagnosis", "Final Diagnosis", True, "Obstetrics", "Other", "%")
      Endif
      If rex.Available Then
        rex.MoveLast
        If rex["fldcode"] And If rex["flduserid"] Then
          xdiagno = "Diagnosis"
        Else
          xdiagno = ""
        Endif
      Else
        xdiagno = "No Diagnosis"
      Endif  ''diagnosis

      If xdiagno Then
        sql = "select " & xfldList.Join(",") & " from tblpatbilling where fldencounterval=&1 and fldbillno in(select fldbillno from tblpatbilldetail where fldbankname=&2 and fldbilltype like &3 and fldchequeno=&4 and fldchequeno in(select fldclaimid from tblclaimcode where fldtime>=&5 and fldtime<=&6 and fldstatus like &7)) and fldclaimstate IS NULL GROUP BY flditemname HAVING SUM(flditemqty)>&8"
        res1 = modDatabase.$syConn.Exec(sql, Trim(txtencid.Text), xacc, "Credit", txtreference.Text, modDate.StartSqlDate(Now()), modDate.EndSqlDate(Now()), sType, 0)
        If res1.Available Then

          xSNo = New Variant[]
          ySNo = New Variant[]
          For Each res1
            aCode = ""
            aCode = modClaimAPI.GetBillingItemAbbvName(res1["flditemcode"])
            If aCode Then
              If res1["flditemqty"] Then
                sColl = New Collection
                sColl.Add(aCode, "code")
                sColl.Add(res1["flditemname"], "item")
                sColl.Add(res1["flditemrate"], "rate")
                sColl.Add(res1["flditemqty"], "qty")
                sColl.Add(res1["fldditemamt"], "total")
                sColl.Add(res1["fldid"], "index")
                sColl.Add(res1["flditemtype"], "type")
                sColl.Add("tblpatbilling", "table")
                If regLst.Exist(aCode) Then
                  ySNo.Add(sColl)
                Else
                  xSNo.Add(sColl)
                Endif
              Endif
            Endif
          Next

          If ySNo.Count Then
            hForm1 = New CimisAPIClaim($xNHISCode, Trim(txtencid.Text), txtreference.Text, True)
            hForm1.AddBilling(ySNo)
            xout1 = hForm1.UploadClaim()
            xmsg1 = modClaimAPI.GetClaimOutRecording(ySNo, xout1, "tblpatbilling")
          Endif
          If xSNo.Count Then
            If xdiagno = "Diagnosis" Then
              hForm = New CimisAPIClaim($xNHISCode, Trim(txtencid.Text), txtreference.Text, False)
              hForm.AddBilling(xSNo)
              xout = hForm.UploadClaim()
              xmsg = modClaimAPI.GetClaimOutRecording(xSNo, xout, "tblpatbilling")
            Endif
          Endif

        Endif
      Endif  ''diagnosis

    Endif  ''Ledger
  Next   ''category
  Dec Application.Busy

End

Private Sub GetHImedicineCappingVar()

  Dim hForm As CimisAPICap

  If cmbdisctype.Text = modBasic.$HIPackage Or If cmbdisctype.Text = modBasic.$HIPackageER Then
    If modBasic.$IMISValidateURL Then

      If modClaim.GetChronicClaimStatus(Trim(txtencid.Text)) = True Then
        If $HiCappingVar.Count Then
          $HiCappingVar.Clear()
        Endif
      Else
        If Not $HiCappingVar.Count Then
          Inc Application.Busy
          hForm = New CimisAPICap($xNHISCode)
          $HiCappingVar = hForm.GetMedicineLimits()
          $HiCapAPIView = hForm.GetCapValidationItems()
          Dec Application.Busy
        Endif
      Endif

    Endif
  Endif

End

Public Sub mnumedhilimit_Click()

  Dim xx As String

  xx = GetTextArea("API Output", modDevAll.GetJsonFormat(JSON.Encode($HiCapAPIView)))

End
