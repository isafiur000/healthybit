' Gambas class file

Public Sub Form_Open()

  Dim xFile As String

  Me.Center
  cmbtype.List = ["sqlite3", "mysql", "postgresql", "odbc"]
  cmbtype2.List = ["sqlite3", "mysql", "postgresql", "odbc"]
  cmbtype3.List = ["sqlite3", "mysql", "postgresql", "odbc"]
  cmbinterface.List = modApplication.GetNetworkInterfaceList()
  cmbcomp.List = modMisc.CompIDList()

  If MMain.$SISHAppMode = "REP" Then
    cmbengine.List = ["InnoDB", "Columnstore"]
  Else
    cmbengine.Text = "InnoDB"
    cmbengine.Enabled = False
  Endif

  TabPanel1.Enabled = False
  db.Debug = True
  xFile = modHelpVariable.AppDirectory &/ modHelpVariable.AppName & ".conf"
  If Not Exist(xFile) Then
    File.Save(xFile, "")
  Endif
  If MMain.$GovtApp = "Yes" Then
    chkird.Value = False
  Endif

  ''for IRD approved
  modHelpVariable.$IRDLevel = "Yes"
  chkird.Value = True
  chkird.Enabled = False
  chkird_Click()

  txthospitalname.SetFocus

End

Public Sub Form_KeyRelease()

  modGeneralmain.GoToNextControlTab()

End

Public Sub Form_Close()

  ''closing  connection disconnects several forms in Admin desk

End

Public Sub txtimagpath_Click()

  Dialog.Filter = ["*.jpg;*.jpeg;*.png;*.bmp", "Picture files"]
  If Dialog.OpenFile() Then Return
  Try txtimagpath.Text = Dialog.Path

End

Public Sub ToolButton1_Click()

  modControlSub.OpenBrowser(modControlSub.ShowSettingValue(modHelpVariable.$appWebconfFile, "Help/" & Me.Name))

End

Public Sub btnimport_Click()

  Dim sPass As String

  If Not Exist(modHelpVariable.$SysConfigPath) Then
    sPass = InputPassword(("Enter Password for Super User"), ("Super User"), "")

    Inc Application.Busy
    modExternal.DeleteFolderRecursive(modHelpVariable.AppDirectory)
    modExternal.CopyFromFolderToFolder(User.Home &/ ".config/sishgambas", modHelpVariable.AppDirectory)
    If Exist(modHelpVariable.AppDirectory &/ "sishsettings.conf") Then
      If Exist(modHelpVariable.AppDirectory &/ "appsettings.conf") Then
        Kill modHelpVariable.AppDirectory &/ "appsettings.conf"
      Endif
      Move modHelpVariable.AppDirectory &/ "sishsettings.conf" To modHelpVariable.AppDirectory &/ "appsettings.conf"
    Endif
    If Exist(modHelpVariable.AppDirectory &/ "sishvariable.conf") Then
      If Exist(modHelpVariable.AppDirectory &/ "appvariable.conf") Then
        Kill modHelpVariable.AppDirectory &/ "appvariable.conf"
      Endif
      Move modHelpVariable.AppDirectory &/ "sishvariable.conf" To modHelpVariable.AppDirectory &/ "appvariable.conf"
    Endif
    modExternal.ReplaceFileAsRoot("/etc/sishgambas/sishgambas.conf", modHelpVariable.$appetcFolder, sPass)
    Wait
    Shell "echo \"" & sPass & "\" | " & "sudo -S " & "mv " & modHelpVariable.$appetcFolder &/ "sishgambas.conf" & Space(1) & modHelpVariable.$appetcConfFile Wait
    Dec Application.Busy
  Endif

End

Public Sub btncomponent_Click()

  modApplSub.InstallSelectedApplication(modApplSub.EssentialAppText())

End

Public Sub btncomponent2_Click()

  modApplSub.InstallSelectedApplication(modApplSub.OptionalAppText())

End

Public Sub cmbcomp_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbcomp)

End

Private Function ShowSysSettingFromFIleNew(strSetting As String) As String

  Dim strVal As String

  strVal = modControlSub.ShowSettingValue(modHelpVariable.AppDirectory &/ modHelpVariable.AppName & ".conf", strSetting)
  Return strVal

End

Public Sub btnshow_Click()

  Dim xfile As String
  Dim xssl As String
  Dim xird As String
  Dim xvat As String
  Dim ftssl As String

  If modHelpVariable.$FIrstTimeSetting = True Then
    txtdbcreate.Text = ShowSysSettingFromFIleNew("System/Database")
    txtdbrestore.Text = ShowSysSettingFromFIleNew("System/Database")
    cmbcollation.Text = ShowSysSettingFromFIleNew("System/DBCollation")
    cmbengine.Text = ShowSysSettingFromFIleNew("System/DBEngine")
    cmbinterface.Text = ShowSysSettingFromFIleNew("System/NetInterface")
    xssl = ShowSysSettingFromFIleNew("System/UseOpenSSL")
    If xssl = "Yes" Then
      chkssl.Value = True
    Else
      chkssl.Value = False
    Endif

    cmbtype.Text = ShowSysSettingFromFIleNew("System/Service")
    txtserver.Text = ShowSysSettingFromFIleNew("System/Host")
    txtuser.Text = ShowSysSettingFromFIleNew("System/User")
    txtpass.Text = modPassword.DecryptDBPass(ShowSysSettingFromFIleNew("System/Password"), chkssl.Value)
    txtport.Text = ShowSysSettingFromFIleNew("System/Port")

    cmbtype2.Text = ShowSysSettingFromFIleNew("SystemExtra/Service")
    txtserver2.Text = ShowSysSettingFromFIleNew("SystemExtra/Host")
    txtuser2.Text = ShowSysSettingFromFIleNew("SystemExtra/User")
    txtpass2.Text = modPassword.DecryptDBPass(ShowSysSettingFromFIleNew("SystemExtra/Password"), chkssl.Value)
    txtport2.Text = ShowSysSettingFromFIleNew("SystemExtra/Port")

    cmbtype3.Text = ShowSysSettingFromFIleNew("SystemFallback/Service")
    txtserver3.Text = ShowSysSettingFromFIleNew("SystemFallback/Host")
    txtuser3.Text = ShowSysSettingFromFIleNew("SystemFallback/User")
    txtpass3.Text = modPassword.DecryptDBPass(ShowSysSettingFromFIleNew("SystemFallback/Password"), chkssl.Value)
    txtport3.Text = ShowSysSettingFromFIleNew("SystemFallback/Port")

    txthospitalname.Text = ShowSysSettingFromFIleNew("Hospital/Hospital")
    txtaddress.Text = ShowSysSettingFromFIleNew("Hospital/Address")
    txtdepartment.Text = ShowSysSettingFromFIleNew("Hospital/Department")
    cmbcomp.Text = ShowSysSettingFromFIleNew("Hospital/ComputerID")
    txtimagpath.Text = ShowSysSettingFromFIleNew("Hospital/Logo")
    xird = ShowSysSettingFromFIleNew("Hospital/IRDCompliance")
    If xird = "Yes" Then
      chkird.Value = True
    Else
      chkird.Value = False
    Endif
    xvat = ShowSysSettingFromFIleNew("Hospital/VATRegistration")
    If xvat = "Yes" Then
      chkvat.Value = True
    Else
      chkvat.Value = False
    Endif

    txtlocalhost.Text = ShowSysSettingFromFIleNew("LocalFTP/Host")
    txtlocalfolder.Text = ShowSysSettingFromFIleNew("LocalFTP/Folder")
    txtlocaluser.Text = ShowSysSettingFromFIleNew("LocalFTP/User")
    txtlocalpass.Text = modPassword.DecryptDBPass(ShowSysSettingFromFIleNew("LocalFTP/Password"), chkssl.Value)
    ftssl = ShowSysSettingFromFIleNew("LocalFTP/EnableSSL")
    If ftssl = "Yes" Then
      chklocalssl.Value = True
    Else
      chklocalssl.Value = False
    Endif

  Else If modHelpVariable.$FIrstTimeSetting = False Then
    xfile = modHelpVariable.GetConfigSettingFIle()
    txtdbcreate.Text = modControlSub.ShowSettingValue(xfile, "System/Database")
    txtdbrestore.Text = modControlSub.ShowSettingValue(xfile, "System/Database")
    cmbcollation.Text = modControlSub.ShowSettingValue(xfile, "System/DBCollation")
    cmbengine.Text = modControlSub.ShowSettingValue(xfile, "System/DBEngine")
    cmbinterface.Text = modControlSub.ShowSettingValue(xfile, "System/NetInterface")
    xssl = modControlSub.ShowSettingValue(xfile, "System/UseOpenSSL")
    If xssl = "Yes" Then
      chkssl.Value = True
    Else
      chkssl.Value = False
    Endif

    cmbtype.Text = modControlSub.ShowSettingValue(xfile, "System/Service")
    txtserver.Text = modControlSub.ShowSettingValue(xfile, "System/Host")
    txtuser.Text = modControlSub.ShowSettingValue(xfile, "System/User")
    txtpass.Text = modPassword.DecryptDBPass(modControlSub.ShowSettingValue(xfile, "System/Password"), chkssl.Value)
    txtport.Text = modControlSub.ShowSettingValue(xfile, "System/Port")

    cmbtype2.Text = modControlSub.ShowSettingValue(xfile, "SystemExtra/Service")
    txtserver2.Text = modControlSub.ShowSettingValue(xfile, "SystemExtra/Host")
    txtuser2.Text = modControlSub.ShowSettingValue(xfile, "SystemExtra/User")
    txtpass2.Text = modPassword.DecryptDBPass(modControlSub.ShowSettingValue(xfile, "SystemExtra/Password"), chkssl.Value)
    txtport2.Text = modControlSub.ShowSettingValue(xfile, "SystemExtra/Port")

    cmbtype3.Text = modControlSub.ShowSettingValue(xfile, "SystemFallback/Service")
    txtserver3.Text = modControlSub.ShowSettingValue(xfile, "SystemFallback/Host")
    txtuser3.Text = modControlSub.ShowSettingValue(xfile, "SystemFallback/User")
    txtpass3.Text = modPassword.DecryptDBPass(modControlSub.ShowSettingValue(xfile, "SystemFallback/Password"), chkssl.Value)
    txtport3.Text = modControlSub.ShowSettingValue(xfile, "SystemFallback/Port")

    txthospitalname.Text = modControlSub.ShowSettingValue(xfile, "Hospital/Hospital")
    txtaddress.Text = modControlSub.ShowSettingValue(xfile, "Hospital/Address")
    txtdepartment.Text = modControlSub.ShowSettingValue(xfile, "Hospital/Department")
    cmbcomp.Text = modControlSub.ShowSettingValue(xfile, "Hospital/ComputerID")
    txtimagpath.Text = modControlSub.ShowSettingValue(xfile, "Hospital/Logo")
    xird = modControlSub.ShowSettingValue(xfile, "Hospital/IRDCompliance")
    If xird = "Yes" Then
      chkird.Value = True
    Else
      chkird.Value = False
    Endif
    xvat = modControlSub.ShowSettingValue(xfile, "Hospital/VATRegistration")
    If xvat = "Yes" Then
      chkvat.Value = True
    Else
      chkvat.Value = False
    Endif

    txtlocalhost.Text = modControlSub.ShowSettingValue(xfile, "LocalFTP/Host")
    txtlocalfolder.Text = modControlSub.ShowSettingValue(xfile, "LocalFTP/Folder")
    txtlocaluser.Text = modControlSub.ShowSettingValue(xfile, "LocalFTP/User")
    txtlocalpass.Text = modPassword.DecryptDBPass(modControlSub.ShowSettingValue(xfile, "LocalFTP/Password"), chkssl.Value)
    ftssl = modControlSub.ShowSettingValue(xfile, "LocalFTP/EnableSSL")
    If ftssl = "Yes" Then
      chklocalssl.Value = True
    Else
      chklocalssl.Value = False
    Endif

    Try Kill xfile
  Endif

End

''------------------------ main server -------------------------------------
Public Sub cmbtype_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbtype)
  modFillContainer.RestrictComboToContent(cmbtype)

End

Public Sub cmbtype_Click()

  If cmbtype.Text = "sqlite3" Then
    txtserver.Text = User.Home
    txtuser.Enabled = False
    txtpass.Enabled = False
  Else
    txtserver.Text = ""
    txtuser.Enabled = True
    txtpass.Enabled = True
  Endif

End

Public Sub chkuser_Click()

  If chkuser.Value = True Then
    txtuser.Password = False
  Else If chkuser.Value = False Then
    txtuser.Password = True
  Endif

End

Public Sub chkpass_Click()

  If chkpass.Value = True Then
    txtpass.Password = False
  Else If chkpass.Value = False Then
    txtpass.Password = True
  Endif

End

Public Sub btnnewconn_Click()

  Dim xCollationList As String[]

  modDatabase.$myConn = modDBApp.OpenConnection(cmbtype.Text, txtserver.Text, "", txtuser.Text, txtpass.text)
  If modDatabase.$myConn.Opened = True Then
    conshow.Picture = Picture[modMisc.GetGridIcon(False)]
    TabPanel1.Enabled = True
    cmbdbclient.List = modDBApp.GetAllDBonServer(modDatabase.$myConn)
    If cmbtype.Text = "mysql" Then
      Try xCollationList = modDatabase.$myConn.Collations
      If xCollationList Then
        cmbcollation.List = xCollationList
      Endif
    Endif
  Else
    conshow.Picture = Picture[modMisc.GetGridIcon(True)]
  Endif
  If MMain.$Ayurveda = "Yes" Then
    cmbcollation.Text = "utf8_general_ci"
  Endif

End

''---------------------------- Extra server ------------------------------------
Public Sub cmbtype2_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbtype2)
  modFillContainer.RestrictComboToContent(cmbtype2)

End

Public Sub cmbtype2_Click()

  If cmbtype2.Text = "sqlite3" Then
    txtserver2.Text = User.Home
    txtuser2.Enabled = False
    txtpass2.Enabled = False
  Else
    txtserver2.Text = ""
    txtuser2.Enabled = True
    txtpass2.Enabled = True
  Endif

End

Public Sub chkuser2_Click()

  If chkuser2.Value = True Then
    txtuser2.Password = False
  Else If chkuser2.Value = False Then
    txtuser2.Password = True
  Endif

End

Public Sub chkpass2_Click()

  If chkpass2.Value = True Then
    txtpass2.Password = False
  Else If chkpass2.Value = False Then
    txtpass2.Password = True
  Endif

End

''----------------------------- Local FTP --------------------------------------------
Public Sub chklocaluser_Click()

  If chklocaluser.Value = True Then
    txtlocaluser.Password = False
  Else If chklocaluser.Value = False Then
    txtlocaluser.Password = True
  Endif

End

Public Sub chklocalpass_Click()

  If chklocalpass.Value = True Then
    txtlocalpass.Password = False
  Else If chklocalpass.Value = False Then
    txtlocalpass.Password = True
  Endif

End

Public Sub chkuser3_Click()

  If chkuser3.Value = True Then
    txtuser3.Password = False
  Else If chkuser3.Value = False Then
    txtuser3.Password = True
  Endif

End

Public Sub chkpass3_Click()

  If chkpass3.Value = True Then
    txtpass3.Password = False
  Else If chkpass3.Value = False Then
    txtpass3.Password = True
  Endif

End

Public Sub btnnewconn2_Click()

  modDatabase.$syConn = modDBApp.OpenConnection(cmbtype2.Text, txtserver2.Text, "", txtuser2.Text, txtpass2.text)
  If modDatabase.$syConn.Opened = True Then
    conshow2.Picture = Picture[modMisc.GetGridIcon(False)]
  Else
    conshow2.Picture = Picture[modMisc.GetGridIcon(True)]
  Endif

End

Public Sub btnnewconn3_Click()

  modDatabase.$syConn = modDBApp.OpenConnection(cmbtype3.Text, txtserver3.Text, "", txtuser3.Text, txtpass3.text)
  If modDatabase.$syConn.Opened = True Then
    conshow3.Picture = Picture[modMisc.GetGridIcon(False)]
  Else
    conshow3.Picture = Picture[modMisc.GetGridIcon(True)]
  Endif

End

''---------------------------------- Database setting and saving ----------------------------------------
Private Sub SaveSysSettingsToFile(strSetting As String, strVal As String)

  Dim ConfFile As Settings

  ConfFile = New Settings(modHelpVariable.AppDirectory &/ modHelpVariable.AppName & ".conf")
  ConfFile[strSetting] = Trim(strVal)

End

Private Sub UpdateConfFile(dbFile As String)

  Dim xssl As String
  Dim xird As String
  Dim xvat As String
  Dim ftssl As String

  If cmbcomp.Text Then
    SaveSysSettingsToFile("Hospital/Hospital", txthospitalname.Text)
    SaveSysSettingsToFile("Hospital/Address", txtaddress.Text)
    SaveSysSettingsToFile("Hospital/Department", txtdepartment.Text)
    SaveSysSettingsToFile("Hospital/ComputerID", cmbcomp.Text)
    SaveSysSettingsToFile("Hospital/Logo", txtimagpath.Text)
    If chkird.Value = True Then
      xird = "Yes"
    Else
      xird = "No"
    Endif
    SaveSysSettingsToFile("Hospital/IRDCompliance", xird)
    If chkvat.Value = True Then
      xvat = "Yes"
    Else
      xvat = "No"
    Endif
    SaveSysSettingsToFile("Hospital/VATRegistration", xvat)

    SaveSysSettingsToFile("System/Database", dbFile)
    SaveSysSettingsToFile("System/DBCollation", cmbcollation.Text)
    SaveSysSettingsToFile("System/DBEngine", cmbengine.Text)
    SaveSysSettingsToFile("System/NetInterface", cmbinterface.Text)
    If chkssl.Value = True Then
      xssl = "Yes"
    Else
      xssl = "No"
    Endif
    SaveSysSettingsToFile("System/UseOpenSSL", xssl)

    SaveSysSettingsToFile("System/Service", cmbtype.Text)
    SaveSysSettingsToFile("System/Host", txtserver.Text)
    SaveSysSettingsToFile("System/User", txtuser.Text)
    SaveSysSettingsToFile("System/Password", modPassword.EncryptDBPass(txtpass.Text, chkssl.Value))
    SaveSysSettingsToFile("System/Port", txtport.Text)

    SaveSysSettingsToFile("SystemExtra/Service", cmbtype2.Text)
    SaveSysSettingsToFile("SystemExtra/Host", txtserver2.Text)
    SaveSysSettingsToFile("SystemExtra/User", txtuser2.Text)
    SaveSysSettingsToFile("SystemExtra/Password", modPassword.EncryptDBPass(txtpass2.Text, chkssl.Value))
    SaveSysSettingsToFile("SystemExtra/Port", txtport2.Text)

    SaveSysSettingsToFile("SystemFallback/Service", cmbtype3.Text)
    SaveSysSettingsToFile("SystemFallback/Host", txtserver3.Text)
    SaveSysSettingsToFile("SystemFallback/User", txtuser3.Text)
    SaveSysSettingsToFile("SystemFallback/Password", modPassword.EncryptDBPass(txtpass3.Text, chkssl.Value))
    SaveSysSettingsToFile("SystemFallback/Port", txtport3.Text)

    SaveSysSettingsToFile("LocalFTP/Host", txtlocalhost.Text)
    SaveSysSettingsToFile("LocalFTP/Folder", txtlocalfolder.Text)
    SaveSysSettingsToFile("LocalFTP/User", txtlocaluser.Text)
    SaveSysSettingsToFile("LocalFTP/Password", modPassword.EncryptDBPass(txtlocalpass.Text, chkssl.Value))
    If chklocalssl.Value = True Then
      ftssl = "Yes"
    Else
      ftssl = "No"
    Endif
    SaveSysSettingsToFile("LocalFTP/EnableSSL", ftssl)

    Message.Info(("Information updated"), ("OK"))
  Endif

End

Private Sub SaveSettingToRegistry()

  Dim sPass As String
  Dim xdir As String
  Dim xPath As String
  Dim xfile As String

  xfile = modHelpVariable.AppName & ".conf"
  If chkencrypt.Value = True Then
    If System.Exist("7z") Then
      xdir = modHelpVariable.AppCacheDir
      modExternal.CreateNewCacheFile(xdir, xfile)
      modDevAll.Get7ZCompression(modHelpVariable.AppDirectory &/ xfile, modHelpVariable.$CryptZip, xdir &/ xfile & ".7z")
      xPath = xdir &/ xfile & ".7z"
      Kill modHelpVariable.AppDirectory &/ xfile
    Else
      xPath = modHelpVariable.AppDirectory &/ xfile
      modApplSub.InstallSelectedApplication(["p7zip-full"])
    Endif
  Else
    xPath = modHelpVariable.AppDirectory &/ xfile
  Endif

  sPass = InputPassword(("Enter Password for Super User"), ("Super User"), "")
  modPassword.$HostLoginPassword = sPass
  modExternal.ReplaceFileAsRoot(xPath, modHelpVariable.$appetcFolder, sPass)
  Wait
  If Exist(xdir) Then
    modExternal.DeleteFolderRecursive(xdir)
  Endif

End

'''------------------ create new db ---------------------------------
Public Sub btnhospudate_Click()

  If txthospitalname.Text And If cmbcomp.Text Then
    UpdateConfFile(txtdbcreate.Text)
    btnsave.Enabled = True
  Endif

End

Public Sub btnsave_Click()

  SaveSettingToRegistry()

End

Public Sub btndbcreate_Click()

  Dim xx As String

  If Message.Question("Do you want to create a new database ?", "No", "Yes") = 2 Then
    If Exist(modHelpVariable.$appetcFolder &/ modHelpVariable.AppName & ".conf") Then
      If cmbtype.Text = "odbc" Then
        CreateMSSQLDB()

      Else
        If modDatabase.$myConn.Opened = False Then
          modDatabase.$myConn = modDBApp.OpenConnection(cmbtype.Text, txtserver.Text, "", txtuser.Text, txtpass.text)
        Else If modDatabase.$myConn.Opened = True Then
          If Not modDatabase.$myConn.Databases.Exist(txtdbcreate.Text) Then
            modDatabase.$myConn.Databases.Add(txtdbcreate.Text)
            Message.Info(("Database creation completed. Wait ...."), ("OK"))
          Endif
          modDatabase.CloseDatabase()
        Endif

      Endif

      modHelpVariable.SetAppConfigFile()
      xx = modSettings.ShowSettingFromFIle("SISH_Connection/ConnectionType")
      If xx = "Remote" Then
        Message.Warning(("Connection Type is set to Remote. Please remove appsettings.conf and try again"), ("OK"))
      Else
        modHelpVariable.ConnectionMain()
        If modDatabase.$myConn.Opened = True Then
          db.Debug = True

          If cmbtype.Text = "odbc" Then
          Else
            Inc Application.Busy
            If cmbengine.Text Then
              modDBTables.$DbEngine = cmbengine.Text
            Endif
            modDBTables.$DbFormat = MMain.$SISHAppMode
            If MMain.$SISHAppMode = "REP" Then  ''remoteoptimized
              modDBGroup.CreateDatabaseForSish(modDatabase.$myConn)
              Message.Info(("Tables creation completed"), ("OK"))
            Else
              modDBGroup.CreateDatabaseForSish(modDatabase.$myConn)
              Message.Info(("Tables creation completed"), ("OK"))
              If chkird.Value = True Then
                modDatabase.CreateIRDTriggerBilling(modDatabase.$myConn)
                modDatabase.CreateIRDTriggerLockEvent(modDatabase.$myConn)
              Endif
            Endif
            Dec Application.Busy
          Endif

          fmExecute.ShowModal
        Endif
      Endif
    Endif
  Endif

End

'''--------------------------------------- back up db ----------------------------------------
Public Sub btnhospudate2_Click()

  UpdateConfFile(txtdbrestore.Text)
  btnsave2.Enabled = True

End

Public Sub btnsave2_Click()

  SaveSettingToRegistry()

End

Public Sub txtrestore_Click()

  If chkdumprepo.Value = True Then
    If Dialog.SelectDirectory() Then Return
    txtrestore.Text = Dialog.Path
  Else
    Dialog.Filter = ["*.sql", "SQL Files"]
    If Dialog.OpenFile() Then Return
    txtrestore.Text = Dialog.Path
  Endif

End

Public Sub btnrestore_Click()

  Dim scon As Connection

  Dim xFile As String
  Dim xTable As Table

  If Exist(modHelpVariable.$appetcFolder &/ modHelpVariable.AppName & ".conf") Then
    If cmbtype.Text Then
      scon = modDBApp.OpenConnection(cmbtype.Text, txtserver.Text, "", txtuser.Text, txtpass.text)
      If Not scon.Databases.Exist(txtdbrestore.Text) Then
        scon.Databases.Add(txtdbrestore.Text)
        Message.Info(("Database created. Wait for Table restoration ...."), ("OK"))
        Wait
      Endif
      Try scon.Close()

      If txtrestore.Text Then
        Inc Application.Busy
        If chkdumprepo.Value = True Then
          For Each xFile In Dir(txtrestore.Text, Null, gb.File)
            modDBApp.RestoreBackup(cmbtype.Text, txtserver.Text, txtdbrestore.Text, txtuser.Text, txtpass.Text, Quote(txtrestore.Text &/ xFile))
          Next
        Else
          modDBApp.RestoreBackup(cmbtype.Text, txtserver.Text, txtdbrestore.Text, txtuser.Text, txtpass.Text, Quote(txtrestore.Text))                                                            ''
        Endif
        Dec Application.Busy
        Wait
        Message.Info(("Restore completed"), ("OK"))

        scon = modDBApp.OpenConnection(cmbtype.Text, txtserver.Text, txtdbrestore.Text, txtuser.Text, txtpass.text)
        If scon.Opened Then
          If chkdumprepo.Value = True Then
            Inc Application.Busy
            For Each xTable In scon.Tables
              modDatabase.GetImportRepoDumpTable(scon, xTable.Name)
            Next
            modDBTables.$DbFormat = MMain.$SISHAppMode
            modDBGroup.CreateDatabaseForSish(scon)
            Dec Application.Busy
            Wait
          Endif

          If modHelpVariable.$IRDLevel = "Yes" Then
            modHelpVariable.RecordIRDActivity(scon, "Database Restore", "", "RESTORE", "")
          Endif
        Endif

      Endif
    Endif
  Endif

End

'''---------------------------- client Access ---------------------------------
Public Sub btnhospudate3_Click()

  UpdateConfFile(cmbdbclient.Text)
  btnsave3.Enabled = True

End

Public Sub btnsave3_Click()

  SaveSettingToRegistry()

End

Public Sub btnacess_Click()

  Dim res As Result

  If chkaccess.Value = True Then
    modDatabase.CloseDatabase()
    modHelpVariable.SetAppConfigFile()
    modHelpVariable.ConnectionMain()
    If modDatabase.$myConn.Opened = True Then
      res = modDatabase.$myConn.Create("tblmacaccess")
      res["fldhostmac"] = modApplication.GetMACAddress()
      res["fldhostuser"] = System.User.Name
      res["fldhostpass"] = Base64(modPassword.$HostLoginPassword)
      res["fldhostip"] = modApplication.GetLocalIP()
      res["fldhostname"] = System.Host
      res["fldcomp"] = cmbcomp.Text
      res["fldcompname"] = "Empty"
      res["fldaccess"] = "Inactive"
      res["fldiptype"] = "Dynamic"
      res["fldcode"] = modGeneral.GetMaxMacAddCode()
      res.Update()
      Message.Info(("Access requested"), ("OK"))
    Else
      Message.Warning(("Couldnot connect to database"), ("OK"))
    Endif
  Endif

End

Public Sub txtdbcreate_KeyPress()

  modGeneralMain.InputTextKeyOnly()

End

Public Sub txtdbrestore_KeyPress()

  modGeneralMain.InputTextKeyOnly()

End

''================================ ODBC Database (MSSQL) ========================================
Private Sub CreateMSSQLDB()

  Dim arcmd As String[]
  Dim ascmd As String
  Dim xserver As String

  xserver = InputBox("Put Host for " & txtserver.Text & " DSN", "ODBC", "")
  If xserver Then
    arcmd = New String[]
    arcmd.Add("Execute following commands in Terminal and click Proceed")
    arcmd.Add("sqlcmd -S " & xserver & " -U " & txtuser.Text & " -P " & txtpass.Text)
    arcmd.Add("1> CREATE DATABASE " & txtdbcreate.Text)
    arcmd.Add("2> GO")
    arcmd.Add("1> QUIT")
    If Message.Question(arcmd.Join(gb.NewLine), "Quit", "Proceed") = 2 Then
      Message.Info(("Database created. Wait for Table restoration ...."), ("OK"))
      ascmd = "/opt/mssql-tools/bin/sqlcmd -S " & xserver & " -U " & txtuser.Text & " -P " & txtpass.Text & " -d " & txtdbcreate.Text & " -i " & modHelpVariable.AppDirectory &/ "mssql"
      modBasic.DebugString(ascmd)
      Shell ascmd Wait
    Endif
  Endif

End

''================== FOR IRD ONLY ==============================
Public Sub chkird_Click()

  If chkird.Value = True Then
    lbllocation.Text = "PAN"
  Else If chkird.Value = False Then
    lbllocation.Text = "Location"
  Endif

End

Public Sub txtdepartment_LostFocus()

  If chkird.Value = True Then
    If Len(txtdepartment.Text) <> 9 Then
      txtdepartment.Text = ""
    Endif
  Endif

End
