' Gambas class file

Private $rData As Result
Private $aMyFields As String[]
Private $searchName As String

Private $MSurgicalLst As String[]
Private $ExtraItemLst As String[]
Private $OralBrandLst As String[]
Private $OralGenricLst As String[]
Private $InjBrandLst As String[]
Private $InjGenricLst As String[]
Private $LiqBrandLst As String[]
Private $LiqGenricLst As String[]

Public Sub Form_Open()

  Dim xcont As Control
  Dim OBSwatchall As Observer

  modGeneralMain.ArrangeEmbedForms(Me, Panel1, "Vertical")
  Me.Icon = Picture[modGeneralMain.$strLogo]
  If modBasic.$FocusBackColor Then
    For Each xcont In Me.Controls
      OBSwatchall = New Observer(xcont) As "WatchAll"
    Next
  Endif

  dtpurdate.Value = Now()
  dtexpiry.Value = Date(Year(Now()), Month(Now()), 1)
  mnusorting.Checked = False

  cmbroute.List = modMedicine.ComboRoute()
  cmbvendor.List = modSupplier.FillVendorNameCombo("Active")
  cmbtype.List = ["Cash Payment", "Credit Payment"]
  If modBasic.$PurCompList Then
    cmbfixdepart.Text = modBasic.$PurCompList
    cmbfixdepart.Enabled = False
  Else
    cmbfixdepart.List = modMedicine.GetExtraDepartments()
  Endif
  DisplayDefaultPurchaseMode()
  modSettings.ShowCheckBox(chkpurestrict, "PurchaseForm/Restriction")
  modSettings.ShowCheckBox(chkopening, "PurchaseForm/OpeningStock")

  IniateCategoryPharmArray()
  GetOpeningFormat()
  BlanKVnedor()
  BlankALl()
  If modBasic.$AccessPurchaseEntry = "Disable" Then
    mnusqve.Enabled = False
  Endif
  txtporder.SetFocus

End

Public Sub WatchAll_GotFocus()

  Last.Background = modBasic.$FocusBackColor

End

Public Sub WatchAll_LostFocus()

  Last.Background = Color.Default

End

Public Sub Form_Resize()

  modGeneralMain.ShowSelectedFormMenu(Me)

End

Public Sub Form_Close()

  modGeneralMain.RecordFormExit(Me)

End

Public Sub Form_KeyRelease()

  modGeneralmain.GoToNextControlTab()

End

Public Sub rbgeneric_Click()

  modSettings.SaveSettingsToFile("BrandOrGeneric/Purchase", "Generic")

End

Public Sub rbrand_Click()

  modSettings.SaveSettingsToFile("BrandOrGeneric/Purchase", "Brand")

End

Public Sub chkpurestrict_Click()

  modSettings.EnterCheckSetting(chkpurestrict, "PurchaseForm/Restriction")

End

Private Sub DisplayDefaultPurchaseMode()

  Dim def As String

  def = modSettings.ShowSettingFromFIle("BrandOrGeneric/Purchase")
  modStockSub.GetBrandgenericSettingOption(def, rbrand, rbgeneric)

End

Public Sub cmbroute_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbroute)
  modFillContainer.RestrictComboToContent(cmbroute)

End

Public Sub cmbvendor_Click()

  txtvendor.Text = modSupplier.GetAddFromSuppName(cmbvendor.Text)
  ShowPurchaseGrid()

End

Private Sub BlanKVnedor()

  dtpurdate.Value = Now()
  cmbtype.Text = ""
  cmbvendor.Text = ""
  txtbillno.Text = ""
  txtvendor.Text = ""
  txtsubtot.Value = 0
  txtfindisc.Value = 0
  txtfintax.Value = 0
  txtadjust.Value = 0
  txtfinamt.Value = 0
  txtreference.Text = ""
  txtporder.Text = ""

  dtpurdate.Enabled = True
  cmbtype.Enabled = True
  cmbvendor.Enabled = True
  txtbillno.Enabled = True
  txtvendor.Enabled = True
  txtporder.Enabled = True

End

Private Sub BlankALl()

  cmbmedicine.Text = ""
  cmbroute.Text = ""
  txtbatch.Text = ""
  dtexpiry.Value = Date(Year(Now()), Month(Now()), 1)
  txtcomment.Text = ""

  txtcarycost.Value = 0
  txtcasbonus.Value = 0
  txtcasdisc.Value = 0
  txtcursell.Value = 0
  txtdistcost.Value = 0
  txtmrp.Value = 0
  txtnetcost.Value = 0
  txtnewsell.Value = 0
  txtprofit.Value = 0
  txtqtybonus.Value = 0
  txttotalcost.Value = 0
  txttotax.Value = 0
  txttotqty.Value = 0

  txtvendor.ReadOnly = True
  txtcursell.ReadOnly = True
  txtfinamt.ReadOnly = True
  txtreference.ReadOnly = True

End

Private Function GetBrandGenerricType() As String

  Dim brandOrGeneric As String

  If rbrand.Value = True Then
    brandOrGeneric = "Brand"
  Else
    brandOrGeneric = "Generic"
  Endif
  Return brandOrGeneric

End

''--------------------- Array for Items to Load ----------------------------
Private Sub IniateCategoryPharmArray()

  $MSurgicalLst = New String[]
  $ExtraItemLst = New String[]
  $OralBrandLst = New String[]
  $OralGenricLst = New String[]
  $InjBrandLst = New String[]
  $InjGenricLst = New String[]
  $LiqBrandLst = New String[]
  $LiqGenricLst = New String[]

End

Private Function GetCategoryArray(sRoute As String, sMode As String) As String[]

  Dim xarry As String[]

  If sRoute = "oral" Then
    If sMode = "Brand" Then
      If Not $OralBrandLst.Count Then
        $OralBrandLst.Insert(modControlSub.GetDirectFillresult(modStock.ItemListForPurchaseResult(sRoute, sMode)))
      Endif
      xarry = $OralBrandLst
    Else If sMode = "Generic" Then
      If Not $OralGenricLst.Count Then
        $OralGenricLst.Insert(modControlSub.GetDirectFillresult(modStock.ItemListForPurchaseResult(sRoute, sMode)))
      Endif
      xarry = $OralGenricLst
    Endif

  Else If sRoute = "liquid" Then
    If sMode = "Brand" Then
      If Not $LiqBrandLst.Count Then
        $LiqBrandLst.Insert(modControlSub.GetDirectFillresult(modStock.ItemListForPurchaseResult(sRoute, sMode)))
      Endif
      xarry = $LiqBrandLst
    Else If sMode = "Generic" Then
      If Not $LiqGenricLst.Count Then
        $LiqGenricLst.Insert(modControlSub.GetDirectFillresult(modStock.ItemListForPurchaseResult(sRoute, sMode)))
      Endif
      xarry = $LiqGenricLst
    Endif

  Else If sRoute = "injection" Then
    If sMode = "Brand" Then
      If Not $InjBrandLst.Count Then
        $InjBrandLst.Insert(modControlSub.GetDirectFillresult(modStock.ItemListForPurchaseResult(sRoute, sMode)))
      Endif
      xarry = $InjBrandLst
    Else If sMode = "Generic" Then
      If Not $InjGenricLst.Count Then
        $InjGenricLst.Insert(modControlSub.GetDirectFillresult(modStock.ItemListForPurchaseResult(sRoute, sMode)))
      Endif
      xarry = $InjGenricLst
    Endif

  Else If sRoute = "msurg" Then
    If Not $MSurgicalLst.Count Then
      $MSurgicalLst.Insert(modControlSub.GetDirectFillresult(modStock.ItemListForPurchaseResult(sRoute, sMode)))
    Endif
    xarry = $MSurgicalLst

  Else If sRoute = "extra" Then
    If Not $ExtraItemLst.Count Then
      If cmbfixdepart.Text Then
        $ExtraItemLst.Insert(modControlSub.GetDirectFillresult(modStock.ItemListForPurchaseResult(sRoute, sMode, cmbfixdepart.Text)))
      Else
        $ExtraItemLst.Insert(modControlSub.GetDirectFillresult(modStock.ItemListForPurchaseResult(sRoute, sMode)))
      Endif
    Endif
    xarry = $ExtraItemLst

  Else
    xarry = modControlSub.GetDirectFillresult(modStock.ItemListForPurchaseResult(sRoute, sMode))
  Endif

  Return xarry

End

Public Sub cmbfixdepart_Click()

  $ExtraItemLst.Clear()

End
''-------------------------------- END ------------------------------------

Public Sub cmbmedicine_GotFocus()

  Dim res As Result

  If Not cmbroute.Text Then
    cmbroute.SetFocus
  Else If cmbroute.Text Then
    If Not cmbmedicine.Text Then

      txtbatch.Tag = "Auto"
      If chkpurestrict.Value = True And If Len(Trim(txtporder.Text)) Then
        res = modStock.ItemListForPurchaseOrder(cmbroute.Text, cmbvendor.Text, Trim(txtporder.Text))
        cmbmedicine.Text = GridViewNew("Select Particulars", modControlSub.GetDirectFillresult(res), False, cmbmedicine, Panel3.Height + GridView1.Height - cmbmedicine.Top)
      Else
        If modBasic.$AppCacheGridViewData = "No" Then
          If cmbfixdepart.Text Then
            res = modStock.ItemListForPurchaseResult(cmbroute.Text, GetBrandGenerricType(), cmbfixdepart.Text)
          Else
            res = modStock.ItemListForPurchaseResult(cmbroute.Text, GetBrandGenerricType())
          Endif
          cmbmedicine.Text = GridViewNew("Select Particulars", modControlSub.GetDirectFillresult(res), False, cmbmedicine, Panel3.Height + GridView1.Height - cmbmedicine.Top)
        Else
          cmbmedicine.Text = GridViewNew("Select Particulars", GetCategoryArray(cmbroute.Text, GetBrandGenerricType()), False, cmbmedicine, Panel3.Height + GridView1.Height - cmbmedicine.Top)
        Endif
      Endif
      txtbatch.SetFocus

    Endif
  Endif

End

Public Sub mnublank_Click()

  BlanKVnedor()
  BlankALl()
  txtporder.SetFocus

End

Private Sub AddNewEntry(StockNo As Long, stockid As String, ItemCategory As String)

  Dim res As Result

  If stockid And If txtbatch.Text And If StockNo > 0 Then
    res = modDatabase.$myConn.Create("tblentry")
    res["fldstockno"] = StockNo
    res["fldstockid"] = stockid
    res["fldbatch"] = Trim(txtbatch.Text)
    res["fldexpiry"] = modDate.StartSqlDate(dtexpiry.Value)
    res["fldqty"] = 0
    res["fldstatus"] = modStock.ItemSaleStatus(stockid, modBasic.$compID)
    res["fldsellpr"] = txtnewsell.Value
    res["fldsav"] = False
    res["fldcategory"] = ItemCategory
    res["fldcomp"] = modBasic.$compID
    res["fldcode"] = 0
    res["xyz"] = True
    res.Update()
  Endif

End

Private Sub AddPurchaseEntry(StockNo As Long, ItemCategory As String)

  Dim res As Result
  Dim rs As Result

  rs = modDatabase.$myConn.Exec("select fldstockid,fldbatch from tblentry where fldstockno=&1", StockNo)
  If rs.Available = True Then
    If rs["fldstockid"] = cmbmedicine.Text And If rs["fldbatch"] = txtbatch.Text Then
      res = modDatabase.$myConn.Create("tblpurchase")
      res["fldpurtype"] = cmbtype.Text
      res["fldbillno"] = Trim(txtbillno.Text)
      res["fldsuppname"] = cmbvendor.Text
      res["fldcategory"] = ItemCategory
      res["fldstockno"] = StockNo
      res["fldstockid"] = cmbmedicine.Text
      res["fldmrp"] = txtmrp.Value
      res["fldtotalcost"] = txttotalcost.Value
      res["fldtaxamt"] = txttotax.Value
      res["fldmargin"] = txtprofit.Value
      res["fldtotalqty"] = txttotqty.Value
      res["fldreturnqty"] = 0
      res["fldcasdisc"] = txtcasdisc.Value
      res["fldcasbonus"] = txtcasbonus.Value
      res["fldqtybonus"] = txtqtybonus.Value
      res["fldcarcost"] = txtcarycost.Value
      res["fldnetcost"] = txtnetcost.Value
      res["flsuppcost"] = txtdistcost.Value
      res["fldsellprice"] = txtnewsell.Value
      res["fldpurdate"] = dtpurdate.Value
      If txtcomment.Text Then
        res["fldcomment"] = Trim(txtcomment.Text)
      Endif
      res["flduserid"] = modBasic.$lbluser
      res["fldtime"] = Now()
      res["fldcomp"] = modBasic.$compID
      res["fldsav"] = True
      res["fldpurorder"] = Trim(txtporder.Text)
      res["fldreference"] = ""
      res["fldchk"] = False
      res["xyz"] = True
      res.Update()
    Endif
  Endif

End

Public Sub chksave_Click()

  Dim xstock As Boolean
  Dim StockNo As Long
  Dim ItemCategory As String

  If chksave.Value Then
    If dtpurdate.Value And If cmbtype.Text And If txtbillno.Text And If cmbvendor.Text And If cmbmedicine.Text And If txtbatch.Text And If dtexpiry.Value And If txttotqty.Value Then

      Inc Application.Busy
      ItemCategory = modNonMedical.GetBillItemCategoryFromCombo(cmbroute.Text)
      xstock = modStock.NewStock(cmbmedicine.Text, Trim(txtbatch.Text), modBasic.$compID)

      modDatabase.$myConn.Begin
      StockNo = modStock.GetItemStockNo(cmbmedicine.Text, Trim(txtbatch.Text), modBasic.$compID)
      If StockNo Then
        If xstock = True Then
          AddNewEntry(StockNo, cmbmedicine.Text, ItemCategory)
        Endif
        AddPurchaseEntry(StockNo, ItemCategory)
      Endif
      modDatabase.$myConn.Commit

      Dec Application.Busy
      ShowPurchaseGrid()
      BlankALl()
      cmbroute.SetFocus

    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

Public Sub chksave_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    chksave.Value = True
    chksave_Click()
  Endif

End

Public Sub cmbroute_Click()

  chksave.Value = False
  cmbmedicine.Clear
  cmbmedicine.Text = ""

End

Public Sub txtbatch_GotFocus()

  If cmbmedicine.Text Then
    If modStockSub.GetComboStockControl(cmbroute.Text, cmbmedicine.Text, rbgeneric, rbrand, modDatabase.$medConn) = False Then
      cmbmedicine.Text = ""
      Balloon.Warning(("Item not listed"), cmbmedicine)
      Balloon.Delay = modBasic.$BalloonDelay
      cmbroute.SetFocus
    Else
      If cmbroute.Text = "suture" Or cmbroute.Text = "msurg" Or cmbroute.Text = "ortho" Or cmbroute.Text = "extra" Then
      Else
        If rbrand.Value = True Then
          cmbmedicine.Text = modMedConstant.ConvertBrandToGeneric(cmbroute.Text, cmbmedicine.Text)
        Endif
      Endif
    Endif
  Endif

End

Public Sub txtbatch_LostFocus()

  Dim xexp As Date

  txtbatch.Text = UCase(Trim(txtbatch.Text))
  If cmbmedicine.Text And If txtbatch.Text Then
    xexp = modStock.GetExpiryFromBatch(cmbmedicine.Text, txtbatch.Text)
    If xexp Then
      dtexpiry.Value = xexp
      dtexpiry.Enabled = False
      dtnepexpiry.Enabled = False
      txttotalcost.SetFocus
    Else
      dtexpiry.SetFocus
    Endif
  Else
    dtexpiry.SetFocus
  Endif

End

Private Sub ShowPurchaseGrid()

  Dim sql As String
  Dim xFields As String[]
  Dim tot As Float
  Dim xtax As Float
  Dim xorder As String
  Dim xsearch As String

  If mnusorting.Checked = True Then
    xorder = " ORDER BY fldstockid ASC"
  Else
    xorder = " ORDER BY fldid DESC"
  Endif

  If $searchName Then
    xsearch = " and fldstockid like &3"
  Else
    xsearch = ""
  Endif

  xFields = ["fldid", "fldpurtype", "fldpurdate", "fldbillno", "fldsuppname", "fldcategory", "fldstockno", "fldstockid", "fldstockno", "fldstockno", "fldtotalqty", "fldtaxamt", "fldtotalcost", "fldmargin", "fldcasdisc", "fldcasbonus", "fldqtybonus", "fldcarcost", "fldnetcost", "flsuppcost", "fldsellprice", "fldmrp", "flduserid", "fldtime", "fldcomp", "fldpurorder", "fldpurdate"]
  If chkall.Value = True Then
    If $searchName Then
      xsearch = " and fldstockid like &3"
    Else
      xsearch = ""
    Endif
    sql = "select " & xFields.Join(",") & " from tblpurchase where fldcomp=&1 and fldsav=&2" & xsearch & xorder
    $rData = modDatabase.$myConn.Exec(sql, modBasic.$compID, True, "%" & $searchName & "%")
    txtsubtot.Enabled = False
    txtfindisc.Enabled = False
    txtfintax.Enabled = False
  Else If chkall.Value = False Then
    If $searchName Then
      xsearch = " and fldstockid like &7"
    Else
      xsearch = ""
    Endif
    If Not txtporder.Text Then
      sql = "select " & xFields.Join(",") & " from tblpurchase where fldpurtype=&1 and fldbillno=&2 and fldsuppname=&3 and fldcomp=&4 and fldsav=&5 and fldpurorder IS NULL" & xsearch & xorder
    Else
      sql = "select " & xFields.Join(",") & " from tblpurchase where fldpurtype=&1 and fldbillno=&2 and fldsuppname=&3 and fldcomp=&4 and fldsav=&5 and fldpurorder=&6" & xsearch & xorder                               ''
    Endif
    $rData = modDatabase.$myConn.Exec(sql, cmbtype.Text, Trim(txtbillno.Text), cmbvendor.Text, modBasic.$compID, True, Trim(txtporder.Text), "%" & $searchName & "%")
    txtsubtot.Enabled = True
    txtfindisc.Enabled = True
    txtfintax.Enabled = True
  Endif
  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView1, $rData, $aMyFields)

  With GridView1
    If chkall.Value = True Then
      .Columns[1].Text = "Payment"
      .Columns[2].Text = "PurDate"
      .Columns[3].Text = "Invoice"
      .Columns[4].Text = "Supplier"
    Else
      .Columns[3].Text = "Invoice"
    Endif
    .Columns[6].Text = "Code"
    .Columns[7].Text = "Particulars"
    .Columns[8].Text = "Batch"
    .Columns[9].Text = "Expiry"
    .Columns[10].Text = "TotQTY"
    .Columns[11].Text = "TotTax"
    .Columns[12].Text = "TotCost"
    .Columns[13].Text = "Margin"
    If chkopening.Value = False Then
      .Columns[14].Text = "CasDisc"
      .Columns[15].Text = "CasBon"
      .Columns[16].Text = "QTYBon"
      .Columns[17].Text = "CCost"
    Endif
    .Columns[18].Text = "NetCost"
    .Columns[19].Text = "DistCost"
    .Columns[20].Text = "SellPr"
    .Columns[21].Text = "MRP"
    .Columns[22].Text = "User"
    .Columns[23].Text = "DateTime"
    .Columns[24].Text = "Comp"
    .Columns[25].Text = "PurOrder"

    .Columns[0].Width = 1
    If chkall.Value = True Then
      .Columns[1].Width = 120 * modBasic.$AppWidthRatio
      .Columns[2].Width = 125 * modBasic.$AppWidthRatio
      .Columns[3].Width = 100 * modBasic.$AppWidthRatio
      .Columns[4].Width = 175 * modBasic.$AppWidthRatio
    Else
      .Columns[1].Width = 1
      .Columns[2].Width = 1
      .Columns[3].Width = 100 * modBasic.$AppWidthRatio
      .Columns[4].Width = 1
    Endif
    .Columns[5].Width = 1
    .Columns[6].Width = 50 * modBasic.$AppWidthRatio
    .Columns[7].Width = 350 * modBasic.$AppWidthRatio
    .Columns[8].Width = 75 * modBasic.$AppWidthRatio
    .Columns[9].Width = 125 * modBasic.$AppWidthRatio
    .Columns[10].Width = 75 * modBasic.$AppWidthRatio
    .Columns[11].Width = 75 * modBasic.$AppWidthRatio
    .Columns[12].Width = 75 * modBasic.$AppWidthRatio
    .Columns[13].Width = 75 * modBasic.$AppWidthRatio
    If chkopening.Value = True Then
      .Columns[14].Width = 1
      .Columns[15].Width = 1
      .Columns[16].Width = 1
      .Columns[17].Width = 1
    Else
      .Columns[14].Width = 75 * modBasic.$AppWidthRatio
      .Columns[15].Width = 75 * modBasic.$AppWidthRatio
      .Columns[16].Width = 75 * modBasic.$AppWidthRatio
      .Columns[17].Width = 75 * modBasic.$AppWidthRatio
    Endif
    .Columns[18].Width = 75 * modBasic.$AppWidthRatio
    .Columns[19].Width = 75 * modBasic.$AppWidthRatio
    .Columns[20].Width = 75 * modBasic.$AppWidthRatio
    .Columns[21].Width = 75 * modBasic.$AppWidthRatio
    .Columns[22].Width = 75 * modBasic.$AppWidthRatio
    .Columns[23].Width = 175 * modBasic.$AppWidthRatio
    .Columns[24].Width = 75 * modBasic.$AppWidthRatio
    .Columns[25].Width = 125 * modBasic.$AppWidthRatio
    .Columns[26].Width = 1
  End With

  tot = 0
  xtax = 0
  For Each $rData
    If $rData["fldtaxamt"] Then
      tot = tot + ($rData["fldtotalcost"] - $rData["fldtaxamt"])
      xtax = xtax + $rData["fldtaxamt"]
    Else
      tot = tot + $rData["fldtotalcost"]
    Endif
  Next
  txtsubtot.Value = Round(tot, -2)
  txtfintax.Value = Round(xtax, -2)

End

Public Sub GridView1_Data(Row As Integer, Column As Integer)

  Dim xdate As Date

  $rData.MoveTo(Row)
  modGeneralMain.GridViewDecoration(GridView1, Row)
  If Column = 2 Then
    GridView1.Data.Text = modReportVar.GetDateTimeReport($rData["fldpurdate"], gb.MediumDate)
  Else If Column = 8 Then
    GridView1.Data.Text = modStock.GetBatchFromStockNo($rData["fldstockno"])
  Else If Column = 9 Then
    xdate = modStock.GetExpiryFromStockNo($rData["fldstockno"])
    If xdate <= Now() Then
      GridView1.Data.Foreground = modBasic.$HighLightColor
    Endif
    GridView1.Data.Text = modReportVar.GetDateTimeReport(xdate, gb.MediumDate)
  Else If Column = 23 Then
    GridView1.Data.Text = modReportVar.GetDateTimeReport($rData["fldtime"], gb.GeneralDate)
  Else
    GridView1.Data.Text = $rData[$aMyFields[Column]]
  Endif
  GridView1.Rows[Row].Height = Max(GridView1.Rows[Row].Height, GridView1.Data.Font.RichTextHeight(GridView1.Data.Text, GridView1.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView1.Rows.Height - GridView1.Font.Height))
  GridView1.Data.WordWrap = True

End

Public Sub mnudelete_Click()

  If GridView1.Rows.Selection.Count > 0 Then
    modDatabase.$myConn.Delete("tblpurchase", "fldid=&1 and fldsav=&2", GridView1[GridView1.Row, 0].Text, True)
    ShowPurchaseGrid()
  Endif

End

Public Sub mnusqve_Click()

  Dim res1 As Result
  Dim res2 As Result
  Dim res3 As Result

  Dim xPath As String
  Dim idLock As Boolean
  Dim ref As String

  If cmbtype.Text And If cmbvendor.Text And If txtbillno.Text Then
    If chkall.Value = False Then
      If Message.Question(("Do you want to save selected entries?"), ("No"), ("Yes")) = 2 Then

        Inc Application.Busy
        res1 = modDatabase.$myConn.Exec("select fldid,fldpurtype,fldpurdate,fldbillno,fldsuppname,fldcategory,fldstockno,fldstockid,fldmrp,fldtotalcost,fldtotalqty,fldnetcost from tblpurchase where fldpurtype=&1 and fldbillno=&2 and fldsuppname=&3 and fldcomp=&4 and fldsav=&5", cmbtype.Text, Trim(txtbillno.Text), cmbvendor.Text, modBasic.$compID, True)
        If res1.Available Then
          idLock = modBillLock.LockTableForID("Purchase")
          If idLock = True Then

            modDatabase.$myConn.Begin
            ref = modBillLock.PurchaseReference()
            If ref Then
              'add to purchase bill table
              res3 = modDatabase.$myConn.Create("tblpurchasebill")
              res3["fldsuppname"] = cmbvendor.Text
              res3["fldreference"] = ref
              res3["fldpurtype"] = cmbtype.Text
              res3["fldbillno"] = txtbillno.Text
              res3["fldpurorder"] = Trim(txtporder.Text)
              res3["fldcategory"] = "PurEntry"
              If cmbtype.Text = "Cash Payment" Then
                res3["flddebit"] = txtfinamt.Value
              Else If cmbtype.Text = "Credit Payment" Then
                res3["flddebit"] = 0
              Endif
              res3["fldcredit"] = txtfinamt.Value
              res3["fldtotaltax"] = txtfintax.Value
              res3["fldlastdisc"] = txtfindisc.Value
              res3["fldadjust"] = txtadjust.Value
              res3["fldpurdate"] = dtpurdate.Value
              res3["flduserid"] = modBasic.$lbluser
              res3["fldtime"] = Now()
              res3["fldcomp"] = modBasic.$compID
              res3["fldsav"] = True
              res3["xyz"] = False
              res3.Update()
              'add amt to vendor list
              modStockSub.AddAmountToVendor(cmbvendor.Text, txtfinamt.Value, cmbtype.Text)
              'for each entry in purchase table
              For Each res1
                'add to tblentry
                modStockSub.AddToExistEntry(res1["fldstockno"], res1["fldtotalqty"], modBasic.$compID)
                'add reference to entry in purchase table and make sav=0
                res2 = modDatabase.$myConn.Edit("tblpurchase", "fldid=&1", res1["fldid"])
                res2["fldsav"] = False
                res2["fldreference"] = ref
                res2["flduserid"] = modBasic.$lbluser
                res2["fldtime"] = Now()
                res2["fldcomp"] = modBasic.$compID
                res2["xyz"] = False
                res2.Update()
              Next
            Endif  ''if ref no exist
            modDatabase.$myConn.Commit
            txtreference.Text = ref

            modBillLock.ReleaseLockTable("Purchase")
          Endif ''if locked
        Endif  ''if result available
        Dec Application.Busy
        ShowPurchaseGrid()

        xPath = modHTMLStockReport.PurchaseEntryReport(txtreference.Text, "PurEntry")
        modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

      Endif  ''if allowed to save
    Endif ''all is disabled
  Endif  ''if vendor name exist

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  If idLock = True Then
    modBillLock.ReleaseLockTable("Purchase")
  Endif
  modHelpVariable.CreateErrorReport()

End

''============================== Reprint =============================
Public Sub mnureprt_Click()

  Dim hForm As FmReprintStore

  hForm = New FmReprintStore("PurEntry")
  hForm.ShowModal

End

'''------------------------------------------ Calculation ----------------------------------------------------------------------
Public Sub txttotqty_LostFocus()

  Dim CForm As CTenderCheck
  Dim maxqty As Integer
  Dim maxrate As Float
  Dim xmsg As String

  If txttotqty.Value > 0 Then
    txtnetcost.Value = Round((txttotalcost.Value - txttotax.Value) / txttotqty.Value, -2)
  Endif

  maxqty = 0
  maxrate = 0
  xmsg = ""
  If chkpurestrict.Value Then
    If cmbvendor.Text Then
      CForm = New CTenderCheck(cmbvendor.Text, cmbroute.Text, cmbmedicine.Text)
      maxqty = CForm.GetMaximumQty()
      maxrate = CForm.GetMaximumRate()
      If maxqty Then
        If maxqty < txttotqty.Value Then
          xmsg = xmsg & ("Purchase Quantity restricted to ") & CStr(maxqty) & gb.NewLine
        Endif
      Endif
      If maxrate Then
        If maxrate < txtnetcost.Value Then
          xmsg = xmsg & ("Purchase Rate restricted to ") & CStr(maxrate) & gb.NewLine
        Endif
      Endif
      If xmsg Then
        Message.Warning(xmsg, ("OK"))
        txttotalcost.SetFocus
      Endif

    Endif
  Endif

End

Public Sub txtprofit_GotFocus()

  txtprofit.Value = modStock.GetDefaultProfitMargin(cmbroute.Text)
  txtprofit.SelectAll

End

Public Sub txtnetcost_GotFocus()

  txtdistcost.Value = GetDistributorCost()
  txtcursell.Value = modStock.GetCurrentSellingPrice(cmbmedicine.Text, modBasic.$compID)
  If Not txtcursell.Value Then
    txtcursell.Value = modStock.GetInactiveSellingPrice(cmbmedicine.Text, modBasic.$compID)
  Endif
  txtnewsell.Value = Round(txtdistcost.Value * (1 + txtprofit.Value / 100), -2)

End

Private Function GetDistributorCost() As Float

  Dim diStCost As Float

  If txttotqty.Value Then

    If txtqtybonus.Value = 0 And If txtcasbonus.Value = 0 And If txtcasdisc.Value = 0 And If txtcarycost.Value = 0 Then
      diStCost = Round((txttotalcost.Value - txttotax.Value) / txttotqty.Value, -2)

    Else If txtcasdisc.Value > 0 And If txtcasbonus.Value = 0 And If txtqtybonus.Value = 0 And If txtcarycost.Value = 0 Then
      diStCost = Round((txtcasdisc.Value + (txttotalcost.Value - txttotax.Value)) / txttotqty.Value, -2)

    Else If txtcasbonus.Value > 0 And If txtqtybonus.Value = 0 And If txtcarycost.Value = 0 Then
      diStCost = Round((txtcasdisc.Value + (txttotalcost.Value - txttotax.Value)) * 100 / ((100 - txtcasbonus.Value) * txttotqty.Value), -2)

    Else If txtcasbonus.Value = 0 And If txtqtybonus.Value > 0 Then
      diStCost = Round(((txttotalcost.Value - txttotax.Value) + txtcasdisc.Value) / (txttotqty.Value - txtqtybonus.Value + (txtqtybonus.Value * txtcarycost.Value / 100)), -2)

    Else If txtcasbonus.Value > 0 And If txtqtybonus.Value > 0 Then
      Balloon.Warning(("Both Cash Bonus as quantity bonus not allowed in a single entry"), txtqtybonus)

    Endif

  Endif

  Return diStCost

End

Public Sub txtnewsell_LostFocus()

  If txtdistcost.Value Then
    txtprofit.Value = Round(100 * (txtnewsell.Value / txtdistcost.Value - 1), -2)
  Endif

End

Public Sub txtporder_LostFocus()

  If txtporder.Text Then
    cmbvendor.Text = modStock.GetPurchOrderSupplierFromRequest(Trim(txtporder.Text))
    If cmbvendor.Text Then
      cmbvendor.Enabled = False
    Endif
  Endif

End

Public Sub cmbtype_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbtype)
  modFillContainer.RestrictComboToContent(cmbtype)

End

Public Sub cmbvendor_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbvendor)
  modFillContainer.RestrictComboToContent(cmbvendor)

End

Public Sub txttotalcost_GotFocus()

  If modBasic.$PurExpiryDay Then
    If DateDiff(Date(), dtexpiry.Value, gb.Day) < modBasic.$PurExpiryDay Then
      dtexpiry.Value = DateAdd(Date(), gb.Day, modBasic.$PurExpiryDay)
      Message.Warning(("Near Expiry Product"), ("OK"))
      dtexpiry.SetFocus
    Else
      txttotalcost.SelectAll
    Endif
  Else
    txttotalcost.SelectAll
  Endif

End

Public Sub chkall_Click()

  ShowPurchaseGrid()

End

Public Sub GridView1_Menu()

  mnuhide.Popup

End

Public Sub btncost_Click()

  txttotalcost.Value = CCalculator()
  txttotalcost.SetFocus

End

Public Sub btntaxcalc_Click()

  ' Dim xtax As Float
  '
  ' If txttotalcost.Value Then
  '   xtax = InputValue("Provide Tax Percentage (%)", "Tax Calculation", 0)
  '   If xtax Then
  '     txttotax.Value = Round((xtax * txttotalcost.Value) / (100 + xtax), -2)
  '     txttotax.SetFocus
  '   Endif
  ' Endif

  Dim aVar As Float[]

  aVar = CTaxCalc()
  If aVar Then
    txttotalcost.Value = aVar[0]
    txttotax.Value = aVar[1]
  Endif

End

Public Sub btnqty_Click()

  txttotqty.Value = CCalculator()
  txttotqty.SetFocus

End

Public Sub txttotalcost_KeyRelease()

  If Key.Code = Key.Down Then
    btncost_Click()
  Else If Key.Code = Key.Up Then
    btntaxcalc_Click()
  Endif

End

Public Sub txttotqty_KeyRelease()

  If Key.Code = Key.Down Then
    btnqty_Click()
  Endif

End

Public Sub btnnepcal_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtpurdate.Value))
  If xx Then
    dtpurdate.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub txtbatch_KeyRelease()

  txtbatch.Tag = ""
  dtexpiry.Enabled = True
  dtnepexpiry.Enabled = True

End

Public Sub cmbroute_GotFocus()

  If cmbvendor.Text Then
    dtpurdate.Enabled = False
    cmbtype.Enabled = False
    cmbvendor.Enabled = False
    txtbillno.Enabled = False
    txtvendor.Enabled = False
    txtporder.Enabled = False
  Endif

End

Public Sub dtnepexpiry_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtexpiry.Value))
  If xx Then
    dtexpiry.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub txtbillno_KeyPress()

  modGeneralMain.InputTextKeyOnly()

End

Public Sub txtbatch_KeyPress()

  modGeneralMain.InputTextKeyOnly()

End

Public Sub chkopening_Click()

  modSettings.EnterCheckSetting(chkopening, "PurchaseForm/OpeningStock")
  GetOpeningFormat()

End

Private Sub GetOpeningFormat()

  Dim xx As Boolean

  If modBasic.$PurExtraParam = "Disable" Then
    xx = False
  Else
    If chkopening.Value = True Then
      xx = False
    Else If chkopening.Value = False Then
      xx = True
    Endif
  Endif
  txtcasdisc.Enabled = xx
  txtcasbonus.Enabled = xx
  txtqtybonus.Enabled = xx
  txtcarycost.Enabled = xx

End

Private Sub GetAllTotal()

  txtfinamt.Value = modNonMedical.GetRoundupAccToSetting(txtsubtot.Value - txtfindisc.Value + txtfintax.Value + txtadjust.Value)

End

Public Sub txtsubtot_Change()

  GetAllTotal()

End

Public Sub txtfintax_Change()

  GetAllTotal()

End

Public Sub txtfindisc_Change()

  GetAllTotal()

End

Public Sub txtadjust_Change()

  GetAllTotal()

End

Public Sub mnuimport_Click()

  Dim xPath As String
  Dim hCSV As CsvFile
  Dim xcoll As Collection
  Dim xdelim As String
  Dim res As Result

  If Dialog.OpenFile() Then Return
  xPath = Dialog.Path
  If Exist(xPath) Then
    xdelim = ";"
    hCSV = New CsvFile(xPath, xdelim)
    While hCSV.Eof = False
      xcoll = hCSV.Read()
      res = modDatabase.$myConn.Edit("tblpurchase", "fldpurtype=&1 and fldbillno=&2 and fldsuppname=&3 and fldcomp=&4 and fldsav=&5 and fldstockno=&6", Trim(xcoll["fldpurtype"]), Trim(xcoll["fldbillno"]), Trim(xcoll["fldsuppname"]), modBasic.$compID, True, CInt(xcoll["fldstockno"]))
      If Trim(xcoll["fldtotalqty"]) Then
        res["fldtotalqty"] = CFloat(xcoll["fldtotalqty"])
      Endif
      If Trim(xcoll["fldnetcost"]) Then
        res["fldnetcost"] = CFloat(xcoll["fldnetcost"])
      Endif
      res["fldtotalcost"] = CFloat(xcoll["fldtotalqty"]) * CFloat(xcoll["fldnetcost"])
      res.Update
    Wend
    hCSV.Close()
    ShowPurchaseGrid()
    Message.Info(("Import completed"), ("OK"))
  Endif

End

Public Sub mnuexport_Click()

  Dim res As Result
  Dim xPath As String
  Dim xfile As String

  res = modDatabase.$myConn.Exec("select fldid,fldpurtype,fldbillno,fldsuppname,fldstockno,fldstockid,fldtotalqty,fldnetcost from tblpurchase where fldpurtype=&1 and fldbillno=&2 and fldsuppname=&3 and fldcomp=&4 and fldsav=&5 ORDER BY fldstockid", cmbtype.Text, Trim(txtbillno.Text), cmbvendor.Text, modBasic.$compID, True)
  If res.Available Then
    If Dialog.SelectDirectory() Then Return
    xfile = Dialog.Path &/ "tblpurchase.csv"
    If Exist(xfile) Then
      Kill xfile
    Endif
    xPath = modTextDB.ConvertResultToCSV(res, ";", True)
    Copy xPath To xfile
  Endif

End

Public Sub GridView1_Click()

  Dim Row As Integer
  Dim Column As Integer
  Dim res As Result
  Dim xval As Float

  Row = GridView1.Row
  Column = GridView1.Column

  If GridView1.Column = 10 Then
    If GridView1[GridView1.Row, 14].Text = 0 And If GridView1[GridView1.Row, 15].Text = 0 And If GridView1[GridView1.Row, 16].Text = 0 And If GridView1[GridView1.Row, 17].Text = 0 Then
      xval = InputValue(GridView1[GridView1.Row, 7].Text, ("Change Value"), GridView1[GridView1.Row, 10].Text)
      If xval Then
        res = modDatabase.$myConn.Edit("tblpurchase", "fldid=&1 and fldcomp=&2 and fldsav=&3", GridView1[GridView1.Row, 0].Text, modBasic.$compID, True)
        res["fldtotalqty"] = xval
        res["fldtotalcost"] = xval * res["fldnetcost"]
        res["flduserid"] = modBasic.$lbluser
        res["fldtime"] = Now()
        res["xyz"] = False
        res.Update()
        ShowPurchaseGrid()
      Endif
    Endif

  Else If GridView1.Column = 11 Then
    If GridView1[GridView1.Row, 14].Text = 0 And If GridView1[GridView1.Row, 15].Text = 0 And If GridView1[GridView1.Row, 16].Text = 0 And If GridView1[GridView1.Row, 17].Text = 0 Then
      xval = InputValue(GridView1[GridView1.Row, 7].Text, ("Change Value"), GridView1[GridView1.Row, 11].Text)
      If xval Then
        res = modDatabase.$myConn.Edit("tblpurchase", "fldid=&1 and fldcomp=&2 and fldsav=&3", GridView1[GridView1.Row, 0].Text, modBasic.$compID, True)
        res["fldtaxamt"] = xval
        res["fldnetcost"] = Round((res["fldtotalcost"] - xval) / res["fldtotalqty"], -2)
        res["flsuppcost"] = Round((res["fldtotalcost"] - xval) / res["fldtotalqty"], -2)
        res["flduserid"] = modBasic.$lbluser
        res["fldtime"] = Now()
        res["xyz"] = False
        res.Update()
        ShowPurchaseGrid()
      Endif
    Endif

  Else If GridView1.Column = 12 Then
    If GridView1[GridView1.Row, 14].Text = 0 And If GridView1[GridView1.Row, 15].Text = 0 And If GridView1[GridView1.Row, 16].Text = 0 And If GridView1[GridView1.Row, 17].Text = 0 Then
      xval = InputValue(GridView1[GridView1.Row, 7].Text, ("Change Value"), GridView1[GridView1.Row, 12].Text)
      If xval Then
        res = modDatabase.$myConn.Edit("tblpurchase", "fldid=&1 and fldcomp=&2 and fldsav=&3", GridView1[GridView1.Row, 0].Text, modBasic.$compID, True)
        res["fldtotalcost"] = xval
        res["fldnetcost"] = Round((xval - res["fldtaxamt"]) / res["fldtotalqty"], -2)
        res["flsuppcost"] = Round((xval - res["fldtaxamt"]) / res["fldtotalqty"], -2)
        res["flduserid"] = modBasic.$lbluser
        res["fldtime"] = Now()
        res["xyz"] = False
        res.Update()
        ShowPurchaseGrid()
      Endif
    Endif

  Else
    txtporder.Text = GridView1[GridView1.Row, 25].Text
    dtpurdate.Value = GridView1[GridView1.Row, 26].Text
    cmbtype.Text = GridView1[GridView1.Row, 1].Text
    txtbillno.Text = GridView1[GridView1.Row, 3].Text
    cmbvendor.Text = GridView1[GridView1.Row, 4].Text
  Endif

  GridView1.Row = Row
  GridView1.Column = Column

End

Public Sub Menu1_Click()

  modCHTMLReport.ExportGridToHTML(GridView1, "PURCHASE ENTRY", "REF: " & txtreference.Text)

End

Public Sub mnusorting_Click()

  $searchName = ""
  If mnusorting.Checked = True Then
    mnusorting.Checked = False
  Else If mnusorting.Checked = False Then
    mnusorting.Checked = True
  Endif
  ShowPurchaseGrid()

End

Public Sub mnusearch_Click()

  Dim xval As String

  xval = InputBox(("Search Text in Particulars Name"), "Search Item", "%")
  If xval Then
    $searchName = xval
    ShowPurchaseGrid()
  Endif

End

Public Sub mnucsv_Click()

  fmCSVFunction.Close
  fmCSVFunction.ShowModal

End

Public Sub mnuopening_Click()

  fmOpening.Close
  fmOpening.ShowModal

End

Public Sub mnuprodimport_Click()

  fmStockImport.Close
  fmStockImport.ShowModal

End

Public Sub btncurrency_Click()

  Dim xrate As Float

  xrate = InputValue("Put Currency Conversion Rate", "Currency Conversion", 0)
  If xrate Then
    txtmrp.Value = Round(txtmrp.Value * xrate, -2)
  Endif

End

Public Sub txttotqty_GotFocus()

  txttotqty.SelectAll

End

Public Sub txtmrp_GotFocus()

  txtmrp.SelectAll

End

Public Sub txtcasdisc_GotFocus()

  txtcasdisc.SelectAll

End

Public Sub txtcasbonus_GotFocus()

  txtcasbonus.SelectAll

End

Public Sub txtqtybonus_GotFocus()

  txtqtybonus.SelectAll

End

Public Sub txtcarycost_GotFocus()

  txtcarycost.SelectAll

End

Public Sub txtnewsell_GotFocus()

  txtnewsell.SelectAll

End

Public Sub mnurequest_Click()

  modWorkSpace.Remove(fmPurchRequest)
  modWorkSpace.Add(fmPurchRequest)

End
