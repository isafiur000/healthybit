' Gambas class file

Private $rData As Result
Private $rData1 As Result
Private $rData2 As Result
Private $aMyFields As String[]
Private $aMyFields1 As String[]
Private $aMyFields2 As String[]

Private $MSurgicalLst As String[]
Private $ExtraItemLst As String[]
Private $OralBrandLst As String[]
Private $OralGenricLst As String[]
Private $InjBrandLst As String[]
Private $InjGenricLst As String[]
Private $LiqBrandLst As String[]
Private $LiqGenricLst As String[]

Public Sub Form_Open()

  Dim xCompLst As String[]
  Dim hForm As FmNewRequest

  modGeneralMain.ArrangeEmbedForms(Me, Panel1, "Vertical")
  Me.Icon = Picture[modGeneralMain.$strLogo]
  hForm = New FmNewRequest(Panel9)

  cmbroute.List = modMedicine.ComboRoute()
  xCompLst = modMisc.CompListExcept(modBasic.$AllCompList)
  cmbcompsent.List = xCompLst
  cmbcompsent.Add("Locker")
  cmbcomprecv.List = xCompLst
  cmbcomprecv.Text = "%"
  cmbcomppend.List = modBasic.$AllCompList
  cmbcomppend.Text = "%"
  modStockSub.DisplayDefaultTransferMode(rbrand, rbgeneric)
  IniateCategoryPharmArray()
  modSettings.ShowCheckBox(chklockstock, "StockTransfer/Locker")
  If modBasic.$AccessStockTransfer = "Disable" Then
    If modGlobalSetting.GetDBTableList("InventorySaveAccess/StockTransfer").Exist(modBasic.$lbluser) = True Then
      btnsavefrom.Enabled = True
    Else
      btnsavefrom.Enabled = False
    Endif
  Endif
  chkselall.Value = True

End

Public Sub Form_Resize()

  modGeneralMain.ShowSelectedFormMenu(Me)

End

Public Sub Form_Activate()

  If Not cmbcompsent.Text Then
    BlankAllBox()
    cmbcompsent.SetFocus
  Endif

End

Public Sub Form_Close()

  modGeneralMain.RecordFormExit(Me)

End

Public Sub Form_KeyRelease()

  modGeneralmain.GoToNextControlTab()

End

Public Sub mnublank_Click()

  Me.Close
  Wait
  modWorkSpace.Add(fmTransfer)

End

Public Sub btnshow_Click()

  If cmbcompsent.Text Then
    ShowTransferGrid()
  Endif

End

Private Sub AdjustGrid(GridView1x As GridView)

  With GridView1x
    .Columns[0].Width = 1
    .Columns[1].Width = 1
    .Columns[2].Width = 1
    .Columns[3].Width = 150 * modBasic.$AppWidthRatio
    .Columns[4].Width = 300 * modBasic.$AppWidthRatio
    .Columns[5].Width = 125 * modBasic.$AppWidthRatio
    .Columns[6].Width = 125 * modBasic.$AppWidthRatio
    .Columns[7].Width = 1
    .Columns[8].Width = 75 * modBasic.$AppWidthRatio
    .Columns[9].Width = 75 * modBasic.$AppWidthRatio
    .Columns[10].Width = 100 * modBasic.$AppWidthRatio
    .Columns[11].Width = 100 * modBasic.$AppWidthRatio
    .Columns[12].Width = 150 * modBasic.$AppWidthRatio
    .Columns[13].Width = 75 * modBasic.$AppWidthRatio
    .Columns[14].Width = 125 * modBasic.$AppWidthRatio
    .Columns[15].Width = 175 * modBasic.$AppWidthRatio

    .Columns[3].Text = "Entry"
    .Columns[4].Text = "Particulars"
    .Columns[5].Text = "Batch"
    .Columns[6].Text = "Expiry"
    .Columns[8].Text = "QTY"
    .Columns[9].Text = "Cost"
    .Columns[10].Text = "Comp"
    .Columns[11].Text = "Sender"
    .Columns[12].Text = "Reference"
    .Columns[13].Text = "Locker"
    .Columns[14].Text = "Request"
    .Columns[15].Text = "Comment"
  End With

End

Public Sub mnureprint_Click()

  Dim hForm As FmReprintStore

  hForm = New FmReprintStore("Transfer")
  hForm.ShowModal

End

''========================== Transfer ==================================
Public Sub cmbcompsent_Click()

  lblcomp.Text = modGeneral.GetCompNameFromCompID(cmbcompsent.Text)

End

Public Sub rbgeneric_Click()

  modSettings.SaveSettingsToFile("BrandOrGeneric/Transfer", "Generic")

End

Public Sub rbrand_Click()

  modSettings.SaveSettingsToFile("BrandOrGeneric/Transfer", "Brand")

End

Public Sub chklockstock_Click()

  modSettings.EnterCheckSetting(chklockstock, "StockTransfer/Locker")

End

Public Sub cmbcompsent_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbcompsent)
  modFillContainer.RestrictComboToContent(cmbcompsent)

End

Public Sub cmbroute_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbroute)
  modFillContainer.RestrictComboToContent(cmbroute)

End

Public Sub cmbroute_Click()

  chksave.Value = False
  cmbmedicine.Clear()
  cmbmedicine.Text = ""
  cmbbatch.Clear()
  cmbbatch.Text = ""

End

''--------------------- Array for Items to Load ----------------------------
Private Sub IniateCategoryPharmArray()

  $MSurgicalLst = New String[]
  $ExtraItemLst = New String[]
  $OralBrandLst = New String[]
  $OralGenricLst = New String[]
  $InjBrandLst = New String[]
  $InjGenricLst = New String[]
  $LiqBrandLst = New String[]
  $LiqGenricLst = New String[]

End

Private Function GetCategoryArray(sRoute As String, sMode As String) As String[]

  Dim xarry As String[]

  If sRoute = "oral" Then
    If sMode = "Brand" Then
      If Not $OralBrandLst.Count Then
        $OralBrandLst.Insert(modControlSub.GetDirectFillresult(modStock.FillMedicinesTransferComboResult(sRoute, sMode, modBasic.$compID)))
      Endif
      xarry = $OralBrandLst
    Else If sMode = "Generic" Then
      If Not $OralGenricLst.Count Then
        $OralGenricLst.Insert(modControlSub.GetDirectFillresult(modStock.FillMedicinesTransferComboResult(sRoute, sMode, modBasic.$compID)))
      Endif
      xarry = $OralGenricLst
    Endif

  Else If sRoute = "liquid" Then
    If sMode = "Brand" Then
      If Not $LiqBrandLst.Count Then
        $LiqBrandLst.Insert(modControlSub.GetDirectFillresult(modStock.FillMedicinesTransferComboResult(sRoute, sMode, modBasic.$compID)))
      Endif
      xarry = $LiqBrandLst
    Else If sMode = "Generic" Then
      If Not $LiqGenricLst.Count Then
        $LiqGenricLst.Insert(modControlSub.GetDirectFillresult(modStock.FillMedicinesTransferComboResult(sRoute, sMode, modBasic.$compID)))
      Endif
      xarry = $LiqGenricLst
    Endif

  Else If sRoute = "injection" Then
    If sMode = "Brand" Then
      If Not $InjBrandLst.Count Then
        $InjBrandLst.Insert(modControlSub.GetDirectFillresult(modStock.FillMedicinesTransferComboResult(sRoute, sMode, modBasic.$compID)))
      Endif
      xarry = $InjBrandLst
    Else If sMode = "Generic" Then
      If Not $InjGenricLst.Count Then
        $InjGenricLst.Insert(modControlSub.GetDirectFillresult(modStock.FillMedicinesTransferComboResult(sRoute, sMode, modBasic.$compID)))
      Endif
      xarry = $InjGenricLst
    Endif

  Else If sRoute = "msurg" Then
    If Not $MSurgicalLst.Count Then
      $MSurgicalLst.Insert(modControlSub.GetDirectFillresult(modStock.FillMedicinesTransferComboResult(sRoute, sMode, modBasic.$compID)))
    Endif
    xarry = $MSurgicalLst

  Else If sRoute = "extra" Then
    If Not $ExtraItemLst.Count Then
      $ExtraItemLst.Insert(modControlSub.GetDirectFillresult(modStock.FillMedicinesTransferComboResult(sRoute, sMode, modBasic.$compID)))
    Endif
    xarry = $ExtraItemLst

  Else
    xarry = modControlSub.GetDirectFillresult(modStock.FillMedicinesTransferComboResult(sRoute, sMode, modBasic.$compID))
  Endif

  Return xarry

End
''-------------------------------- END ------------------------------------

Public Sub cmbmedicine_GotFocus()

  Dim brandOrGeneric As String
  Dim res As Result

  If rbrand.Value = True Then
    brandOrGeneric = "Brand"
  Else
    brandOrGeneric = "Generic"
  Endif

  If Not cmbroute.Text Then
    cmbroute.SetFocus
  Else If cmbroute.Text Then
    If Not cmbmedicine.Text Then

      cmbbatch.Tag = "Auto"
      If modBasic.$AppCacheGridViewData = "No" Then
        res = modStock.FillMedicinesTransferComboResult(cmbroute.Text, brandOrGeneric, modBasic.$compID)
        cmbmedicine.Text = GridViewNew("Select Particulars", modControlSub.GetDirectFillresult(res), False, cmbmedicine, GridView1.Height)
      Else
        cmbmedicine.Text = GridViewNew("Select Particulars", GetCategoryArray(cmbroute.Text, brandOrGeneric), False, cmbmedicine, GridView1.Height)
      Endif
      cmbbatch.SetFocus

    Endif
  Endif

End

Public Sub cmbbatch_KeyRelease()

  cmbbatch.Tag = ""
  modFillContainer.AutoFillComboBox(cmbbatch)
  modFillContainer.RestrictComboToContent(cmbbatch)

End

Public Sub cmbbatch_GotFocus()

  Dim res1 As Result

  If Not cmbbatch.Count Then
    If cmbmedicine.Text Then
      If modStockSub.GetComboStockControl(cmbroute.Text, cmbmedicine.Text, rbgeneric, rbrand) = False Then
        cmbmedicine.Text = ""
        Balloon.Warning(("Item not listed"), cmbmedicine)
        Balloon.Delay = modBasic.$BalloonDelay
        cmbroute.SetFocus
      Else
        If cmbroute.Text = "suture" Or cmbroute.Text = "msurg" Or cmbroute.Text = "ortho" Or cmbroute.Text = "extra" Then
        Else
          If rbrand.Value = True Then
            cmbmedicine.Text = modMedConstant.ConvertBrandToGeneric(cmbroute.Text, cmbmedicine.Text)
          Endif
        Endif
        res1 = modDatabase.$myConn.Exec("select distinct(fldbatch) as col from tblentry where fldstockid=&1 and fldcomp=&2 and fldqty>&3", cmbmedicine.Text, modBasic.$compID, 0)
        cmbbatch.List = modControlSub.GetDirectFillresult(res1)
      Endif
    Endif
  Endif

End

Public Sub cmbbatch_Click()

  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldstockno,fldexpiry,fldqty,fldstatus,fldcategory,fldsellpr,fldcode from tblentry where fldstockid=&1 and fldbatch=&2 and fldcomp=&3", cmbmedicine.Text, cmbbatch.Text, modBasic.$compID)                                                   ''
  If res.Available Then
    res.MoveFirst
    txtstatus.Value = res["fldstatus"]
    lbldate.Value = res["fldexpiry"]
    txtmax.Value = res["fldqty"]
    txtcategory.Text = res["fldcategory"]
    lblcode.Text = res["fldcode"]
  Endif

End

Public Sub chksave_Click()

  If chksave.Value Then
    If cmbcompsent.Text And If cmbmedicine.Text And If cmbbatch.Text And If txtqty.Value Then
      If cmbcompsent.Text = "Locker" Then
      Else
        If chklockstock.Value = True Then
          SaveEntry("Locker", cmbcompsent.Text)
        Else
          SaveEntry(cmbcompsent.Text)
        Endif
        ShowTransferGrid()
        cmbroute.SetFocus
      Endif
    Endif
  Endif

End

Public Sub chksave_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    chksave.Value = True
    chksave_Click()
  Endif

End

Private Sub SaveEntry(sTarget As String, Optional sLate As String)

  Dim res As Result
  Dim newstno As Long
  Dim xstock As Boolean
  Dim res1 As Result
  Dim resx As Result

  If chksave.Value = True Then
    res1 = modDatabase.$myConn.Exec("select fldstockno,fldstockid,fldcategory,fldbatch,fldexpiry,fldqty,fldstatus,fldcomp,fldsellpr,fldmrp,fldcost from tblentry where fldstockid=&1 and fldbatch=&2 and fldcomp=&3", cmbmedicine.Text, cmbbatch.Text, modBasic.$compID)                                                   ''
    If res1.Available Then
      res1.MoveFirst
      If sTarget <> modBasic.$compID And If txtqty.Value <= res1["fldqty"] Then

        Inc Application.Busy
        xstock = modStock.NewStock(res1["fldstockid"], res1["fldbatch"], sTarget)

        modDatabase.$myConn.Begin
        newstno = modStock.GetItemStockNo(res1["fldstockid"], res1["fldbatch"], sTarget)
        If newstno Then
          If xstock = True Then
            resx = modDatabase.$myConn.Create("tblentry")
            resx["fldstockno"] = newstno
            resx["fldstockid"] = res1["fldstockid"]
            resx["fldbatch"] = res1["fldbatch"]
            resx["fldexpiry"] = res1["fldexpiry"]
            resx["fldqty"] = 0
            resx["fldstatus"] = modStock.ItemSaleStatus(res1["fldstockid"], sTarget)
            If res1["fldcost"] Then
              resx["fldcost"] = res1["fldcost"]
            Else
              resx["fldcost"] = 0
            Endif
            resx["fldsellpr"] = res1["fldsellpr"]
            If res1["fldmrp"] Then
              resx["fldmrp"] = res1["fldmrp"]
            Else
              resx["fldmrp"] = 0
            Endif
            resx["fldsav"] = False
            resx["fldcategory"] = res1["fldcategory"]
            resx["fldcomp"] = sTarget
            resx["fldcode"] = 0
            resx["xyz"] = True
            resx.Update()
          Endif                                                              ''
          res = modDatabase.$myConn.Create("tbltransfer")
          res["fldstockno"] = newstno
          res["fldoldstockno"] = res1["fldstockno"]
          res["fldstockid"] = res1["fldstockid"]
          res["fldcategory"] = res1["fldcategory"]
          res["fldqty"] = txtqty.Value
          If res1["fldcost"] Then
            res["fldnetcost"] = res1["fldcost"]
          Else
            res["fldnetcost"] = 0
          Endif
          res["fldsellpr"] = res1["fldsellpr"]
          res["fldsav"] = False
          res["fldfromentrytime"] = Now()
          res["fldfromuser"] = modBasic.$lbluser
          res["fldfromcomp"] = modBasic.$compID
          res["fldfromsav"] = False
          res["fldtoentrytime"] = ""
          res["fldtouser"] = ""
          res["fldtocomp"] = sTarget
          res["fldtosav"] = False
          res["fldrequest"] = Trim(txtrequest.Text)
          If Trim(txtcomment.Text) Then
            res["fldcomment"] = Trim(txtcomment.Text)
          Endif
          If sLate Then
            res["fldlockcomp"] = sLate
          Else
            res["fldlockcomp"] = ""
          Endif
          res["fldreference"] = ""
          res["xyz"] = True
          res.Update()
        Endif
        modDatabase.$myConn.Commit
        Dec Application.Busy
        BlankAllBox()

      Endif
    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

Private Sub BlankAllBox()

  cmbroute.Text = ""
  cmbmedicine.Text = ""
  cmbbatch.Clear()
  cmbbatch.Text = ""
  txtqty.Value = 0
  txtcategory.Text = ""
  txtmax.Value = 0
  txtstatus.Value = 0

End

Public Sub mnuall_Click()

  Dim sql As String
  Dim res As Result

  If Message.Question(("Do you want to transfer all your inventory ?"), ("No"), ("Yes")) = 2 Then
    If cmbcompsent.Text Then
      sql = "select fldstockno,fldstockid,fldcategory,fldqty,fldsellpr from tblentry where fldcomp=&1 and fldqty>&2"
      res = modDatabase.$myConn.Exec(sql, modBasic.$compID, 0)
      If res.Available = True Then
        For Each res
          SaveEntryAll(res["fldstockno"], res["fldstockid"], res["fldqty"])
        Next
        ShowTransferGrid()
      Endif
    Endif
  Endif

End

Private Sub SaveEntryAll(stockno As Long, stockid As String, qty As Float)

  Dim res As Result
  Dim rs As Result
  Dim res1 As Result
  Dim newstno As Long
  Dim xstock As Boolean

  Dim xbatch As String
  Dim xexpiry As Date
  Dim xmaxrp As Float
  Dim xstatus As Integer
  Dim sellpr As Float
  Dim xcost As Float
  Dim xcateg As String

  If modBasic.$compID <> cmbcompsent.Text Then
    res1 = modDatabase.$myConn.Exec("select fldstockno,fldstockid,fldcategory,fldbatch,fldexpiry,fldqty,fldstatus,fldcomp,fldsellpr,fldmrp,fldcost from tblentry where fldstockno=&1 and fldstockid=&2", stockno, stockid)
    If res1.Available Then
      xbatch = res1["fldbatch"]
      xexpiry = res1["fldexpiry"]
      If res1["fldmrp"] Then
        xmaxrp = res1["fldmrp"]
      Else
        xmaxrp = 0
      Endif
      sellpr = res1["fldsellpr"]
      If res1["fldcost"] Then
        xcost = res1["fldcost"]
      Else
        xcost = 0
      Endif
      xcateg = res1["fldcategory"]
      xstock = modStock.NewStock(stockid, xbatch, cmbcompsent.Text)
      xstatus = modStock.ItemSaleStatus(cmbmedicine.Text, cmbcompsent.Text)

      modDatabase.$myConn.Begin
      newstno = modStock.GetItemStockNo(stockid, modStock.GetBatchFromStockNo(stockno), cmbcompsent.Text)
      If newstno Then
        If xstock = True Then
          rs = modDatabase.$myConn.Create("tblentry")
          rs["fldstockno"] = newstno
          rs["fldstockid"] = stockid
          rs["fldbatch"] = xbatch
          rs["fldexpiry"] = xexpiry
          rs["fldqty"] = 0
          rs["fldstatus"] = xstatus
          rs["fldcost"] = xcost
          rs["fldsellpr"] = sellpr
          rs["fldmrp"] = xmaxrp
          rs["fldsav"] = True
          rs["fldcategory"] = xcateg
          rs["fldcomp"] = cmbcompsent.Text
          rs["fldcode"] = 0
          rs.Update()
        Endif
        ''
        res = modDatabase.$myConn.Create("tbltransfer")
        res["fldstockno"] = newstno
        res["fldoldstockno"] = stockno
        res["fldstockid"] = stockid
        res["fldcategory"] = xcateg
        res["fldqty"] = qty
        res["fldnetcost"] = xcost
        res["fldsellpr"] = sellpr
        res["fldsav"] = False
        res["fldfromentrytime"] = Now()
        res["fldfromuser"] = modBasic.$lbluser
        res["fldfromcomp"] = modBasic.$compID
        res["fldfromsav"] = False
        res["fldtoentrytime"] = ""
        res["fldtouser"] = ""
        res["fldtocomp"] = cmbcompsent.Text
        res["fldtosav"] = False
        res["fldreference"] = ""
        res["xyz"] = False
        res.Update()
      Endif
      modDatabase.$myConn.Commit

    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  modHelpVariable.CreateErrorReport()

End

Public Sub mnusorting_Click()

  If mnusorting.Checked = True Then
    mnusorting.Checked = False
  Else If mnusorting.Checked = False Then
    mnusorting.Checked = True
  Endif
  If TabPanel1.Index = 0 Then
    If cmbcompsent.Text Then
      ShowTransferGrid()
    Endif
  Else If TabPanel1.Index = 1 Then
    ShowPendingGrid(cmbcomppend.Text)
  Else If TabPanel1.Index = 2 Then
    ShowReceiveGrid(cmbcomprecv.Text)
  Endif

End

Private Sub ShowTransferGrid()

  Dim xorder As String

  If mnusorting.Checked = True Then
    xorder = " ORDER BY fldstockid ASC"
  Else
    xorder = " ORDER BY fldid DESC"
  Endif
  $rData = modDatabase.$myConn.Exec("select fldid,fldstockno,fldoldstockno,fldfromentrytime,fldstockid,fldstockno,fldstockno,fldcategory,fldqty,fldnetcost,fldtocomp,fldfromuser,fldreference,fldlockcomp,fldrequest,fldcomment from tbltransfer where fldfromcomp=&1 and fldsav=&2 and (fldtocomp=&3 or fldlockcomp=&3)" & xorder, modBasic.$compID, False, cmbcompsent.Text)
  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView1, $rData, $aMyFields)

  AdjustGrid(GridView1)
  txttranstotal.Value = Round(modGridView.SumGridAmountDoublet(GridView1, 8, 9), -2)

End

Public Sub GridView1_Data(Row As Integer, Column As Integer)

  Dim xdate As Date

  $rData.MoveTo(Row)
  modGeneralMain.GridViewDecoration(GridView1, Row)
  If Column = 3 Then
    GridView1.Data.Text = modReportVar.GetDateTimeReport($rData[$aMyFields[Column]], gb.GeneralDate)
  Else If Column = 5 Then
    GridView1.Data.Text = modStock.GetBatchFromStockNo($rData[$aMyFields[Column]])
  Else If Column = 6 Then
    xdate = modStock.GetExpiryFromStockNo($rData[$aMyFields[Column]])
    If xdate <= Now() Then
      GridView1.Data.Foreground = modBasic.$HighLightColor
    Endif
    GridView1.Data.Text = modReportVar.GetDateTimeReport(xdate, gb.MediumDate)
  Else
    GridView1.Data.Text = $rData[$aMyFields[Column]]
  Endif
  GridView1.Rows[Row].Height = Max(GridView1.Rows[Row].Height, GridView1.Data.Font.RichTextHeight(GridView1.Data.Text, GridView1.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView1.Rows.Height - GridView1.Font.Height))
  GridView1.Data.WordWrap = True

End

Public Sub GridView1_Click()

  Dim xval As Float
  Dim res As Result
  Dim Row As Integer

  If GridView1.Column = 8 Then
    Row = GridView1.Row
    xval = InputValue(GridView1[GridView1.Row, 4].Text, "Alter QTY", GridView1[GridView1.Row, 8].Text)
    If xval Then
      res = modDatabase.$myConn.Edit("tbltransfer", "fldid=&1 and fldsav=&2", GridView1[GridView1.Row, 0].Text, False)
      res["fldqty"] = xval
      res.Update
      If cmbcompsent.Text Then
        ShowTransferGrid()
      Endif
    Endif
    GridView1.Row = Row
  Endif

End

Public Sub GridView1_Menu()

  mnuhide.Popup

End

Public Sub mnudel_Click()

  If GridView1.Rows.Selection.Count > 0 Then
    modDatabase.$myConn.Delete("tbltransfer", "fldid=&1 and fldsav=&2", GridView1[GridView1.Row, 0].Text, False)
    If cmbcompsent.Text Then
      ShowTransferGrid()
    Endif
  Endif

End

Public Sub btnfullsend_Click()

  modCHTMLReport.ExportGridToHTML(GridView1, "STOCK SEND TO", cmbcompsent.Text)

End

Public Sub btnsavefrom_Click()

  FirstSaveItems()

End

Private Sub FirstSaveItems()

  Dim res As Result
  Dim res1 As Result

  res = modDatabase.$myConn.Exec("select fldid,fldstockno,fldoldstockno,fldqty,fldfromcomp,fldtocomp,fldlockcomp from tbltransfer where fldfromcomp=&1 and fldsav=&2 and fldtocomp=&3", modBasic.$compID, False, cmbcompsent.Text)
  If res.Available = True Then
    Inc Application.Busy
    For Each res
      If res["fldqty"] <= modStock.TotalQTYbyStockNo(res["fldoldstockno"]) Then

        modDatabase.$myConn.Begin
        If res["fldlockcomp"] Then
          modStockSub.AddToExistEntry(res["fldstockno"], res["fldqty"], "Locker") ''add to new
          modStockSub.AddToExistEntry(res["fldoldstockno"], (0 - res["fldqty"]), res["fldfromcomp"])  ''reduce from old
          res1 = modDatabase.$myConn.Edit("tbltransfer", "fldid=&1", res["fldid"])
          res1["fldsav"] = True
          res1["fldfromsav"] = True
          res1["fldfromentrytime"] = Now()
          res1["fldfromuser"] = modBasic.$lbluser
          res1.Update()
        Else
          res1 = modDatabase.$myConn.Edit("tbltransfer", "fldid=&1", res["fldid"])
          res1["fldsav"] = True
          res1["fldfromsav"] = True
          res1["fldfromentrytime"] = Now()
          res1["fldfromuser"] = modBasic.$lbluser
          res1.Update()
        Endif
        modDatabase.$myConn.Commit

      Endif
    Next
    Dec Application.Busy
    If cmbcompsent.Text Then
      ShowTransferGrid()
    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

''====================== Receive ======================================
Public Sub btnrecvrefresh_Click()

  If cmbcomprecv.Text Then
    ShowReceiveGrid(cmbcomprecv.Text)
  Endif

End

Public Sub rbtrans_Click()

  btnrecvrefresh_Click()

End

Public Sub rblocked_Click()

  btnrecvrefresh_Click()

End

Public Sub cmbcomprecv_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbcomprecv)
  modFillContainer.RestrictComboToContent(cmbcomprecv)

End

Public Sub cmbcomprecv_Click()

  lblcomprecv.Text = modGeneral.GetCompNameFromCompID(cmbcomprecv.Text)

End

Private Sub ShowReceiveGrid(xcomp As String)

  Dim xorder As String

  If mnusorting.Checked = True Then
    xorder = " ORDER BY fldstockid ASC"
  Else
    xorder = " ORDER BY fldid DESC"
  Endif
  If rbtrans.Value = True Then
    $rData1 = modDatabase.$myConn.Exec("select fldid,fldstockno,fldoldstockno,fldfromentrytime,fldstockid,fldstockno,fldstockno,fldcategory,fldqty,fldnetcost,fldfromcomp,fldfromuser,fldreference,fldlockcomp,fldrequest,fldcomment from tbltransfer where fldtocomp=&1 and fldsav=&2 and fldfromsav=&3 and fldtosav=&4 and fldfromcomp like &5 and fldlockcomp IS NULL" & xorder, modBasic.$compID, True, True, False, xcomp)                            ''
  Else If rblocked.Value = True Then
    $rData1 = modDatabase.$myConn.Exec("select fldid,fldstockno,fldoldstockno,fldfromentrytime,fldstockid,fldstockno,fldstockno,fldcategory,fldqty,fldnetcost,fldfromcomp,fldfromuser,fldreference,fldlockcomp,fldrequest,fldcomment from tbltransfer where fldlockcomp=&1 and fldsav=&2 and fldfromsav=&3 and fldtosav=&4 and fldfromcomp like &5 and fldtocomp=&6" & xorder, modBasic.$compID, True, True, False, xcomp, "Locker")
  Endif
  $aMyFields1 = New String[]
  modGridView.ReadSmallData(GridView2, $rData1, $aMyFields1)
  AdjustGrid(GridView2)
  txttranstotal2.Value = Round(modGridView.SumGridAmountDoublet(GridView2, 8, 9), -2)

End

Public Sub GridView2_Data(Row As Integer, Column As Integer)

  Dim xdate As Date

  $rData1.MoveTo(Row)
  modGeneralMain.GridViewDecoration(GridView2, Row)
  If Column = 3 Then
    GridView2.Data.Text = modReportVar.GetDateTimeReport($rData1[$aMyFields1[Column]], gb.GeneralDate)
  Else If Column = 5 Then
    GridView2.Data.Text = modStock.GetBatchFromStockNo($rData1[$aMyFields1[Column]])
  Else If Column = 6 Then
    xdate = modStock.GetExpiryFromStockNo($rData1[$aMyFields1[Column]])
    If xdate <= Now() Then
      GridView2.Data.Foreground = modBasic.$HighLightColor
    Endif
    GridView2.Data.Text = modReportVar.GetDateTimeReport(xdate, gb.MediumDate)
  Else
    GridView2.Data.Text = $rData1[$aMyFields1[Column]]
  Endif
  GridView2.Rows[Row].Height = Max(GridView2.Rows[Row].Height, GridView2.Data.Font.RichTextHeight(GridView2.Data.Text, GridView2.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView2.Rows.Height - GridView2.Font.Height))
  GridView2.Data.WordWrap = True

End

Public Sub btnsaveto_Click()

  If Message.Question(("Stock Transfer Process will be complete. Are you sure?"), ("No"), ("Yes")) = 2 Then
    If rbtrans.Value = True Then
      SaveFinalTransfer()
    Else If rblocked.Value = True Then
      SaveFinalLockTransfer()
    Endif
    ShowReceiveGrid(cmbcomprecv.Text)
  Endif

End

Private Sub SaveFinalTransfer()

  Dim res As Result
  Dim res1 As Result
  Dim ref As String
  Dim idLock As Boolean
  Dim xgo As Boolean

  If cmbcomprecv.Text Then
    res = modDatabase.$myConn.Exec("select fldid,fldstockno,fldoldstockno,fldqty,fldfromcomp,fldtocomp,fldnetcost from tbltransfer where fldtocomp=&1 and fldsav=&2 and fldfromsav=&3 and fldtosav=&4 and fldfromcomp like &5 and fldlockcomp IS NULL", modBasic.$compID, True, True, False, cmbcomprecv.Text)
    If res.Available = True Then

      Inc Application.Busy
      idLock = modBillLock.LockTableForID("Reference")
      If idLock = True Then

        modDatabase.$myConn.Begin
        ref = modBillLock.ReferenceString("Stock Transfer")
        If ref Then
          For Each res
            xgo = False
            If chkselall.Value = True Then
              xgo = True
            Else If chkselall.Value = False Then
              If GridView2.Rows[res.Index].Selected = True Then
                xgo = True
              Endif
            Endif
            If xgo = True Then
              If res["fldqty"] <= modStock.TotalQTYbyStockNo(res["fldoldstockno"]) Then
                If res["fldnetcost"] Then
                  modStockSub.AddToExistEntryCost(res["fldstockno"], res["fldqty"], res["fldtocomp"], res["fldnetcost"]) ''add to new
                Else
                  modStockSub.AddToExistEntry(res["fldstockno"], res["fldqty"], res["fldtocomp"]) ''add to new
                Endif
                modStockSub.AddToExistEntry(res["fldoldstockno"], (0 - res["fldqty"]), res["fldfromcomp"])  ''reduce from old
                res1 = modDatabase.$myConn.Edit("tbltransfer", "fldid=&1", res["fldid"])
                res1["fldtoentrytime"] = Now()
                res1["fldtouser"] = modBasic.$lbluser
                res1["fldtosav"] = True
                res1["fldreference"] = ref
                res1["xyz"] = False
                res1.Update()
              Else
                Balloon.Warning(("Insufficient stock"), btnsaveto)
                Balloon.Delay = modBasic.$BalloonDelay
              Endif
            Endif
          Next
        Endif  ''if ref no exist
        modDatabase.$myConn.Commit

        modBillLock.ReleaseLockTable("Reference")
      Endif  ''if locked
      Dec Application.Busy

    Endif  ''if result available
  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  If idLock = True Then
    modBillLock.ReleaseLockTable("Reference")
  Endif
  modHelpVariable.CreateErrorReport()

End

Private Sub SaveFinalLockTransfer()

  Dim res As Result
  Dim res1 As Result
  Dim ref As String
  Dim idLock As Boolean
  Dim newstno As Long
  Dim xstock As Boolean
  Dim rsn As Result
  Dim resx As Result

  If cmbcomprecv.Text Then
    res = modDatabase.$myConn.Exec("select fldid,fldstockid,fldstockno,fldoldstockno,fldqty,fldfromcomp,fldtocomp,fldlockcomp,fldnetcost from tbltransfer where fldlockcomp=&1 and fldsav=&2 and fldfromsav=&3 and fldtosav=&4 and fldfromcomp=&5 and fldtocomp=&6", modBasic.$compID, True, True, False, cmbcomprecv.Text, "Locker")
    If res.Available = True Then

      Inc Application.Busy
      idLock = modBillLock.LockTableForID("Reference")
      If idLock = True Then

        modDatabase.$myConn.Begin
        ref = modBillLock.ReferenceString("Stock Transfer")
        If ref Then
          For Each res
            rsn = modDatabase.$myConn.Exec("select fldbatch,fldexpiry,fldsellpr,fldcategory,fldmrp,fldcost from tblentry where fldstockno=&1", res["fldstockno"])
            If rsn.Available Then
              xstock = modStock.NewStock(res["fldstockid"], rsn["fldbatch"], res["fldlockcomp"])
              newstno = modStock.GetItemStockNo(res["fldstockid"], rsn["fldbatch"], res["fldlockcomp"])
              If newstno Then
                If xstock = True Then
                  resx = modDatabase.$myConn.Create("tblentry")
                  resx["fldstockno"] = newstno
                  resx["fldstockid"] = res["fldstockid"]
                  resx["fldbatch"] = rsn["fldbatch"]
                  resx["fldexpiry"] = rsn["fldexpiry"]
                  resx["fldqty"] = 0
                  resx["fldstatus"] = modStock.ItemSaleStatus(res["fldstockid"], res["fldlockcomp"])
                  If rsn["fldcost"] Then
                    resx["fldcost"] = rsn["fldcost"]
                  Else
                    resx["fldcost"] = 0
                  Endif
                  resx["fldsellpr"] = rsn["fldsellpr"]
                  If rsn["fldmrp"] Then
                    resx["fldmrp"] = rsn["fldmrp"]
                  Else
                    resx["fldmrp"] = 0
                  Endif
                  resx["fldsav"] = False
                  resx["fldcategory"] = rsn["fldcategory"]
                  resx["fldcomp"] = res["fldlockcomp"]
                  resx["fldcode"] = 0
                  resx["xyz"] = True
                  resx.Update()
                Endif

                If res["fldqty"] <= modStock.TotalQTYbyStockNo(res["fldstockno"]) Then
                  If res["fldnetcost"] Then
                    modStockSub.AddToExistEntryCost(newstno, res["fldqty"], res["fldlockcomp"], res["fldnetcost"]) ''add to new
                  Else
                    modStockSub.AddToExistEntry(newstno, res["fldqty"], res["fldlockcomp"]) ''add to new
                  Endif
                  modStockSub.AddToExistEntry(res["fldstockno"], (0 - res["fldqty"]), res["fldtocomp"])  ''reduce from old
                  res1 = modDatabase.$myConn.Edit("tbltransfer", "fldid=&1", res["fldid"])
                  res1["fldtoentrytime"] = Now()
                  res1["fldtouser"] = modBasic.$lbluser
                  res1["fldtocomp"] = modBasic.$compID
                  res1["fldtosav"] = True
                  res1["fldstockno"] = newstno
                  res1["fldreference"] = ref
                  res1["xyz"] = False
                  res1.Update()
                Else
                  Balloon.Warning(("Insufficient stock"), btnsaveto)
                  Balloon.Delay = modBasic.$BalloonDelay
                Endif
              Endif
            Endif
          Next
        Endif
        modDatabase.$myConn.Commit

        modBillLock.ReleaseLockTable("Reference")
      Endif  ''if locked
      Dec Application.Busy

    Endif  ''if result available
  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  If idLock = True Then
    modBillLock.ReleaseLockTable("Reference")
  Endif
  modHelpVariable.CreateErrorReport()

End

Public Sub GridView2_Menu()

  mnuhide1.Popup

End

Public Sub mnurecvdel_Click()

  Dim res As Result

  If rbtrans.Value = True Then
    If GridView2.Rows.Selection.Count > 0 Then
      res = modDatabase.$myConn.Edit("tbltransfer", "fldid=&1 and fldtosav=&2", GridView2[GridView2.Row, 0].Text, False)
      res["fldsav"] = False
      res["xyz"] = False
      res.Update()
      If cmbcomprecv.Text Then
        ShowReceiveGrid(cmbcomprecv.Text)
      Endif
      Message.Warning(("Item rejected"), ("OK"))
    Endif
  Endif

End

Public Sub btnfullrecv_Click()

  modCHTMLReport.ExportGridToHTML(GridView2, "STOCK RECEIVED", cmbcompsent.Text)

End

''===================== Pending ==============================
Public Sub cmbcomppend_Click()

  If cmbcomppend.Text Then
    lblcomppend.Text = modGeneral.GetCompNameFromCompID(cmbcomppend.Text)
  Endif

End

Public Sub cmbcomppend_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbcomppend)
  modFillContainer.RestrictComboToContent(cmbcomppend)

End

Public Sub btnpendrefresh_Click()

  If cmbcomppend.Text Then
    ShowPendingGrid(cmbcomppend.Text)
  Endif

End

Private Sub ShowPendingGrid(xcomp As String)

  Dim xorder As String

  If mnusorting.Checked = True Then
    xorder = " ORDER BY fldstockid ASC"
  Else
    xorder = " ORDER BY fldid DESC"
  Endif
  $rData2 = modDatabase.$myConn.Exec("select fldid,fldstockno,fldoldstockno,fldfromentrytime,fldstockid,fldstockno,fldstockno,fldcategory,fldqty,fldnetcost,fldtocomp,fldfromuser,fldreference,fldlockcomp,fldrequest,fldcomment from tbltransfer where fldfromcomp=&1 and fldfromsav=&2 and fldtocomp like &3 and fldtosav=&4 and fldsav=&5" & xorder, modBasic.$compID, True, xcomp, False, True)
  $aMyFields2 = New String[]
  modGridView.ReadSmallData(GridView3, $rData2, $aMyFields2)
  AdjustGrid(GridView3)

End

Public Sub GridView3_Data(Row As Integer, Column As Integer)

  Dim xdate As Date

  $rData2.MoveTo(Row)
  modGeneralMain.GridViewDecoration(GridView3, Row)
  If Column = 3 Then
    GridView3.Data.Text = modReportVar.GetDateTimeReport($rData2[$aMyFields2[Column]], gb.GeneralDate)
  Else If Column = 5 Then
    GridView3.Data.Text = modStock.GetBatchFromStockNo($rData2[$aMyFields2[Column]])
  Else If Column = 6 Then
    xdate = modStock.GetExpiryFromStockNo($rData2[$aMyFields2[Column]])
    If xdate <= Now() Then
      GridView3.Data.Foreground = modBasic.$HighLightColor
    Endif
    GridView3.Data.Text = modReportVar.GetDateTimeReport(xdate, gb.MediumDate)
  Else
    GridView3.Data.Text = $rData2[$aMyFields2[Column]]
  Endif
  GridView3.Rows[Row].Height = Max(GridView3.Rows[Row].Height, GridView3.Data.Font.RichTextHeight(GridView3.Data.Text, GridView3.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView3.Rows.Height - GridView3.Font.Height))
  GridView3.Data.WordWrap = True

End

Public Sub GridView3_Menu()

  mnupending.Popup

End

Public Sub mnudelpending_Click()

  If GridView3.Rows.Selection.Count > 0 Then
    modDatabase.$myConn.Delete("tbltransfer", "fldid=&1", GridView3[GridView3.Row, 0].Text)
    If cmbcomppend.Text Then
      ShowPendingGrid(cmbcomppend.Text)
    Endif
  Endif

End

Public Sub txtqty_GotFocus()

  txtqty.SelectAll

End

Public Sub btnmidexport_Click()

  modCHTMLReport.ExportGridToHTML(GridView3, "PENDING TRANSFERS", cmbcomppend.Text)

End
