' Gambas class file

Private $rData As Result
Private $aMyFields As String[]

Public Sub Form_Open()

  modGeneralMain.ArrangeFormCentre(Me)
  cmbroute.List = modMedicine.ComboRoute()
  cmbvendor.List = modSupplier.FillVendorNameCombo("Active")
  cmbtype.List = ["Cash Payment", "Credit Payment"]
  cmbexpformat.List = ["yyyy/mm/dd", "mm/dd/yyyy", "dd/mm/yyyy"]
  txtdatafile.Text = modSettings.ShowSettingFromFIle("StockImport/DataFile")
  txtmasterfile.Text = modSettings.ShowSettingFromFIle("StockImport/MasterFile")

End

Public Sub Form_Resize()

  modGeneralMain.ShowSelectedFormMenu(Me)

End

Public Sub Form_Close()

  modGeneralMain.RecordFormExit(Me)

End

Public Sub Form_KeyRelease()

  modGeneralmain.GoToNextControlTab()

End

Public Sub btnset_Click()

  Dim sList As String[]
  Dim newList As String[]
  Dim sPath As String

  sList = modString.GetSelStringFieldFromCSV(txtdatafile.Text, 0, ";")
  newList = modString.BinaryDistinctStringArray(sList)
  If newList Then
    newList.Sort()
  Endif
  If Not txtmasterfile.Text Then
    If Dialog.SelectDirectory() Then Return
    sPath = Dialog.Path &/ "master.csv"
    File.Save(sPath, newList.Join(gb.NewLine))
    txtmasterfile.Text = sPath
  Endif

End

Public Sub txtdatafile_Click()

  If Dialog.OpenFile() Then Return
  txtdatafile.Text = Dialog.Path

End

Public Sub txtmasterfile_Click()

  If Dialog.OpenFile() Then Return
  txtmasterfile.Text = Dialog.Path

End

Public Sub btndatafile_Click()

  If txtdatafile.Text Then
    modSettings.SaveSettingsToFile("StockImport/DataFile", txtdatafile.Text)
    Balloon.Info(("Information saved"), btndatafile)
    Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnmasterfile_Click()

  If txtmasterfile.Text Then
    modSettings.SaveSettingsToFile("StockImport/MasterFile", txtmasterfile.Text)
    Balloon.Info(("Information saved"), btnmasterfile)
    Balloon.Delay = modBasic.$BalloonDelay
    SetParticularList()
    TextArea1.Text = File.Load(txtmasterfile.Text)
  Endif

End

Private Function GetSpecValueFromCSV(sWord As String, sPath As String, Column1 As Integer, Column2 As Integer, sMark As String) As String

  Dim hFile As File
  Dim sLine As String
  Dim linWord As String[]
  Dim xx As String

  If Exist(sPath) Then
    hFile = Open sPath
    modBasic.DebugString("Open File " & sPath)
    For Each sLine In hFile.Lines
      If Len(Trim(sLine)) Then
        linWord = Split(sLine, sMark)
        If linWord.Count > 1 Then
          If Trim(linWord[Column1]) = sWord Then
            If linWord[Column2] Then
              xx = Trim(linWord[Column2])
            Endif
            Break
          Endif
        Endif
      Endif
    Next
    hFile.Close()
  Endif

  Return xx

End

Private Sub SetParticularList()

  Dim sLine As String
  Dim hFile As File
  Dim asx As String[]
  Dim aList As String[]

  aList = New String[]
  hFile = Open txtmasterfile.Text
  For Each sLine In hFile.Lines
    asx = Split(sLine, ";")
    If asx.Count = 1 Then
      aList.Add(asx[0])
    Endif
  Next
  hFile.Close()
  cmbparticulars.List = aList

End

Public Sub cmbparticulars_Click()

  cmbroute.Text = ""
  cmbroute.SetFocus

End

Public Sub cmbroute_GotFocus()

  cmbmedicine.Clear
  cmbmedicine.Text = ""

End

Public Sub cmbroute_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbroute)
  modFillContainer.RestrictComboToContent(cmbroute)

End

Public Sub cmbmedicine_GotFocus()

  Dim res As Result

  If Not cmbroute.Text Then
    cmbroute.SetFocus
  Else If cmbroute.Text Then
    If Not cmbmedicine.Text Then
      res = modStock.ItemListForPurchaseResult(cmbroute.Text, "Generic")
      cmbmedicine.Text = GridViewNew("Select Particulars", modControlSub.GetDirectFillresult(res), False, TextArea1, TextArea1.Height)
      btnedit.SetFocus
    Endif
  Endif

End

Public Sub btnedit_Click()

  modString.ChangeTextInFile(txtmasterfile.Text, cmbparticulars.Text, cmbparticulars.Text & ";" & cmbroute.Text & ";" & cmbmedicine.Text)
  SetParticularList()
  TextArea1.Text = File.Load(txtmasterfile.Text)
  cmbroute.Text = ""
  cmbmedicine.Clear()
  cmbmedicine.Text = ""

End

Public Sub btnedit_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    btnedit_Click()
  Endif

End

''==================================================
Public Sub btnhelp_Click()

  Dim xList As String[] = ["Particulars", "Batch No", "Expiry(mm/dd/yyyy)", "Unit Cost", "Total QTY", "Sell Price"]

  Message.Info(xList.Join(";"), ("OK"))

End

Public Sub Button1_Click()

  Dim hFile As File
  Dim asx As String[]
  Dim sLine As String

  Dim xstock As Boolean
  Dim StockNo As Long
  Dim ItemCategory As String

  Dim xroute As String
  Dim xmedicine As String

  Dim ReportFile As File
  Dim xPath As String

  Inc Application.Busy
  xPath = User.Home &/ modString.GetDateString(Now())
  ReportFile = Open xPath For Write Create

  hFile = Open txtdatafile.Text
  For Each sLine In hFile.Lines
    asx = Split(sLine, ";")
    If asx.Count = 6 Then
      If CFloat(asx[4]) > 0 Then
        xroute = GetSpecValueFromCSV(Trim(asx[0]), txtmasterfile.Text, 0, 1, ";")
        xmedicine = GetSpecValueFromCSV(Trim(asx[0]), txtmasterfile.Text, 0, 2, ";")

        If xroute And If xmedicine Then
          ItemCategory = modNonMedical.GetBillItemCategoryFromCombo(xroute)
          xstock = modStock.NewStock(xmedicine, Trim(asx[1]), modBasic.$compID)

          modDatabase.$myConn.Begin
          StockNo = modStock.GetItemStockNo(xmedicine, Trim(asx[1]), modBasic.$compID)
          If StockNo Then
            If xstock = True Then
              AddNewEntry(StockNo, xmedicine, ItemCategory, Trim(asx[1]), GetExpiryDateValue(asx[2]), CFloat(asx[5]))
            Endif
            AddPurchaseEntry(StockNo, ItemCategory, xmedicine, Trim(asx[1]), CFloat(asx[3]), CFloat(asx[4]), CFloat(asx[5]))
            Write #ReportFile, sLine & gb.NewLine
          Endif
          modDatabase.$myConn.Commit
        Endif

      Endif
    Endif
  Next
  hFile.Close()
  Dec Application.Busy
  Message.Info("Uploaded List is " & xPath, "OK")
  ShowPurchaseGrid()

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

Private Sub AddNewEntry(StockNo As Long, stockid As String, ItemCategory As String, sBatch As String, sExpiry As Date, sellPrice As Float)

  Dim res As Result

  If stockid And If sBatch And If StockNo > 0 Then
    res = modDatabase.$myConn.Create("tblentry")
    res["fldstockno"] = StockNo
    res["fldstockid"] = stockid
    res["fldbatch"] = Trim(sBatch)
    res["fldexpiry"] = modDate.StartSqlDate(sExpiry)
    res["fldqty"] = 0
    res["fldstatus"] = modStock.ItemSaleStatus(stockid, modBasic.$compID)
    res["fldsellpr"] = sellPrice
    res["fldsav"] = False
    res["fldcategory"] = ItemCategory
    res["fldcomp"] = modBasic.$compID
    res["fldcode"] = 0
    res["xyz"] = True
    res.Update()
  Endif

End

Private Sub AddPurchaseEntry(StockNo As Long, ItemCategory As String, stockid As String, sBatch As String, sCost As Float, sQTY As Float, sellPrice As Float)

  Dim res As Result
  Dim rs As Result

  rs = modDatabase.$myConn.Exec("select fldstockid,fldbatch from tblentry where fldstockno=&1", StockNo)
  If rs.Available = True Then
    If rs!fldstockid = stockid And If rs!fldbatch = Trim(sBatch) Then
      res = modDatabase.$myConn.Create("tblpurchase")
      res["fldpurtype"] = cmbtype.Text
      res["fldbillno"] = Trim(txtbillno.Text)
      res["fldsuppname"] = cmbvendor.Text
      res["fldcategory"] = ItemCategory
      res["fldstockno"] = StockNo
      res["fldstockid"] = stockid
      res["fldmrp"] = 0
      res["fldtotalcost"] = Round(sCost * sQTY, -2)
      res["fldtaxamt"] = 0
      res["fldmargin"] = 0
      res["fldtotalqty"] = sQTY
      res["fldreturnqty"] = 0
      res["fldcasdisc"] = 0
      res["fldcasbonus"] = 0
      res["fldqtybonus"] = 0
      res["fldcarcost"] = 0
      res["fldnetcost"] = sCost
      res["flsuppcost"] = sCost
      res["fldsellprice"] = sellPrice
      res["fldpurdate"] = dtpurdate.Value
      res["flduserid"] = modBasic.$lbluser
      res["fldtime"] = Now()
      res["fldcomp"] = modBasic.$compID
      res["fldsav"] = True
      res["fldreference"] = ""
      res["fldchk"] = False
      res["xyz"] = True
      res.Update()
    Endif
  Endif

End

Private Sub ShowPurchaseGrid()

  Dim sql As String
  Dim xFields As String[]

  xFields = ["fldid", "fldpurtype", "fldpurdate", "fldbillno", "fldsuppname", "fldcategory", "fldstockno", "fldstockid", "fldstockno", "fldstockno", "fldtotalqty", "fldmrp", "fldtotalcost", "fldmargin", "fldcasdisc", "fldcasbonus", "fldqtybonus", "fldcarcost", "fldnetcost", "flsuppcost", "fldsellprice", "flduserid", "fldtime", "fldcomp"]
  sql = "select " & xFields.Join(",") & " from tblpurchase where fldpurtype=&1 and fldbillno=&2 and fldsuppname=&3 and fldcomp=&4 and fldsav=&5 ORDER BY fldstockid"                             ''
  $rData = modDatabase.$myConn.Exec(sql, cmbtype.Text, Trim(txtbillno.Text), cmbvendor.Text, modBasic.$compID, True)

  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView1, $rData, $aMyFields)

  With GridView1
    .Columns[6].Text = "Code"
    .Columns[7].Text = "Particulars"
    .Columns[8].Text = "Batch"
    .Columns[9].Text = "Expiry"
    .Columns[10].Text = "TotQTY"
    .Columns[11].Text = "MRP"
    .Columns[12].Text = "TotCost"
    .Columns[13].Text = "Margin"
    .Columns[18].Text = "NetCost"
    .Columns[19].Text = "DistCost"
    .Columns[20].Text = "SellPr"
    .Columns[21].Text = "User"
    .Columns[22].Text = "DateTime"
    .Columns[23].Text = "Comp"

    .Columns[0].Width = 1
    .Columns[1].Width = 1
    .Columns[2].Width = 1
    .Columns[3].Width = 1
    .Columns[4].Width = 1
    .Columns[5].Width = 1
    .Columns[6].Width = 50 * modBasic.$AppWidthRatio
    .Columns[7].Width = 250 * modBasic.$AppWidthRatio
    .Columns[8].Width = 75 * modBasic.$AppWidthRatio
    .Columns[9].Width = 125 * modBasic.$AppWidthRatio
    .Columns[10].Width = 75 * modBasic.$AppWidthRatio
    .Columns[11].Width = 75 * modBasic.$AppWidthRatio
    .Columns[12].Width = 75 * modBasic.$AppWidthRatio
    .Columns[13].Width = 75 * modBasic.$AppWidthRatio
    .Columns[14].Width = 1
    .Columns[15].Width = 1
    .Columns[16].Width = 1
    .Columns[17].Width = 1
    .Columns[18].Width = 75 * modBasic.$AppWidthRatio
    .Columns[19].Width = 75 * modBasic.$AppWidthRatio
    .Columns[20].Width = 75 * modBasic.$AppWidthRatio
    .Columns[21].Width = 75 * modBasic.$AppWidthRatio
    .Columns[22].Width = 150 * modBasic.$AppWidthRatio
    .Columns[23].Width = 75 * modBasic.$AppWidthRatio
  End With

End

Public Sub GridView1_Data(Row As Integer, Column As Integer)

  Dim xdate As Date

  $rData.MoveTo(Row)
  modGeneralMain.GridViewDecoration(GridView1, Row)
  If Column = 8 Then
    GridView1.Data.Text = modStock.GetBatchFromStockNo($rData["fldstockno"])
  Else If Column = 9 Then
    xdate = modStock.GetExpiryFromStockNo($rData["fldstockno"])
    If xdate <= Now() Then
      GridView1.Data.Foreground = modBasic.$HighLightColor
    Endif
    GridView1.Data.Text = modReportVar.GetDateTimeReport(xdate, gb.MediumDate)
  Else If Column = 22 Then
    GridView1.Data.Text = modReportVar.GetDateTimeReport($rData["fldtime"], gb.GeneralDate)
  Else
    GridView1.Data.Text = $rData[$aMyFields[Column]]
  Endif
  GridView1.Rows[Row].Height = Max(GridView1.Rows[Row].Height, GridView1.Data.Font.RichTextHeight(GridView1.Data.Text, GridView1.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView1.Rows.Height - GridView1.Font.Height))
  GridView1.Data.WordWrap = True

End

Public Sub btnsort_Click()

  Dim sData As String

  If Message.Question("Do you want to sort Master file contents ?", ("No"), ("Yes")) = 2 Then
    sData = modString.GetStringArrayFromFile(txtmasterfile.Text, True).Join(gb.NewLine)
    Try Kill txtmasterfile.Text
    File.Save(txtmasterfile.Text, sData)
    Message.Info(("Process completed"), ("OK"))
  Endif

End

Private Function GetExpiryDateValue(sDate As String) As Date

  Dim xdat As Date
  Dim asx As String[]
  Dim asy As String[]
  Dim i As Integer

  Dim xyr As Integer
  Dim xmon As Integer
  Dim xday As Integer
  Dim sFormat As String

  sFormat = cmbexpformat.Text
  If sFormat Then
    asx = Split(sFormat, "/")
    For i = 0 To 2
      If asx[i] = "yyyy" Then
        xyr = i
      Endif
      If asx[i] = "mm" Then
        xmon = i
      Endif
      If asx[i] = "dd" Then
        xday = i
      Endif
    Next
    asy = Split(sDate, "/")
    Try xdat = Date(CInt(asy[xyr]), CInt(asy[xmon]), CInt(asy[xday]))

  Else
    Try xdat = Val(sDate)
  Endif

  Return xdat

End
