' Gambas class file

Private $rData As Result
Private $aMyFields As String[]

Private $UserRestrict As String[]
Private $Category As String
Private $sDepart As String
Private $secText As String
Private $focus As Boolean
Private $reference As String
Private $sTatus As String
Private $Grouping As String

Private $billModeTest As String
Private $billModeRadio As String
Private $billModePharmacy As String
Private $billModeProcedure As String
Private $billModeEquipment As String
Private $billModeService As String
Private $billModeOthers As String

''Tabbed controls
Private aIndexLabel As New Object[50]    ''aLab
Private aNameLabel As New Object[50]       ''aObj
Private aAbnormCheck As New Object[50]       ''aObj2
Private aHTMLText As New Object[50]          ''aObj11
Private aLineText As New Object[50]
Private aUnitText As New Object[50]
Private aValueBox As New Object[50]
Private aQuantiBox As New Object[50]
Private aQuantiMax As New Object[50]
Private aQuantiMin As New Object[50]
Private aClinBox As New Object[50]
Private aDateBox As New Object[50]
Private aBSDate As New Object[50]
Private aComboBox As New Object[50]
Private aChkLock As New Object[50]
Private aTextArea As New Object[50]
Private aDichoValue As New Object[50]
Private aLeftRight As New Object[50]
Private aGridView As New Object[50]         ''aObg11
Private aListBox As New Object[50]
Private aGenTextArea As New Object[50]
Private aButtonBox As New Object[50]
Private aHelpButton As New Object[50]          ''aObj3
''other variables
Private $encid As String
Private $sTable As String
Private $idList As String[]
Private $sCategory As String
''Arrays
Private $xCode As String[]
Private $xType As String[]
Private $xOption As String[]
Private $xitem As String[]
Private $xExam As String[]
Private $xOpList As String[]
Private $xSysCons As String[]
Private $xSource As String[]
Private $xHelpList As String[]
Private $xUniqList As Integer[]
Private $xDefaultLst As String[]

Private AppFactor As Float

Public Sub _new(sCategory As String, encid As String, sDepartment As String)

  $Category = sCategory
  txtencid.Text = encid
  $sDepart = sDepartment
  $focus = True

End

Public Sub Form_Open()

  Dim sList As String[]

  modGeneralMain.ArrangeEmbedForms(Me, Panel1, "Vertical")
  Me.Icon = Picture[modGeneralMain.$strLogo]
  If $Category = modMaternalDash.$Chapter Then
    mnumaternalCRF.Visible = True
  Endif
  Me.Title = $Category
  $UserRestrict = modBasic.$ClinicDisableCompo
  cmbpatheightunit.List = ["cm", "inch", "foot"]

  $Grouping = modSettings.ShowSettingFromFIle("ClinicForms/GroupStructuredExams")
  If $Grouping = "Separate" Then
    Panel7.Visible = True
  Else
    Panel7.Visible = False
  Endif
  $reference = modSettings.ShowSettingFromFIle($Category & "/RecommendedExam")
  If Not $reference Then
    sList = modMedicine.FillClinicalReference($Category)
    If sList And If sList.Count Then
      $reference = sList[0]
    Endif
  Endif
  If $reference Then
    cmbcategory.List = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldcategory) as col from tblstructexam where fldclass=&1 and fldsubclass=&2 and fldreferencee=&3", $sDepart, $Category, $reference))
    If cmbcategory.Count = 1 Then
      cmbcategory.Index = 0
      LoadTreeData()
    Endif
  Endif
  If MMain.$CustomFormat = "Patan" Then
    mnuaddConsult.Visible = True
  Endif

  If txtencid.Text Then
    GetEncounterValue()
  Else
    modGeneralMain.SetEncIDPrefix(txtencid)
    txtencid.SetFocus
  Endif

End

Public Sub Form_Resize()

  modGeneralMain.ShowSelectedFormMenu(Me)

End

Public Sub Form_Activate()

  Me.Icon = Picture["icons/coll4.png"]
  If $focus = True Then
    txtencid.SetFocus
  Endif

End

Public Sub Form_Close()

  If txtencid.Text Then
    modPatientSub.ReleaseLockEncounter(Trim(txtencid.Text), modHelpVariable.$LogInCategory)
  Endif
  modGeneralMain.RecordFormExit(Me)

End

Public Sub Form_Deactivate()

  Me.Icon = Picture[modGeneralMain.$strLogo]

End

Public Sub mnublank_Click()

  Dim hForm As FmWardHistory

  hForm = New FmWardHistory($Category, "", $sDepart)
  Me.Close
  modAppSupport.FindWorSpace(modHelpVariable.$LogInCategory).Add(hForm)

End

''--------- special menu ---------------------
Public Sub mnumaternalCRF_Click()

  Dim xdate As Date[]
  Dim xPath As String

  If $Category = modMaternalDash.$Chapter Then
    xdate = DoubleDates("Select Dates", "Maternal CRF", [Now(), Now()])
    If xdate Then
      Inc Application.Busy
      xPath = modMaternalDash.GetMaternalDashBoard(modDatabase.$syConn, xdate[0], xdate[1])
      Dec Application.Busy
      modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
    Endif
  Endif

End

''-------------------------------------- patient profile ----------------------------------------------
Public Sub mnulastencid_Click()

  txtencid.Text = modSettings.ShowLogValues("LastValue/Encounter")

End

Public Sub mnupatlock_Click()

  If txtencid.Text Then
    modPatientSub.LockPatientActivity(Me.Name, Trim(txtencid.Text))
  Endif

End

Public Sub txtencid_LostFocus()

  GetEncounterValue()

End

Private Sub GetEncounterValue()

  Dim res As Result
  Dim xallow As Boolean

  If Not txtpatientname.Text Then
    If Not txtencid.Text Then Return
    If modBasic.$EncIdPrefix And If txtencid.Text = modBasic.$EncIdPrefix Then
      txtencid.SetFocus
      Return
    Endif

    ' If modPatientSub.LockEncounterDesk(Trim(txtencid.Text)) = False Then
    '   txtencid.Text = ""
    '   Balloon.Warning(("Encounter Locked"), txtencid)
    '   Balloon.Delay = modBasic.$BalloonDelay
    '   txtencid.SetFocus
    ' Endif

    dtdob.Value = ""
    If txtencid.Text Then
      Me.Title = "ENC: " & txtencid.Text
      If txtencid.Text = modBasic.$EncIdPrefix Then
      Else
        modSettings.SaveValuesToLog("LastValue/Encounter", Trim(txtencid.Text))
      Endif
      res = modDatabase.$myConn.Exec("select fldpatientval,flduserid from tblencounter where fldencounterval=&1", Trim(txtencid.Text))
      If res.Available = False Then
        modLinkDB.CheckEncDataRemote(Trim(txtencid.Text))
        txtencid.SetFocus
      Else
        If modBasic.$LockToOwnConsultant = "Yes" Then
          If res["flduserid"] = modBasic.$lbluser Then
            xallow = True
          Else
            xallow = False
          Endif
        Else
          xallow = True
        Endif
        If xallow = True Then
          txtpatientname.Text = modPatient.GetPatientNameByEnc(Trim(txtencid.Text))
          If txtpatientname.Text Then
            Panel6.Enabled = True
            txtgender.Text = modPatient.GetPatientSex(Trim(txtencid.Text))
            txtpatientaddress.Text = modPatient.GetPatientAddressByEnc(Trim(txtencid.Text))
            dtdob.Value = modPatient.GetPatientBirthDay(Trim(txtencid.Text))
            modDateSub.GetAgeControlFromDate(dtdob.Value, txtpatage, cmbpatageunit)

            $sTatus = modPatient.CurrentAdmissionStatus(Trim(txtencid.Text))
            txtnow.Text = $sTatus
            txtbedno.Text = modPatient.GetLocationSetting(Trim(txtencid.Text), $sTatus)
            txtpatdoa.Text = modReportVar.GetDateTimeReport(modPatient.GetRecordDate(Trim(txtencid.Text)), gb.GeneralDate)
            txtpatweight.Value = modClinic.GetBodyWeight(Trim(txtencid.Text))
            btnconsult.Tag = modPatient.GetAttendingConsultant(Trim(txtencid.Text))
            btnconsult.Text = modGeneral.GetUserFullName(btnconsult.Tag)
            modClinSub.GetPatientHeight(Trim(txtencid.Text), txtpatheight, cmbpatheightunit)
            modAppSupport.RecordPatientActivity("Patient Data", Me.Name, "EncounterID", Trim(txtencid.Text))
            txtcolor.Background = modPatient.GetPatientColor(Trim(txtencid.Text))
            Wait
            If modPatientSub.AllowEncIDHistory(Trim(txtencid.Text), modDatabase.$myConn) = True Then
              GetDefaultBillingmodes()
              BlockDCButton()
              ButtonControl()
              txtencid.ReadOnly = True
              modImage.ShowPhotoSplash("Patient", modPatient.GetPatientNoByEnc(Trim(txtencid.Text)))
              $focus = False
              cmbcategory.SetFocus
            Else
              Me.Enabled = False
            Endif
          Else
            Balloon.Warning(("Encounter ID not found"), txtencid)
            Balloon.Delay = modBasic.$BalloonDelay
            txtencid.SetFocus
          Endif
        Else
          Message.Warning("Not authorized", ("OK"))
        Endif
      Endif
    Endif
  Endif

End

Private Sub GetDefaultBillingmodes()

  Dim xpackage As String

  Select $sTatus
    Case "Admitted", "Discharged", "LAMA", "Death", "Refer", "Absconder"
      $billModeTest = modNonMedical.GetAutoIPBillingPack("Test", Trim(txtencid.Text))
      $billModeRadio = modNonMedical.GetAutoIPBillingPack("Radio", Trim(txtencid.Text))
      $billModePharmacy = modNonMedical.GetAutoIPBillingPack("Pharmacy", Trim(txtencid.Text))
      $billModeEquipment = modNonMedical.GetAutoIPBillingPack("Equipment", Trim(txtencid.Text))
      $billModeProcedure = modNonMedical.GetAutoIPBillingPack("Procedure", Trim(txtencid.Text))
      $billModeService = modNonMedical.GetAutoIPBillingPack("Service", Trim(txtencid.Text))
      $billModeOthers = modNonMedical.GetAutoIPBillingPack("Others", Trim(txtencid.Text))
    Case Else
      xpackage = modNonMedical.DefaultBillingScheme(Trim(txtencid.Text), modBasic.$compID)
      $billModeTest = xpackage
      $billModeRadio = xpackage
      $billModePharmacy = xpackage
      $billModeEquipment = xpackage
      $billModeProcedure = xpackage
      $billModeService = xpackage
      $billModeOthers = xpackage
  End Select

End

Public Sub btnpic_Click()

  Dim hForm As FmPersonImage

  If txtencid.Text Then
    hForm = New FmPersonImage("Patient", modPatient.GetPatientNoByEnc(Trim(txtencid.Text)), False)
    hForm.ShowModal
  Endif

End

Public Sub btnprofile_Click()

  Dim hForm As FmMinProfile

  hForm = New FmMinProfile(Trim(txtencid.Text))
  hForm.ShowModal()

End

Private Sub BlockDCButton()

  Dim xx As Boolean

  xx = modPatient.EnableClinicForm(txtnow.Text)
  tlbtnadd1.Enabled = xx
  tlbtnaddbed.Enabled = xx
  tlbtnadwt.Enabled = xx
  dtdob.Enabled = xx
  btnpic.Enabled = xx
  btnconsult.Enabled = xx

End

Public Sub txtpatweight_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    tlbtnadwt_Click()
  Endif

End

Public Sub cmbpatheightunit_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    tlbtnadd1_Click()
  Else
    modFillContainer.AutoFillComboBox(cmbpatheightunit)
    modFillContainer.RestrictComboToContent(cmbpatheightunit)
  Endif

End

Public Sub txtpatweight_GotFocus()

  If modBasic.$TabletModeEnable = "Yes" Then
    txtpatweight.Enabled = False
    txtpatweight.Value = InputValue(("Set Patient Body Weight"), txtencid.Text, txtpatweight.Value)
    txtpatweight.Enabled = True
  Endif

End

Public Sub txtpatheight_GotFocus()

  If modBasic.$TabletModeEnable = "Yes" Then
    txtpatheight.Enabled = False
    txtpatheight.Value = InputValue(("Set Patient Body Height"), txtencid.Text, txtpatheight.Value)
    txtpatheight.Enabled = True
  Endif

End

Public Sub tlbtnadwt_Click()

  If txtencid.Text Then
    If txtpatweight.Value Then
      modClinSub.AddGeneralParametersQuanti(Trim(txtencid.Text), "Body Weight", txtpatweight.Value)
      tlbtnadwt.Enabled = False
      Balloon.Info(("Information saved"), tlbtnadwt)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

Public Sub tlbtnadd1_Click()

  If txtencid.Text Then
    If txtpatheight.Value Then
      If cmbpatheightunit.Text Then
        modClinSub.UpdatePatientHeight(Trim(txtencid.Text), txtpatheight.Value, cmbpatheightunit.Text)
        tlbtnadd1.Enabled = False
        Balloon.Info(("Information updated"), tlbtnadd1)
        Balloon.Delay = modBasic.$BalloonDelay
      Endif
    Endif
  Endif

End

Public Sub dtdob_Click()

  If txtencid.Text Then
    If dtdob.Value Then
      modPatientSub.UpdatePatDOB(Trim(txtencid.Text), dtdob.Value)
      modDateSub.GetAgeControlFromDate(dtdob.Value, txtpatage, cmbpatageunit)
      Balloon.Info(("Information updated"), dtdob)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

Public Sub cmbpatageunit_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbpatageunit)
  modFillContainer.RestrictComboToContent(cmbpatageunit)

End

Public Sub btnconsult_Change()

  If btnconsult.Text = "" Then
    btnconsult.Tag = ""
  Endif

End

Public Sub btnconsult_Click()

  Dim xMedUser As String[]

  xMedUser = MedicalSelectedValue(("Select Consultant"), modBasic.$IPConsultUserList)
  If xMedUser And If xMedUser.Count Then
    btnconsult.Tag = xMedUser[0]
    btnconsult.Text = xMedUser[1]
  Else
    btnconsult.Tag = ""
    btnconsult.Text = ""
  Endif
  If btnconsult.Tag And If txtencid.Text Then
    modPatientSub.UpdateAttendingConsultant(Trim(txtencid.Text), btnconsult.Tag)
    Balloon.Info(("Information saved"), btnconsult)
    Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnwebcam_Click()

  If txtencid.Text Then
    GetEncounterValue()
  Else
    txtencid.Text = modDevice.ChooseBarCodeSource()
    txtencid.SetFocus
    txtencid.Pos = Len(txtencid.Text)
  Endif

End

Public Sub tlbtnaddbed_Click()

  Dim hForm As FmBedManage

  If txtencid.Text Then
    If txtnow.Text = "Admitted" Then
      hForm = New FmBedManage(Trim(txtencid.Text), txtbedno)
      hForm.ShowModal
    Endif
  Endif

End

''-------------------
Public Sub Form_KeyRelease()

  If Key.Code = Key.F1 Then
    If Not txtencid.Text Or If txtencid.Text = modBasic.$EncIdPrefix Then
      If modBasic.$regF1Clinic = "Yes" Or If modBasic.$regF1Clinic = "Partial" Then
        txtencid.Text = RegistrationNewForm()
      Else If modBasic.$regF1Clinic = "Full" Then
        txtencid.Text = RegistrationForm(False)
      Endif
    Endif
  Else If Key.Code = Key.Up Or If Key.Code = Key.Down Then
    grdtreeview.SetFocus
  Else If Key.Code = Key["F"] And If Key.Control Then
    txtencid.Text = GetEncid()
  Else
    modGeneralmain.GoToNextControlTab()
  Endif

End

Private Sub ButtonControl()

  Dim xx As Boolean

  xx = modPatient.EnableClinicForm(txtnow.Text)
  grdtreeview.Enabled = xx
  GridView1.Enabled = xx
  Frame1.Enabled = xx
  btndemograph.Enabled = xx
  btnvital.Enabled = xx
  btngenservice.Enabled = xx
  btnlabs.Enabled = xx
  btnradio.Enabled = xx

  If $UserRestrict Then
    UserAccessRestrict()
  Endif

End

Private Sub UserAccessRestrict()

  If $UserRestrict.Exist("Bed Assignment") Then
    tlbtnaddbed.Enabled = False
  Endif
  If $UserRestrict.Exist("Body Weight") Then
    tlbtnadwt.Enabled = False
  Endif
  If $UserRestrict.Exist("Body Height") Then
    tlbtnadd1.Enabled = False
  Endif
  If $UserRestrict.Exist("Complete Examination") Then
    grdtreeview.Enabled = False
    GridView1.Enabled = False
    Frame1.Enabled = False
  Endif
  If $UserRestrict.Exist("Laboratory Request") Then
    btnlabs.Enabled = False
  Endif
  If $UserRestrict.Exist("Radiology Request") Then
    btnradio.Enabled = False
  Endif
  If $UserRestrict.Exist("Pharmacy Request") Then
    btnpharm.Enabled = False
  Endif
  If $UserRestrict.Exist("Demographics") Then
    btndemograph.Enabled = False
  Endif
  If $UserRestrict.Exist("General Images") Then
    btnimage.Enabled = False
  Endif
  If $UserRestrict.Exist("PACS Images") Then
    btnpacs.Enabled = False
  Endif
  If $UserRestrict.Exist("Essential Examinations") Then
    btnvital.Enabled = False
  Endif

End

''=================== Examination ===============================
Private Sub LoadTreeData()

  $secText = ""
  FillClinicalTree(grdtreeview, $Category, cmbcategory.Text, $sDepart, chkleftright.Value)
  grdtreeview.SetFocus

End

Public Sub cmbcategory_GotFocus()

  If modBasic.$TabletModeEnable = "Yes" Then
    If Not cmbcategory.Text Then
      cmbcategory.Popup
    Endif
  Endif

End

Public Sub cmbcategory_Click()

  If txtencid.Text Then
    If cmbcategory.Text Then
      LoadTreeData()
      ShowClinicTable()
    Endif
  Endif

End

Public Sub btnexpand_Click()

  grdtreeview.ExpandAll()

End

Public Sub btncollapse_Click()

  grdtreeview.CollapseAll()

End

Public Sub cmbcategory_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbcategory)
  modFillContainer.RestrictComboToContent(cmbcategory)

End

Public Sub grdtreeview_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    grdtreeview_Click()
  Endif

End

Public Sub grdtreeview_Click()

  Dim res As Result
  Dim sList As String[]
  Dim hForm As FmEnterMultiExam
  Dim hForm11 As FmEnterMultiExamVir
  Dim hFormTwo As FmEnterMultiExamTwo

  If grdtreeview.Current Then
    If txtencid.Text Then

      If chkleftright.Value = True Then
        sList = New String[]
        res = modDatabase.$myConn.Exec("select fldheadcode from tblstructexam where fldclass=&1 and fldsubclass=&2 and fldcategory=&3 and flditem=&4 and fldreferencee=&5 and flditemoption=&6 ORDER BY fldheadid", $sDepart, $Category, cmbcategory.Text, grdtreeview.Current.Text, $reference, "Left/Right Components")
        If res.Available Then
          For Each res
            sList.Add(res["fldheadcode"])
          Next
          hFormTwo = New FmEnterMultiExamTwo(grdtreeview.Current.Text, Trim(txtencid.Text), cmbcategory.Text, sList, $Category)
          hFormTwo.ShowModal
        Endif
      Else

        If $Grouping = "Separate" Then
          If grdtreeview.Current.Picture = Picture["icons/coll3.png"] Then
            SelectDIrectEntryForm()
          Else
            modFillContainer.ExpandClickTreeView(grdtreeview)
          Endif

        Else If $Grouping = "Tabbed" Then
          sList = New String[]
          res = modDatabase.$myConn.Exec("select fldheadcode from tblstructexam where fldclass=&1 and fldsubclass=&2 and fldcategory=&3 and flditem=&4 and fldreferencee=&5 and flditemoption IS NULL ORDER BY fldheadid", $sDepart, $Category, cmbcategory.Text, grdtreeview.Current.Text, $reference)
          If res.Available Then
            For Each res
              sList.Add(res["fldheadcode"])
            Next
            ShowGroupControls(Trim(txtencid.Text), cmbcategory.Text, sList, $Category)
          Endif

        Else
          sList = New String[]
          res = modDatabase.$myConn.Exec("select fldheadcode from tblstructexam where fldclass=&1 and fldsubclass=&2 and fldcategory=&3 and flditem=&4 and fldreferencee=&5 and flditemoption IS NULL ORDER BY fldheadid", $sDepart, $Category, cmbcategory.Text, grdtreeview.Current.Text, $reference)
          If res.Available Then
            For Each res
              sList.Add(res["fldheadcode"])
            Next
            If modBasic.$FactorForm = "Vertical" Then
              hForm11 = New FmEnterMultiExamVir(grdtreeview.Current.Text, Trim(txtencid.Text), cmbcategory.Text, sList, $Category)
              hForm11.ShowModal
            Else
              hForm = New FmEnterMultiExam(grdtreeview.Current.Text, Trim(txtencid.Text), cmbcategory.Text, sList, $Category)
              hForm.ShowModal
            Endif
          Endif

        Endif

      Endif
      ShowClinicTable()

    Endif
  Endif

End

Private Sub ShowClinicTable()

  If Not grdtreeview.Current Then
    $rData = modDatabase.$myConn.Exec("select fldid,fldtype,fldtime,fldhead,fldabnormal,fldid,fldid,fldserialval,fldrepquali,fldrepquanti from tblpatientexam where fldinput=&1 and fldencounterval=&2 and fldsave=&3 and fldserialval in(select fldheadcode from tblstructexam where fldsubclass=&4 and fldcategory=&5 and fldclass=&6 and fldreferencee=&7) ORDER BY fldtime", cmbcategory.Text, Trim(txtencid.Text), True, $Category, cmbcategory.Text, $sDepart, $reference)
  Else

    If grdtreeview.Current.Picture = Picture["icons/coll2.png"] Then
      If $secText Then
        grdtreeview[$secText].Expanded = False
      Endif
      $rData = modDatabase.$myConn.Exec("select fldid,fldtype,fldtime,fldhead,fldabnormal,fldid,fldid,fldserialval,fldrepquali,fldrepquanti from tblpatientexam where fldinput=&1 and fldencounterval=&2 and fldsave=&3 and fldserialval in(select fldheadcode from tblstructexam where fldsubclass=&4 and fldcategory=&5 and flditem=&6 and fldclass=&7 and fldreferencee=&8) ORDER BY fldtime", cmbcategory.Text, Trim(txtencid.Text), True, $Category, cmbcategory.Text, grdtreeview.Current.Text, $sDepart, $reference)
      $secText = grdtreeview.Current.Key
    Else
      $rData = modDatabase.$myConn.Exec("select fldid,fldtype,fldtime,fldhead,fldabnormal,fldid,fldid,fldserialval,fldrepquali,fldrepquanti from tblpatientexam where fldinput=&1 and fldencounterval=&2 and fldsave=&3 and fldserialval in(select fldheadcode from tblstructexam where fldsubclass=&4 and fldcategory=&5 and flditem=&6 and fldclass=&7 and fldreferencee=&8) ORDER BY fldtime", cmbcategory.Text, Trim(txtencid.Text), True, $Category, cmbcategory.Text, modFillContainer.GetTextFromTreeKey(grdtreeview.Current.ParentKey), $sDepart, $reference)                                                                      ''
    Endif
  Endif

  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView1, $rData, $aMyFields)
  ResizeGridView()

End

Private Sub ResizeGridView()

  With GridView1
    .Columns[0].Width = 1
    .Columns[1].Width = 1
    .Columns[2].Width = 150 * modBasic.$AppWidthRatio
    .Columns[3].Width = 175 * modBasic.$AppWidthRatio
    .Columns[4].Width = 25 * modBasic.$AppWidthRatio
    .Columns[5].Width = 250 * modBasic.$AppWidthRatio
    .Columns[6].Width = 35 * modBasic.$AppWidthRatio
    .Columns[7].Width = 1
    .Columns[8].Width = 1
    .Columns[9].Width = 1

    .Columns[2].Text = "Time"
    .Columns[3].Text = "Examination"
    .Columns[5].Text = "Observation"
  End With

End

Public Sub GridView1_Data(Row As Integer, Column As Integer)

  $rData.MoveTo(Row)
  modGeneralMain.GridViewDecoration(GridView1, Row)
  If Column = 2 Then
    GridView1.Data.Text = modReportVar.GetDateTimeReport($rData["fldtime"], gb.GeneralDate)
  Else If Column = 5 Then
    GridView1.Data.RichText = modClinic.GetExamValueString(Trim(txtencid.Text), $rData["fldid"], False)
    If modBasic.$RichtextResizeRow = "Yes" Then
      GridView1.Rows[Row].Height = Max(GridView1.Rows[Row].Height, GridView1.Data.Font.RichTextHeight(GridView1.Data.RichText, GridView1.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView1.Rows.Height - GridView1.Font.Height))
    Endif
  Else If Column = 4 Then
    GridView1.Data.Picture = Picture[modMisc.GetGridIcon($rData["fldabnormal"])]
    GridView1.Data.Text = ""
  Else If Column = 6 Then
    GridView1.Data.Picture = Picture["icon:/small/cancel"]
    GridView1.Data.Text = ""
  Else
    GridView1.Data.Text = $rData[$aMyFields[Column]]
  Endif
  GridView1.Rows[Row].Height = Max(GridView1.Rows[Row].Height, GridView1.Data.Font.RichTextHeight(GridView1.Data.Text, GridView1.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView1.Rows.Height - GridView1.Font.Height))
  GridView1.Data.WordWrap = True

End

Public Sub GridView1_Click()

  Dim yqualival As Variant[]
  Dim xquantival As Variant[]
  Dim rsn As Result
  Dim Row As Integer
  Dim abc As String
  Dim xdate As Date
  Dim res As Result

  Dim xval As String
  Dim sTable As String[]
  Dim sName As String
  Dim sVal As String[]

  Dim yyy As String[]
  Dim res1 As Result
  Dim hForm2 As FmEnterMultiple
  Dim hForm22 As FmEnterMultipleVer
  Dim hFormTwo As FmEnterMultipleTwo
  Dim xData As Variant[]
  Dim opt As String[]

  Dim cForm As CFindExam
  Dim examtype As String
  Dim sExam As String
  Dim sOptName As String
  Dim sDefault As String

  Row = GridView1.Row
  If GridView1.Column = 5 Then
    If GridView1[GridView1.Row, 1].Text = "Qualitative" Then
      rsn = modDatabase.$myConn.Exec("select fldhead,fldtesttype,fldtanswertype,fldsysconst from tblstructexam where fldheadcode=&1", GridView1[GridView1.Row, 7].Text)

      If rsn.Available And If rsn["fldsysconst"] Then
        cForm = New CFindExam(rsn["fldsysconst"])
        examtype = cForm.GetExamMode()
        sExam = cForm.GetExamName()
        sOptName = cForm.GetExamOption()
        sDefault = cForm.GetExamDefault()
      Else
        examtype = "Exam"
      Endif

      If sExam Then
        sName = sExam
      Else
        sName = GridView1[GridView1.Row, 3].Text
      Endif

      If rsn["fldtanswertype"] = "Fixed Components" Or If rsn["fldtanswertype"] = "Left/Right Components" Then
        If modClinic.GetSubExamBool(GridView1[GridView1.Row, 0].Text, Trim(txtencid.Text)) = False Then
          yyy = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldanswer as col from tblstructexamoption where fldheadcode=&1", GridView1[GridView1.Row, 7].Text))
          If yyy.Count Then
            modClinSub.InsertExamSubExam(Trim(txtencid.Text), GridView1[GridView1.Row, 0].Text, sName, yyy)
          Endif
        Endif
      Else If rsn["fldtanswertype"] = "Single Selection" Or If rsn["fldtanswertype"] = "Dichotomous" Then
        yyy = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldanswer as col from tblstructexamoption where fldheadcode=&1", GridView1[GridView1.Row, 7].Text))
      Endif

      res1 = modDatabase.$myConn.Exec("select fldid,fldsubtexam,fldreport,fldtanswertype,fldabnormal,fldindex from tblpatientsubexam where fldheadid=&1", GridView1[GridView1.Row, 0].Text)
      If res1.Available = False Then
        If rsn["fldtanswertype"] = "Single Selection" Then
          If yyy.Count Then
            sVal = SubChoose(yyy, rsn["fldtanswertype"], sName)
            If sVal Then
              modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, sVal.Join(gb.NewLine), False, "")
            Endif
          Endif
        Else If rsn["fldtanswertype"] = "Dichotomous" Then
          If yyy.Count Then
            sVal = SubChoose(yyy, rsn["fldtanswertype"], sName)
            If sVal Then
              modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, sVal.Join(gb.NewLine), False, "")
            Endif
          Endif

        Else If rsn["fldtanswertype"] = "Left and Right" Then
          yqualival = CLeftRight(GridView1[GridView1.Row, 3].Text, GridView1[GridView1.Row, 8].Text, modFixClinic.GetLeftRightMainHeader("Exam", GridView1[GridView1.Row, 3].Text))
          If yqualival Then
            modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, yqualival[0], yqualival[1])
          Endif

        Else If rsn["fldtanswertype"] = "Date Time" Then
          xdate = GetDateValue(GridView1[GridView1.Row, 0].Text, ("Select Date Time"), Val(GridView1[GridView1.Row, 5].RichText))
          If xdate Then
            modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, modDate.DateStringForExam(xdate), False)
          Endif

        Else If rsn["fldtanswertype"] = "BS Date" Then
          xdate = GetDateValue(GridView1[GridView1.Row, 0].Text, ("Select Date Time"), modDate.ConvertToEnglishdate(GridView1[GridView1.Row, 5].RichText))
          If xdate Then
            modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, modDate.ConvertToLocaldate(xdate), False)
          Endif

        Else If rsn["fldtanswertype"] = "Text Table" Then
          sTable = modString.ConverTableRichTextToGrid(GridView1[GridView1.Row, 5].RichText)
          opt = Split(sTable[0], ";")
          xval = TableEntry(opt, GridView1[GridView1.Row, 3].Text, sTable[1])
          If xval Then
            modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, modString.GetTableFormatFromText(xval), False)
          Endif

        Else If rsn["fldtanswertype"] = "Qualitative" Then
          yqualival = GetQualiString(GridView1[GridView1.Row, 3].Text, GridView1[GridView1.Row, 5].RichText, "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, yqualival[0], yqualival[1])
          Endif

        Else
          If sOptName = "Clinical Scale" Then
            yqualival = modExamOption.GetClinScalePopUp(examtype, sName)
            If yqualival Then
              modClinSub.UpdateQualiQuantiData(GridView1[GridView1.Row, 0].Text, yqualival[1], CFloat(yqualival[0]), False)
            Endif
          Else If sOptName = "RichText Area" Then
            yqualival = GetQualiRich(sName, GridView1[GridView1.Row, 5].RichText, examtype)
            If yqualival Then
              modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, yqualival[0], yqualival[1], yqualival[2])
            Endif
          Else
            yqualival = GetQualiValues(sName, GridView1[GridView1.Row, 5].RichText, examtype)
            If yqualival Then
              modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, yqualival[0], yqualival[1], yqualival[2])
            Endif
          Endif
        Endif

      Else If res1.Available = True Then
        xData = New Variant[]
        For Each res1
          xData.Add([res1["fldsubtexam"], res1["fldreport"], res1["fldid"], res1["fldtanswertype"], res1["fldabnormal"], res1["fldindex"]])
        Next
        xData.Add(["Final Impression", GridView1[GridView1.Row, 5].RichText, 0, "RichText Area", False, ""])
        If rsn["fldtanswertype"] = "Left/Right Components" Then
          hFormTwo = New FmEnterMultipleTwo(GridView1[GridView1.Row, 0].Text, "Exam", sName, xData, "", "Current")
          hFormTwo.ShowModal
        Else
          If modBasic.$FactorForm = "Vertical" Then
            hForm22 = New FmEnterMultipleVer(GridView1[GridView1.Row, 0].Text, "Exam", sName, xData, "", "Current")
            hForm22.ShowModal
          Else
            hForm2 = New FmEnterMultiple(GridView1[GridView1.Row, 0].Text, "Exam", sName, xData, "", "Current")
            hForm2.ShowModal
          Endif
        Endif
      Endif

    Else If GridView1[GridView1.Row, 1].Text = "Quantitative" Then
      xquantival = GetQuantiValues(examtype, Trim(txtencid.Text), sName, 0, 0, GridView1[GridView1.Row, 9].Text)
      If xquantival Then
        modClinSub.UpdateQuantiData(GridView1[GridView1.Row, 0].Text, xquantival[0], xquantival[1])
      Endif
    Endif
    ShowClinicTable()

  Else If GridView1.Column = 4 Then
    abc = InputCombo("Select Flag for the observation", "Change Flag", ["Normal", "Abnormal"], modMisc.GetIconValue(GridView1[GridView1.Row, 4].Picture), True)
    If abc Then
      modClinSub.UpdateExamFlag(GridView1[GridView1.Row, 0].Text, abc)
      ShowClinicTable()
    Endif

  Else If GridView1.Column = 6 Then
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblpatientexam", "fldid=&1", GridView1[GridView1.Row, 0].Text)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        ShowClinicTable()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif

  Endif
  GridView1.Row = Row

End

''XXXXXXXX VIEW OPTIONS
Private Sub SelectDIrectEntryForm()

  Dim sName As String
  Dim xquantival As Variant[]
  Dim yqualival As Variant[]
  Dim lftrtval As Variant[]
  Dim xlimit As Float[]
  Dim opt As String[]
  Dim sVal As String[]
  Dim xval As String
  Dim xdate As Date
  Dim sPath As String

  Dim rsn As Result
  Dim sysConst As String
  Dim sType As String
  Dim OptionType As String
  Dim xdefval As Float
  Dim xstrval As String

  Dim cForm As CFindExam
  Dim examtype As String
  Dim sExam As String
  Dim sOptName As String
  Dim sDefault As String

  rsn = modDatabase.$myConn.Exec("select fldhead,fldtesttype,fldtanswertype,fldsysconst from tblstructexam where fldheadcode=&1", grdtreeview.Current.Key)
  If rsn.Available Then
    sType = rsn["fldtesttype"]
    OptionType = rsn["fldtanswertype"]
    sysConst = rsn["fldsysconst"]
    sName = grdtreeview.Current.Text

    If sysConst Then
      cForm = New CFindExam(sysConst)
      examtype = cForm.GetExamMode()
      sExam = cForm.GetExamName()
      sOptName = cForm.GetExamOption()
      sDefault = cForm.GetExamDefault()
    Endif

    If sType = "Quantitative" Then
      xdefval = 0
      If sysConst Then
        If OptionType = "Sys Constant" And If sOptName = "Calculated" Then
          If sDefault Then
            xdefval = modReportVar.GetCalcValueFloat(sDefault, Trim(txtencid.Text))
          Endif
        Else If OptionType = "Calculated" Then
          xdefval = modReportVar.GetCalcValueFloat(sysConst, Trim(txtencid.Text))
        Else If OptionType = "CopyValue" Then
          xdefval = modReportVar.GetLastQuantiParamValue(examtype, sExam, Trim(txtencid.Text))
        Endif
        xlimit = modClinic.GetBothQuantiExamVal(sExam, Trim(txtencid.Text))
      Else
        xlimit = [0, 0]
      Endif
      xquantival = GetQuantiValues(examtype, Trim(txtencid.Text), sName, xlimit[0], xlimit[1], xdefval)
      If xquantival Then
        modClinSub.AddQuantiData(Trim(txtencid.Text), grdtreeview.Current.Key, grdtreeview.Current.Text, OptionType, xquantival[0], xquantival[1], cmbcategory.Text, "", $Category)
      Endif

    Else
      If sysConst Then
        xstrval = ""
        If OptionType = "Sys Constant" Then
          If sOptName = "Calculated" Then
            If sDefault Then
              xstrval = modReportVar.GetCalcValueVariant(sDefault, Trim(txtencid.Text))
            Endif
            yqualival = GetQualiValues(sName, xstrval, examtype)
          Else
            yqualival = modExamOption.GetQualiExamOptionDirectValue(sExam, "", examtype, sOptName)
          Endif
        Else If OptionType = "Calculated" Then
          xstrval = modReportVar.GetCalcValueVariant(sysConst, Trim(txtencid.Text))
          yqualival = GetQualiValues(sName, xstrval, examtype)
        Else If OptionType = "CopyValue" Then
          xstrval = modReportVar.GetLastQualiParamValue(examtype, sExam, Trim(txtencid.Text))
          yqualival = GetQualiValues(sName, xstrval, examtype)
        Endif

      Else
        If OptionType = "Date Time" Then
          xdate = GetDateValue(("Select Date Time"), sName, "")
          If xdate Then
            yqualival = [modDate.DateStringForExam(xdate), False]
          Endif
        Else If OptionType = "BS Date" Then
          xdate = GetDateValue(("Select Date Time"), sName, "")
          If xdate Then
            yqualival = [modDate.ConvertToLocaldate(xdate), False]
          Endif
        Else If OptionType = "ImageValue" Then
          sPath = modImage.DisplayVisualData($Category, grdtreeview.Current.Key, "", OptionType)
          sVal = CustomDraw(sPath)
          If sVal Then
            yqualival = [sVal[0], False]
          Endif
        Else If OptionType = "Visual Input" Then
          sPath = modImage.DisplayVisualData($Category, grdtreeview.Current.Key, "", OptionType)
          If sPath Then
            xval = CVisualValue(grdtreeview.Current.Text, sPath, "")
            If xval Then
              yqualival = [xval, False]
            Endif
          Endif
        Else If OptionType = "Qualitative" Then
          yqualival = GetQualiString(sName, "", "Exam")
        Else If OptionType = "Left and Right" Then
          lftrtval = CLeftRight(sName, "", modFixClinic.GetLeftRightMainHeader("Exam", sName))
          If lftrtval Then
            yqualival = [lftrtval[0], lftrtval[1]]
          Endif
        Else If OptionType = "Single Selection" Or If OptionType = "Dichotomous" Or If OptionType = "Multiple Selection" Then
          opt = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldanswer from tblstructexamoption where fldheadcode=&1 ORDER BY fldindex", grdtreeview.Current.Key))
          If opt.Count Then
            sVal = SubChoose(opt, OptionType, grdtreeview.Current.Text)
            If sVal Then
              yqualival = [sVal.Join(gb.NewLine), False]
            Endif
          Else
            yqualival = GetQualiValues(sName, "", "Exam")
          Endif
        Else If OptionType = "Text Table" Then
          opt = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldanswer from tblstructexamoption where fldheadcode=&1 ORDER BY fldindex", grdtreeview.Current.Key))
          If opt.Count Then
            xval = TableEntry(opt, grdtreeview.Current.Text, "")
            If xval Then
              yqualival = [modString.GetTableFormatFromText(xval), False]
            Endif
          Else
            yqualival = GetQualiValues(sName, "", "Exam")
          Endif
        Else If OptionType = "RichText Area" Then
          yqualival = GetQualiRich(sName, "", "Exam")
        Else
          yqualival = GetQualiValues(sName, "", "Exam")
        Endif
      Endif

      If yqualival Then
        If OptionType = "ImageValue" Then
          modClinSub.AddQualiImageData(Trim(txtencid.Text), grdtreeview.Current.Key, grdtreeview.Current.Text, OptionType, cmbcategory.Text, sysConst, yqualival[0], $Category)
        Else
          If yqualival.Count = 3 And If yqualival[2] Then
            modClinSub.AddClinicExam(Trim(txtencid.Text), grdtreeview.Current.Key, grdtreeview.Current.Text, OptionType, yqualival[0], CFloat(yqualival[2]), yqualival[1], cmbcategory.Text, sysConst, $Category)
          Else
            modClinSub.AddClinicExam(Trim(txtencid.Text), grdtreeview.Current.Key, grdtreeview.Current.Text, OptionType, yqualival[0], 0, yqualival[1], cmbcategory.Text, sysConst, $Category)
          Endif
        Endif
      Endif
    Endif ''quali or quanti

  Endif

End

Public Sub btnfullrep_Click()

  modCHTMLReport.ExportGridToHTML(GridView1, UCase($Category), "",, txtencid.text)

End

Public Sub btnreposel_Click()

  Dim xPath As String

  If txtencid.text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowRecomExaminationpatient(Trim(txtencid.text), $Category, cmbcategory.Text, $sDepart, $reference)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.text), xPath, "ReportSize")
  Endif

End

Public Sub btnrepocomplete_Click()

  Dim xPath As String

  If txtencid.text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowRecomExamCompletePatient(Trim(txtencid.text), $Category, cmbcategory.List, $sDepart, $reference)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.text), xPath, "ReportSize")
  Endif

End

Public Sub txtencid_KeyPress()

  If Key.Code = Key.Down Then
    If Not txtencid.Text Then
      txtencid.Text = PatSearch("Encounter")
      txtencid.SetFocus
    Else
      If modBasic.$AutoEncSuffix = "Yes" Then
        txtencid.Text = txtencid.Text & modBasic.$HospCode
      Endif
    Endif
  Else
    modGeneralMain.InputUpCaseOnly()
  Endif

End

''--------------------Populate Tree View -------------------------------
Private Sub FillClinicalTree(TreeView1 As TreeView, xSubClass As String, xCategory As String, sDepart As String, LeftRight As Boolean)

  Dim str3 As String
  Dim str4 As String

  Dim res3 As Result
  Dim k As Integer
  Dim res4 As Result
  Dim l As Integer

  Dim pic2 As Picture
  Dim pic3 As Picture
  Dim ref As String

  pic2 = Picture["icons/coll2.png"]
  pic3 = Picture["icons/coll3.png"]

  ref = $reference
  TreeView1.Clear

  If LeftRight = True Then
    str3 = "select distinct(flditem) from tblstructexam where fldsubclass=&1 and fldcategory=&2 and fldreferencee=&3 and fldclass=&4 and flditemoption=&5 ORDER BY flditemid"
  Else
    str3 = "select distinct(flditem) from tblstructexam where fldsubclass=&1 and fldcategory=&2 and fldreferencee=&3 and fldclass=&4 and flditemoption IS NULL ORDER BY flditemid"
  Endif
  res3 = modDatabase.$myConn.Exec(str3, xSubClass, xCategory, ref, sDepart, "Left/Right Components")
  If res3.Available Then
    res3.MoveFirst
    For k = 1 To res3.Count
      TreeView1.Add(CStr(k) & "@" & res3["flditem"], res3["flditem"], pic2)

      If LeftRight = True Then
        str4 = "select fldheadcode,fldhead from tblstructexam where fldsubclass=&1 and fldcategory=&2 and flditem=&3 and fldreferencee=&4 and fldclass=&5 and flditemoption=&6 ORDER BY fldheadid"
      Else
        str4 = "select fldheadcode,fldhead from tblstructexam where fldsubclass=&1 and fldcategory=&2 and flditem=&3 and fldreferencee=&4 and fldclass=&5 and flditemoption IS NULL ORDER BY fldheadid"
      Endif
      res4 = modDatabase.$myConn.Exec(str4, xsubClass, xCategory, res3["flditem"], ref, sDepart, "Left/Right Components")
      If res4.Available Then
        res4.MoveFirst
        For l = 1 To res4.Count
          TreeView1.Add(res4["fldheadcode"], res4["fldhead"], pic3, CStr(k) & "@" & res3["flditem"])
          res4.MoveNext
        Next
      Endif

      res3.MoveNext
    Next
  Endif

End

Public Sub GridView1_Menu()

  mnugrid.Popup

End

Public Sub mnuimage_Click()

  Dim hForm As FmTestImage

  If GridView1.Rows.Selection.Count > 0 Then
    hForm = New FmTestImage("IMAGE", Trim(txtencid.Text), GridView1[GridView1.Row, 0].Text, GridView1[GridView1.Row, 3].Text, "Examination", "")
    hForm.ShowModal
  Endif

End

''------------ buttons---------------
Public Sub btndemograph_Click()

  Dim hForm As FmPatdemograph

  If txtencid.Text Then
    hForm = New FmPatdemograph(Trim(txtencid.Text), "Clinical")
    hForm.ShowModal
  Endif

End

Public Sub btnvital_Click()

  Dim hForm As FmVItalMobile

  If txtencid.Text Then
    hForm = New FmVItalMobile(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub btngenservice_Click()

  Dim hForm As FmMiniService

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Service") = True Then
      hForm = New FmMiniService(Trim(txtencid.Text), $billModeService, $billModeProcedure, $billModeOthers)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub btnlabs_Click()

  Dim hForm As FmTestList

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Test") = True Then
      hForm = New FmTestList(Trim(txtencid.Text), $billModeTest)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub btnradio_Click()

  Dim hForm As FmRadioList

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Radio") = True Then
      hForm = New FmRadioList(Trim(txtencid.Text), $billModeRadio)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub btnpharm_Click()

  Dim hForm As FmMedOrder

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Pharmacy") = True Then
      If modBasic.$MedRequestForm = "Separate" Then
      Else
        hForm = New FmMedOrder(Trim(txtencid.Text), $sTatus, $billModePharmacy)
        hForm.ShowModal
      Endif
    Endif
  Endif

End

Public Sub btnimage_Click()

  Dim hForm As FmPatImage

  If txtencid.Text Then
    hForm = New FmPatImage("IMAGE", Trim(txtencid.Text), "")
    hForm.ShowModal
  Endif

End

Public Sub btnpacs_Click()

  Dim hForm As FmPacsFind

  If txtencid.Text Then
    hForm = New FmPacsFind(Trim(txtencid.Text), "Visit")
    hForm.ShowModal
  Endif

End

''--------------- Menus -------------
Public Sub mnuexam_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatientExaminationgReport(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuradio_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatRadioReportbyEncID(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnudiagno_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatientLaboratoryReport(Trim(txtencid.Text), MMain.$defUnit)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnudrugdosing_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowNursingDosing(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnucompreport_Click()

  If txtencid.Text Then
    modPatReports.GetSelectedPatientValues(Trim(txtencid.Text), MMain.$defUnit)
  Endif

End

Public Sub TabPanel1_Click()

  Dim ht As String

  If TabPanel1.Index = 0 Then
    ShowClinicTable()
  Else If TabPanel1.Index = 1 Then
    ht = modSettings.ShowSettingFromFIle("MultipleTextBox/Height")
    If ht Then
      Slider1.Value = CInt(ht)
    Else
      Slider1.Value = 3
    Endif
  Endif

End

''========================== Tabbed Controls ========================
Private Sub ShowGroupControls(encid As String, sTable As String, idList As String[], sCategory As String)

  Dim xht As Integer

  $encid = encid
  $sTable = sTable
  $idList = idList
  $sCategory = sCategory

  Frame1.Children.Clear()
  Wait
  LoadFormData()

  xht = ($idList.Count * 25 * Slider1.Value + 30) * modBasic.$AppScaleFactor
  If Frame1.Height < xht Then
    Frame1.Height = xht
  Endif

End

Private Sub LoadFormData()

  Dim idx As String
  Dim i As Integer

  Dim rsn As Result
  Dim res As Result

  Dim xcode As String
  Dim xType As String
  Dim xOption As String
  Dim xitem As String
  Dim xexam As String
  Dim xopList As String[]
  Dim xSysCons As String
  Dim xsource As String
  Dim xhelp As String
  Dim xuniq As Integer
  Dim xdefVal As String

  $xCode = New String[]
  $xType = New String[]
  $xOption = New String[]
  $xitem = New String[]
  $xExam = New String[]
  $xOpList = New String[]
  $xSysCons = New String[]
  $xSource = New String[]
  $xHelpList = New String[]
  $xUniqList = New Integer[]
  $xDefaultLst = New String[]

  For Each idx In $idList
    rsn = modDatabase.$myConn.Exec("select fldheadcode,fldhead,fldtesttype,fldtanswertype,fldsysconst,fldclininfo,fldunique,flddefault from tblstructexam where fldheadcode=&1 ORDER BY fldheadid", idx)
    If rsn.Available Then
      xcode = rsn["fldheadcode"]
      xitem = rsn["fldhead"]
      xType = rsn["fldtesttype"]
      xOption = rsn["fldtanswertype"]
      xSysCons = rsn["fldsysconst"]
      xhelp = rsn["fldclininfo"]
      If rsn["fldunique"] = True Then
        xuniq = 1
      Else
        xuniq = 0
      Endif
      xdefVal = rsn["flddefault"]
      xsource = "Free"

      ''get parameters
      If rsn["fldtanswertype"] = "Sys Constant" And If rsn["fldsysconst"] Then
        If modBasic.$sysExamDualList.Exist(rsn["fldsysconst"]) = True Then
          res = modDatabase.$myConn.Exec("select fldexamid,fldtype,fldoption from tblexam where fldsysconst=&1", rsn["fldsysconst"])
          If res.Available Then
            xType = res["fldtype"]
            xOption = res["fldoption"]
            xexam = res["fldexamid"]
            If res["fldoption"] = "Clinical Scale" Then
              xopList = modAllExam.GetCLinicalScaleOptions("Exam", xexam)
            Else
              xopList = modAllExam.SelectExamOptionList("Exam", xexam)
            Endif
            xsource = "Exam"
          Endif
        Else If modBasic.$sysTestDualList.Exist(rsn["fldsysconst"]) = True Then
          res = modDatabase.$myConn.Exec("select fldtestid,fldtype,fldoption from tbltest where fldsysconst=&1", rsn["fldsysconst"])
          If res.Available Then
            xType = res["fldtype"]
            xOption = res["fldoption"]
            xexam = res["fldtestid"]
            If res["fldoption"] = "Clinical Scale" Then
              xopList = modAllExam.GetCLinicalScaleOptions("Test", xexam)
            Else
              xopList = modAllExam.SelectExamOptionList("Test", xexam)
            Endif
            xsource = "Test"
          Endif
        Else If modBasic.$sysRadioList.Exist(rsn["fldsysconst"]) = True Then
          res = modDatabase.$myConn.Exec("select fldexamid,fldtype,fldoption from tblradio where fldsysconst=&1", rsn["fldsysconst"])
          If res.Available Then
            xType = res["fldtype"]
            xOption = res["fldoption"]
            xexam = res["fldexamid"]
            If res["fldoption"] = "Clinical Scale" Then
              xopList = modAllExam.GetCLinicalScaleOptions("Radio", xexam)
            Else
              xopList = modAllExam.SelectExamOptionList("Radio", xexam)
            Endif
            xsource = "Radio"
          Endif
        Else If modBasic.$DemogList.Exist(rsn["fldsysconst"]) = True Then
          res = modDatabase.$myConn.Exec("select flddemoid,fldoption from tbldemographic where flddemoid=&1", rsn["fldsysconst"])
          If res.Available Then
            xType = res["fldoption"]
            xOption = res["fldoption"]
            xexam = res["flddemoid"]
            xopList = modAllExam.SelectExamOptionList("Demog", xexam)
            xsource = "Demog"
          Endif
        Endif

      Else If rsn["fldtanswertype"] = "CopyValue" And If rsn["fldsysconst"] Then
        If modBasic.$sysExamDualList.Exist(rsn["fldsysconst"]) = True Then
          xexam = modFixClinic.GetExamIDFromSysConst(rsn["fldsysconst"])
          xsource = "Exam"
        Else If modBasic.$sysTestDualList.Exist(rsn["fldsysconst"]) = True Then
          xexam = modFixLab.GetLabTestIDFromSysConst(rsn["fldsysconst"])
          xsource = "Test"
        Else If modBasic.$sysRadioList.Exist(rsn["fldsysconst"]) = True Then
          xexam = modFixRadio.GetRadioTestIDFromSysConst(rsn["fldsysconst"])
          xsource = "Radio"
        Endif

      Else If rsn["fldtanswertype"] = "Calculated" And If rsn["fldsysconst"] Then
        xexam = "Expression"

      Else
        xopList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldanswer from tblstructexamoption where fldheadcode=&1 ORDER BY fldindex", idx))                         ''
        xexam = "Structured"
      Endif

      $xCode.Add(xcode)
      $xitem.Add(xitem)
      If xexam Then
        $xExam.Add(xexam)
      Else
        $xExam.Add("__")
      Endif
      If xType Then
        $xType.Add(xType)
      Else
        $xType.Add("__")
      Endif
      If xOption Then
        $xOption.Add(xOption)
      Else
        $xOption.Add("__")
      Endif
      If xopList And If xopList.Count Then
        $xOpList.Add(xopList.Join("|"))
      Else
        $xOpList.Add("__")
      Endif
      If xSysCons Then
        $xSysCons.Add(xSysCons)
      Else
        $xSysCons.Add("__")
      Endif
      If xsource Then
        $xSource.Add(xsource)
      Else
        $xSource.Add("__")
      Endif
      If xhelp Then
        $xHelpList.Add(xhelp)
      Else
        $xHelpList.Add("Null")
      Endif
      $xUniqList.Add(xuniq)
      If xdefVal Then
        $xDefaultLst.Add(xdefVal)
      Else
        $xDefaultLst.Add("__")
      Endif

    Endif
  Next

  For i = 0 To $xitem.Count - 1
    If i < 49 Then
      ''Create controls
      aIndexLabel[i] = New Label(Frame1) As "IndexLabel"
      aNameLabel[i] = New TextLabel(Frame1) As "NameLabel"
      aAbnormCheck[i] = New CheckBox(Frame1) As "CheckBoxgroup"
      If $xType[i] = "Quantitative" Then
        aQuantiBox[i] = New ValueBox(Frame1) As "QuantiGroup"
        aQuantiMax[i] = New ValueBox(Frame1) As "QuantiGroupMax"
        aQuantiMin[i] = New ValueBox(Frame1) As "QuantiGroupMin"
      Else
        Select $xOption[i]
          Case "Sys Constant"
            aGenTextArea[i] = New TextPlain(Frame1) As "GenAreaGroup"
          Case "Multiple Selection"
            aListBox[i] = New ListBox(Frame1) As "ListBoxgroup"
          Case "Text Table"
            aGridView[i] = New GridView(Frame1) As "GridViewgroup"
          Case "Left and Right"
            aLeftRight[i] = New LeftRightTextArea(Frame1) As "LeftRightGroup"
          Case "Date Time", "BS Date"
            aDateBox[i] = New DateBox(Frame1) As "DateGroup"
            aBSDate[i] = New ToolButton(Frame1) As "BSButton"
          Case "User Profile"
            aLineText[i] = New TextBox(Frame1) As "TextLineGroup"
          Case "ImageValue"
            aButtonBox[i] = New ButtonBox(Frame1) As "ImageBoxGroup"
          Case "Single Selection"
            aComboBox[i] = New ComboBox(Frame1) As "ComboGroup"
            aChkLock[i] = New CheckBox(Frame1) As "CheckLock"
          Case "Dichotomous"
            aDichoValue[i] = New DichotomousValue(Frame1) As "DichoText"
          Case "Quantitative"
            aValueBox[i] = New ValueBox(Frame1) As "ValueGroup"
            aUnitText[i] = New TextBox(Frame1) As "UnitGroup"
          Case "Qualitative"
            aLineText[i] = New TextBox(Frame1) As "TextLineGroup"
          Case "Clinical Scale"
            aTextArea[i] = New TextArea(Frame1) As "TextAreaGroup"
            aClinBox[i] = New ValueBox(Frame1) As "ClinGroup"
          Case "RichText Area"
            aHTMLText[i] = New TextHTML(Frame1) As "TextHTMLgroup"
          Case Else
            aGenTextArea[i] = New TextPlain(Frame1) As "GenAreaGroup"
        End Select
      Endif
      aHelpButton[i] = New ToolButton(Frame1) As "ButtonBoxgroup"
    Endif
  Next
  DIsplayTextForm()

End

Private Sub DIsplayTextForm()

  Dim i As Integer
  Dim xlimit As Float[]

  AppFactor = modBasic.$AppScaleFactor
  Frame1.Height = ($xitem.Count * 25 * Slider1.Value + 30) * AppFactor
  Frame1.Width = 875 * AppFactor

  For i = 0 To $xitem.Count - 1
    If i < 49 Then

      ''create index label
      With aIndexLabel[i]
        .X = 5 * AppFactor
        .Y = (i * 25 * Slider1.Value + 15) * AppFactor
        .Width = 25 * AppFactor
        .Height = 25 * AppFactor
        .Text = i + 1
        .Tag = i
      End With

      ''create Name Label
      With aNameLabel[i]
        .X = (5 + 25) * AppFactor
        .Y = (i * 25 * Slider1.Value + 15) * AppFactor
        .Width = 250 * AppFactor
        .Height = 25 * Slider1.Value * AppFactor
        .Text = $xitem[i]
        .Tag = i
        .Wrap = True
        If $xHelpList[i] = "Null" Then
          .Tooltip = ""
        Else
          .Tooltip = $xHelpList[i]
        Endif
      End With

      ''create abnormal checkbox
      With aAbnormCheck[i]
        .X = (250 + 35) * AppFactor
        .Y = (i * 25 * Slider1.Value + 15) * AppFactor
        .Width = 50 * AppFactor
        .Height = 25 * AppFactor
        .Text = "Flag"
        .Tag = i

        If modBasic.$ClinFlagAbnormExam = "Disable" Then
          .Visible = False
        Else
          .Visible = True
        Endif
      End With

      ''create observation entry
      If $xType[i] = "Quantitative" Then
        xlimit = modClinic.GetBothQuantiExamVal($xExam[i], $encid)
        With aQuantiBox[i]
          .X = (285 + 60) * AppFactor
          .Y = (i * 25 * Slider1.Value + 15) * AppFactor
          .Width = 75 * AppFactor
          .Height = 25 * AppFactor
          .Tag = i
        End With
        'min value
        With aQuantiMin[i]
          .X = (345 + 85) * AppFactor
          .Y = (i * 25 * Slider1.Value + 15) * AppFactor
          .Width = 50 * AppFactor
          .Height = 25 * AppFactor
          .Enabled = False
          .Value = xlimit[0]
          .Tag = i
        End With
        ''max value
        With aQuantiMax[i]
          .X = (430 + 60) * AppFactor
          .Y = (i * 25 * Slider1.Value + 15) * AppFactor
          .Width = 50 * AppFactor
          .Height = 25 * AppFactor
          .Enabled = False
          .Value = xlimit[1]
          .Tag = i
        End With

      Else
        If $xOption[i] = "Multiple Selection" Then
          With aListBox[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 285 * AppFactor
            .Height = (25 * Slider1.Value - 5) * AppFactor
            .ScrollBar = Scroll.Both
            .Tag = i
          End With

        Else If $xOption[i] = "Text Table" Then
          DisplayAgegrid(Split($xOpList[i], "|"), "", aGridView[i])
          With aGridView[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 285 * AppFactor
            .Height = (25 * Slider1.Value - 5) * AppFactor
            .ScrollBar = Scroll.Both
            .AutoResize = True
            .Tag = i
          End With

        Else If $xOption[i] = "Single Selection" Then
          With aComboBox[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 200 * AppFactor
            .Height = 25 * AppFactor
            .List = Split($xOpList[i], "|")
            .Tag = i
          End With
          With aChkLock[i]
            .X = (345 + 210) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 30 * AppFactor
            .Height = 25 * AppFactor
            .Value = False
            .Tag = i
          End With

        Else If $xOption[i] = "Dichotomous" Then
          With aDichoValue[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 285 * AppFactor
            .Height = 25 * AppFactor
            .List = Split($xOpList[i], "|")
            .Tag = i
          End With

        Else If $xOption[i] = "Left and Right" Then
          With aLeftRight[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 285 * AppFactor
            .Height = (25 * Slider1.Value - 5) * AppFactor
            .Tag = i
          End With

        Else If $xOption[i] = "Date Time" Then
          With aDateBox[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 200 * AppFactor
            .Height = 25 * AppFactor
            .Mode = DateChooser.DateTime
            .Tag = i
          End With
          With aBSDate[i]
            .X = (345 + 210) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 30 * AppFactor
            .Height = 25 * AppFactor
            .Picture = Picture["icon:/small/calendar"]
            .Tag = i
          End With

        Else If $xOption[i] = "BS Date" Then
          With aDateBox[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 200 * AppFactor
            .Height = 25 * AppFactor
            .Mode = DateChooser.DateTime
            .Tag = i
          End With
          With aBSDate[i]
            .X = (345 + 210) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 30 * AppFactor
            .Height = 25 * AppFactor
            .Picture = Picture["icon:/small/calendar"]
            .Tag = i
          End With

        Else If $xOption[i] = "User Profile" Then
          With aLineText[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 285 * AppFactor
            .Height = 25 * AppFactor
            .Tag = i
          End With

        Else If $xOption[i] = "ImageValue" Then
          With aButtonBox[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 285 * AppFactor
            .Height = 25 * AppFactor
            .Text = ""
            .Tag = i
          End With

        Else If $xOption[i] = "Clinical Scale" Then
          With aTextArea[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 175 * AppFactor
            .Height = (25 * Slider1.Value - 5) * AppFactor
            .Wrap = True
            .Tag = i
          End With
          With aClinBox[i]
            .X = (345 + 195) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 50 * AppFactor
            .Height = 25 * AppFactor
            .Tag = i
          End With

        Else If $xOption[i] = "Quantitative" Then
          With aValueBox[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 150 * AppFactor
            .Height = 25 * AppFactor
            .Tag = i
          End With
          With aUnitText[i]
            .X = (345 + 160) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 100 * AppFactor
            .Height = 25 * AppFactor
            .Tag = i
          End With

        Else If $xOption[i] = "Qualitative" Then
          With aLineText[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 285 * AppFactor
            .Height = 25 * AppFactor
            .Tag = i
          End With

        Else If $xOption[i] = "RichText Area" Then
          With aHTMLText[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 285 * AppFactor
            .Height = (25 * Slider1.Value - 5) * AppFactor
            .DictionaryPath = modBasic.$dictPathList
            .Tag = i
          End With

        Else
          With aGenTextArea[i]
            .X = (285 + 60) * AppFactor
            .Y = (i * 25 * Slider1.Value + 15) * AppFactor
            .Width = 285 * AppFactor
            .Height = (25 * Slider1.Value - 5) * AppFactor
            .DictionaryPath = modBasic.$dictPathList
            .Tag = i
          End With

        Endif
      Endif

      ''create help button
      With aHelpButton[i]
        .X = (345 + 300) * AppFactor
        .Y = (i * 25 * Slider1.Value + 15) * AppFactor
        .Width = 25 * AppFactor
        .Height = 25 * AppFactor
        .Text = ""
        .Picture = Picture["icon:/small/info"]
        .Tag = i
        .Tooltip = "[Ctrl+O] to display Options"
      End With

    Endif
  Next

End

Public Sub btncntrlrefresh_Click()

  modSettings.SaveSettingsToFile("MultipleTextBox/Height", Slider1.Value)
  DIsplayTextForm()

End

Public Sub BSButton_Click()

  Dim j As Integer
  Dim xx As String

  j = Last.Tag
  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(aDateBox[j].Value))
  If xx Then
    aDateBox[j].Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub btnexectext_Click()

  Dim j As Integer

  Try j = Application.ActiveControl.Tag
  If aHTMLText[j] Then
    aHTMLText[j].RichText = aHTMLText[j].RichText & modCloudAI.GetPatCloudAIResponse($encid)
  Else If aGenTextArea[j] Then
    aGenTextArea[j].Text = aGenTextArea[j].Text & modCloudAI.GetPatCloudAIResponse($encid)
  Endif

End

Public Sub dctexectext_Click()

  Dim xx As String
  Dim j As Integer

  Try j = Application.ActiveControl.Tag
  If aHTMLText[j] Then
    xx = GetRichTextArea(aNameLabel[j].Text, aHTMLText[j].RichText)
    If xx Then
      aHTMLText[j].RichText = xx
    Endif
  Else If aGenTextArea[j] Then
    xx = GetTextArea(aNameLabel[j].Text, aGenTextArea[j].Text)
    If xx Then
      aGenTextArea[j].Text = xx
    Endif
  Endif

End

Public Sub btntemplsumm_Click()

  Dim j As Integer

  Try j = Application.ActiveControl.Tag
  If aHTMLText[j] Then
    aHTMLText[j].RichText = aHTMLText[j].RichText & DictionaryVIew(modBasic.$dictadvPath)
  Else If aGenTextArea[j] Then
    aGenTextArea[j].Text = aGenTextArea[j].Text & DictionaryVIew(modBasic.$dictadvPath)
  Endif

End

Public Sub btnBrOK_Click()

  If $encid Then
    FillExamSubExam()
    Balloon.Info(("Information saved"), btnBrOK)
    Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub QuantiGroup_Change()

  Dim j As Integer

  j = Last.Tag
  If aQuantiBox[j].Value Then
    If aQuantiMin[j].Value <> aQuantiMax[j].Value Then
      If aQuantiBox[j].Value < aQuantiMin[j].Value Or If aQuantiBox[j].Value > aQuantiMax[j].Value Then
        aAbnormCheck[j].Value = True
      Else
        aAbnormCheck[j].Value = False
      Endif
    Else
      aAbnormCheck[j].Value = False
    Endif
  Else
    aAbnormCheck[j].Value = False
  Endif

  If aAbnormCheck[j].Value = True Then
    aAbnormCheck[j].Foreground = Color.Red
  Else
    aAbnormCheck[j].Foreground = Color.Default
  Endif

End

Private Sub FillExamSubExam()

  Dim i As Integer
  Dim xval As String

  For i = 0 To $xitem.Count - 1
    If i < 49 Then
      If $xType[i] = "Quantitative" Then
        If aQuantiBox[i].Value Then
          modClinSub.AddQuantiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], aQuantiBox[i].Value, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
        Endif
      Else
        If $xOption[i] = "Multiple Selection" Then
          If aListBox[i].Count Then
            modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], aListBox[i].List.Join(gb.NewLine), aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
          Endif
        Else If $xOption[i] = "Text Table" Then
          xval = GetTableData(Split($xOpList[i], "|"), aGridView[i])
          If xval Then
            modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], modString.GetTableFormatFromText(xval), aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
          Endif
        Else If $xOption[i] = "Single Selection" Then
          If aComboBox[i].Text Then
            modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], aComboBox[i].Text, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
          Endif
        Else If $xOption[i] = "Dichotomous" Then
          If aDichoValue[i].Value Then
            modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], aDichoValue[i].Value, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
          Endif
        Else If $xOption[i] = "Left and Right" Then
          If aLeftRight[i].DataText Then
            modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], aLeftRight[i].DataText, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
          Endif
        Else If $xOption[i] = "Date Time" Then
          If aDateBox[i].Value Then
            modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], modDate.DateStringForExam(aDateBox[i].Value), aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
          Endif
        Else If $xOption[i] = "BS Date" Then
          If aDateBox[i].Value Then
            modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], modDate.ConvertToLocaldate(aDateBox[i].Value), aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
          Endif
        Else If $xOption[i] = "User Profile" Then
          If aLineText[i].Text Then
            modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], aLineText[i].Text, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
          Endif
        Else If $xOption[i] = "ImageValue" Then
          If aButtonBox[i].Text Then
            modClinSub.AddQualiImageData($encid, $idList[i], $xitem[i], $xOption[i], $sTable, $xSysCons[i], aButtonBox[i].Text, $sCategory)
          Endif
        Else If $xOption[i] = "Quantitative" Then
          If aValueBox[i].Value Then
            modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], CStr(aValueBox[i].Value) & Space(1) & aUnitText[i].Text, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
          Endif
        Else If $xOption[i] = "Qualitative" Then
          If aLineText[i].Text Then
            modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], aLineText[i].Text, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
          Endif
        Else If $xOption[i] = "Clinical Scale" Then
          If aTextArea[i].Text Then
            modClinSub.AddClinicExam($encid, $idList[i], $xitem[i], $xOption[i], aTextArea[i].Text, aClinBox[i].Value, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory)
          Endif
        Else If $xOption[i] = "RichText Area" Then
          If aHTMLText[i].Text Then
            modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], aHTMLText[i].RichText, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
          Endif
        Else
          If aGenTextArea[i].Text Then
            modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], $xOption[i], aGenTextArea[i].Text, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
          Endif
        Endif
      Endif
    Endif
  Next

End

Public Sub ButtonBoxgroup_Click()

  Dim j As Integer

  j = Last.Tag
  OpenOption(j)

End

Public Sub ImageBoxGroup_Click()

  Dim j As Integer

  j = Last.Tag
  Dialog.Filter = ["*.jpg;*.jpeg;*.png;*.bmp", "Picture files"]
  If Dialog.OpenFile() Then Return
  aButtonBox[j].Text = Dialog.Path

End

Public Sub ComboGroup_GotFocus()

  Dim j As Integer

  j = Last.Tag
  If modBasic.$TabletModeEnable = "Yes" Then
    If Not aComboBox[j].Text Then
      aComboBox[j].Popup
    Endif
  Endif

End

Public Sub ComboGroup_MouseWheel()

  Stop Event

End

Public Sub ComboGroup_KeyRelease()

  Dim j As Integer

  j = Last.Tag
  ''enable on chnaging ComboBoxNew to ComboBox
  modFillContainer.AutoFillComboBox(aComboBox[j])
  ' modFillContainer.RestrictComboToContent(aComboBox[j])

End

Public Sub CheckLock_Click()

  Dim i As Integer

  i = Last.Tag
  If aChkLock[i].Value = True Then
    aComboBox[i].Enabled = False
  Else If aChkLock[i].Value = False Then
    aComboBox[i].Enabled = True
  Endif

End

Private Sub OpenOption(j As Integer)

  Dim sVal As String[]
  Dim sPath As String
  Dim xval As String
  Dim xopt As String[]
  Dim xflot As Variant[]
  Dim acalc As Variant

  If $xType[j] = "Quantitative" Then
    If $xOption[j] = "Calculated" Then
      If $xExam[j] = "Expression" Then
        acalc = GetCalculateFloat($xSysCons[j], $encid)
      Else If $xExam[j] = "Structured" Then
        acalc = GetCalculateFloat($xSysCons[j], $encid)
      Else
        xval = modAllExam.GetExamDefaultValue("Exam", $xExam[j])
        If xval Then
          acalc = GetCalculateFloat(xval, $encid)
        Endif
      Endif
      If acalc Then
        aQuantiBox[j].Value = acalc
      Else
        aQuantiBox[j].Value = 0
      Endif

    Else If $xOption[j] = "CopyValue" Then
      acalc = modReportVar.GetLastQuantiParamValue($xSource[j], $xExam[j], $encid)
      If acalc Then
        aQuantiBox[j].Value = acalc
      Else
        aQuantiBox[j].Value = 0
      Endif

    Else
      xflot = GetQuantiValues("Exam", $encid, $xitem[j], 0, 0, aQuantiBox[j].Value)
      If xflot Then
        acalc = xflot[0]
        If acalc Then
          aQuantiBox[j].Value = acalc
        Else
          aQuantiBox[j].Value = 0
        Endif
      Endif

    Endif

  Else
    If $xOpList[j] Then
      xopt = Split($xOpList[j], "|")
    Endif

    If $xOption[j] = "No Selection" Then
      If $xDefaultLst[j] Then
        If $xDefaultLst[j] = "__" Then
        Else
          aGenTextArea[j].Text = $xDefaultLst[j]
        Endif
      Endif
    Else If $xOption[j] = "RichText Area" Then
      If $xDefaultLst[j] Then
        If $xDefaultLst[j] = "__" Then
        Else
          aHTMLText[j].RichText = $xDefaultLst[j]
        Endif
      Endif
    Else If $xOption[j] = "Qualitative" Then
      If $xDefaultLst[j] Then
        If $xDefaultLst[j] = "__" Then
        Else
          aLineText[j].Text = $xDefaultLst[j]
        Endif
      Endif

    Else If $xOption[j] = "Single Selection" Then
      If xopt.Count Then
        sVal = SubChoose(xopt, "Single Selection", $xitem[j])
        If sVal Then
          aComboBox[j].Text = sVal.Join(";")
        Endif
      Endif

    Else If $xOption[j] = "Dichotomous" Then

    Else If $xOption[j] = "Multiple Selection" Then
      If xopt.Count Then
        sVal = SubChoose(xopt, "Multiple Selection", $xitem[j])
        If sVal Then
          aListBox[j].List = sVal
        Endif
      Endif

    Else If $xOption[j] = "Text Table" Then
      If xopt.Count Then
        xval = TableEntry(xopt, $xitem[j], "")
        If xval Then
          DisplayAgegrid(Split($xOpList[j], "|"), xval, aGridView[j])
        Endif
      Endif

    Else If $xOption[j] = "Clinical Scale" Then
      If xopt.Count Then
        sVal = SubChoose(xopt, "Clinical Scale", $xExam[j])
        If sVal Then
          aClinBox[j].Value = sVal[0]
          aTextArea[j].Text = sVal[1]
        Endif
      Endif

    Else If $xOption[j] = "Date Time" Then
      If $xExam[j] = "Expression" Then
        acalc = GetCalculateVariant($xSysCons[j], $encid)
        If IsDate(acalc) Then
          aDateBox[j].Value = CDate(acalc)
        Endif
      Else If $xExam[j] = "Structured" Then
        acalc = GetCalculateVariant($xSysCons[j], $encid)
        If IsDate(acalc) Then
          aDateBox[j].Value = CDate(acalc)
        Endif
      Else
        aDateBox[j].Value = Now()
      Endif

    Else If $xOption[j] = "BS Date" Then
      aDateBox[j].Value = Now()
    Else If $xOption[j] = "User Profile" Then
      sVal = MedicalSelectedValue(("Select Physisican User"), modBasic.$IPConsultUserList)
      If sVal Then
        aLineText[j].Text = sVal[1]
      Endif

    Else If $xOption[j] = "ImageValue" Then
      sPath = modImage.DisplayVisualData($sCategory, $idList[j], "", $xOption[j])
      sVal = CustomDraw(sPath)
      If sVal Then
        aButtonBox[j].Text = sVal[0]
      Endif

    Else If $xOption[j] = "Visual Input" Then
      sPath = modImage.DisplayVisualData($sCategory, $idList[j], "", $xOption[j])
      If sPath Then
        xval = CVisualValue(grdtreeview.Current.Text, sPath, aGenTextArea[j].Text)
        If xval Then
          aGenTextArea[j].Text = xval
        Endif
      Endif

    Else If $xOption[j] = "CopyValue" Then
      aGenTextArea[j].Text = modReportVar.GetLastQualiParamValue($xSource[j], $xExam[j], $encid)

    Else If $xOption[j] = "Calculated" Then
      If $xExam[j] = "Expression" Then
        aGenTextArea[j].Text = GetCalculateVariant($xSysCons[j], $encid)
      Else If $xExam[j] = "Structured" Then
        aGenTextArea[j].Text = GetCalculateVariant($xSysCons[j], $encid)
      Else
        xval = modAllExam.GetExamDefaultValue("Exam", $xExam[j])
        If xval Then
          aGenTextArea[j].Text = GetCalculateVariant(xval, $encid)
        Else
          aGenTextArea[j].Text = ""
        Endif
      Endif

    Endif

  Endif

End

''======================= For GridView (copied from TextTable)=================
Private Sub DisplayAgegrid(sColumns As String[], sTable As String, GridView1x As GridView)

  Dim $ageFile As String[]
  Dim sline As String
  Dim sCol As String[]
  Dim Row As Integer
  Dim Column As Integer

  GridView1x.Clear
  GridView1x.Columns.Count = sColumns.Count
  GridView1x.Rows.Count = Split(sTable, gb.NewLine).Count - 1

  Row = 0
  $ageFile = Split(sTable, gb.NewLine)
  For Each sline In $ageFile
    sCol = Split(sline, "|")
    If sline = $ageFile[0] Then
    Else
      For Column = 0 To sCol.Count - 1
        GridView1[Row - 1, Column].Text = sCol[Column]
      Next
    Endif
    Row = Row + 1
  Next

  For Column = 0 To sColumns.Count - 1
    GridView1x.Columns[Column].Text = sColumns[Column]
    Try GridView1x.Columns.Width = CInt(Floor(Frame1.Width / sCol.Count))
  Next

End

Private Function GetTableData(sColumns As String[], GridView1x As GridView) As String

  Dim Row As Integer
  Dim Column As Integer
  Dim sCol As String[]
  Dim sRow As String[]
  Dim xval As String

  sRow = New String[]
  sRow.Add(sColumns.Join("|"))
  For Row = 0 To GridView1x.Rows.Count - 1
    sCol = New String[]
    For Column = 0 To GridView1x.Columns.Count - 1
      sCol.Add(GridView1x[Row, Column].Text)
    Next
    sRow.Add(sCol.Join("|"))
  Next
  xval = sRow.Join(gb.NewLine)
  Return xval

End

Private Function GetCalculateVariant(sFormula As String, encid As String) As Variant

  Dim i As Integer
  Dim xval As Variant

  If sFormula Then
    For i = 0 To $xCode.Count - 1
      If aGenTextArea[i] Then
        If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
          sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", aGenTextArea[i].Text)
        Endif
      Else If aDateBox[i] Then
        If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
          sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", Str(aDateBox[i].Value))
        Endif
      Else If aQuantiBox[i] Then
        If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
          sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", CStr(aQuantiBox[i].Value))
        Endif
      Endif
    Next
    If (String.InStr(sFormula, "$Calc[") > 0) Then
      sFormula = modReportVar.GetCalcValueVariant(sFormula, encid)
    Endif
    xval = sFormula

  Else
    xval = ""
  Endif

  Return xval

End

Private Function GetCalculateFloat(sFormula As String, encid As String) As Float

  Dim i As Integer
  Dim xval As Float

  If sFormula Then
    For i = 0 To $xCode.Count - 1
      If aGenTextArea[i] Then
        If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
          sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", aGenTextArea[i].Text)
        Endif
      Else If aDateBox[i] Then
        If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
          sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", Str(aDateBox[i].Value))
        Endif
      Else If aQuantiBox[i] Then
        If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
          sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", CStr(aQuantiBox[i].Value))
        Endif
      Endif
    Next
    If (String.InStr(sFormula, "$Calc[") > 0) Then
      sFormula = modReportVar.GetCalcValueFloat(sFormula, encid)
    Endif
    xval = CFloat(sFormula)

  Else
    xval = 0
  Endif

  Return xval

End

''----------------- Patan --------------
Public Sub mnuaddConsult_Click()

  Dim hForm As FmMiniConsult

  If txtencid.Text Then
    hForm = New FmMiniConsult(Trim(txtencid.Text), $billModeService)
    hForm.ShowModal
  Endif

End
