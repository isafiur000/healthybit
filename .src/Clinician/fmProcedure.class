' Gambas class file

Private hPatient As FmPatientProfile
Private $ProcIndex As Long
Private $ProcBill As Long
Private $UserRestrict As String[]
Private $rData As Result
Private $aMyFields As String[]
Private $sTatus As String

Private $AlphaList As String[]
Private $LedgerAC As String
Private $PatientNum As String
Private $xBillType As String
Private $PharmMode As String
Private $sLevel As String
Private $PositionList As String[]

Private $billModeTest As String
Private $billModeRadio As String
Private $billModePharmacy As String
Private $billModeProcedure As String
Private $billModeEquipment As String
Private $billModeService As String
Private $billModeOthers As String

Public Sub Form_Open()
  
  Dim xprelist As String
  Dim xonlist As String
  Dim xpostlist As String
  
  modGeneralMain.ArrangeEmbedForms(Me, Panel1, "Vertical")
  Me.Icon = Picture[modGeneralMain.$strLogo]
  hPatient = New FmPatientProfile(Me.Name, Frame1)
  FillCustomFormMenu()
  
  If modBasic.$PayableSettingVerify = "Enable" Then
    $sLevel = "Waiting"
  Else
    $sLevel = "Active"
  Endif
  dtplan.Value = Now()
  $UserRestrict = modBasic.$ClinicDisableCompo
  $AlphaList = New String[]
  
  txtcomment.DictionaryPath = modBasic.$dictPathList
  txtprediscuss.DictionaryPath = modBasic.$dictPathList
  txtsummry.DictionaryPath = modBasic.$dictPathList
  txtanesnote.DictionaryPath = modBasic.$dictPathList
  txtprecomment.DictionaryPath = modBasic.$dictPathList
  txtpostcomment.DictionaryPath = modBasic.$dictPathList
  txtincision.DictionaryPath = modBasic.$dictPathList
  txtfindings.DictionaryPath = modBasic.$dictPathList
  txtprocedures.DictionaryPath = modBasic.$dictPathList
  txtclosure.DictionaryPath = modBasic.$dictPathList
  modLabSub.DisplayDefaultTestUnit(rbsi, rbmetric)
  
  xprelist = modSettings.ShowSettingFromFIle("ClinicForms/PreOperativeIndications")
  If xprelist Then
    cmbpreindication.List = modString.GetStringArrayFromFile(xprelist, True)
  Endif
  xonlist = modSettings.ShowSettingFromFIle("ClinicForms/OperativeIndications")
  If xonlist Then
    cmbonindication.List = modString.GetStringArrayFromFile(xonlist, True)
  Endif
  xpostlist = modSettings.ShowSettingFromFIle("ClinicForms/PostOperativeIndications")
  If xpostlist Then
    cmbpostindication.List = modString.GetStringArrayFromFile(xpostlist, True)
  Endif
  If modBasic.$PayableLockEntry = "Yes" Then
    btnpayto.Enabled = False
  Endif
  If modBasic.$ReferralLockEntry = "Yes" Then
    btnrefer.Enabled = False
  Endif
  If modBasic.$ShareProcedureAccess = "Yes" Then
    btnaddperson.Visible = True
    mnudelsurguser.Visible = True
  Else
    btnaddperson.Visible = False
    mnudelsurguser.Visible = False
  Endif
  rbsurg.Value = True
  
End

Public Sub Form_Activate()
  
  If Not hPatient.txtencid.Text Then
    hPatient.txtencid.SetFocus
  Else If hPatient.txtencid.Text = modBasic.$EncIdPrefix Then
    hPatient.txtencid.SetFocus
  Endif
  
End

Public Sub rbsi_Click()
  
  modSettings.SaveSettingsToFile("TestUnit/Default", "SI")
  
End

Public Sub rbmetric_Click()
  
  modSettings.SaveSettingsToFile("TestUnit/Default", "Metric")
  
End

Public Sub Form_Close()
  
  hPatient.Close
  modGeneralMain.RecordFormExit(Me)
  
End

Public Sub Form_Resize()
  
  modGeneralMain.ShowSelectedFormMenu(Me)
  
End

''-----------------------------App Forms ----------------------------------------------
Public Sub mnuinpat_Click()
  
  Dim hForm As FmPatientMain
  
  If txtencid.Text Then
    hForm = New FmPatientMain(Trim(txtencid.Text), True)
    modWorkSpace.Add(hForm)
  Endif
  
End

Public Sub mnuexamform_Click()
  
  Dim hForm As FmExamReporting
  
  If txtencid.Text Then
    hForm = New FmExamReporting(Trim(txtencid.Text), True)
    modWorkSpace.Add(hForm)
  Endif
  
End

Public Sub mnudelivform_Click()
  
  Dim hForm As FmDeliveryNew
  
  If txtencid.Text Then
    hForm = New FmDeliveryNew(Trim(txtencid.Text), True)
    modWorkSpace.Add(hForm)
  Endif
  
End

'''======================================Patient Info ========================================
Private Sub ButtonControl()
  
  Dim xx As Boolean
  
  xx = modPatient.EnableClinicForm($sTatus)
  ''procedure component
  mnunewproc.Enabled = xx
  btnsubChange.Enabled = xx
  btncustonpoint.Enabled = xx
  bnlistpoint.Enabled = xx
  btnicdpoint.Enabled = xx
  btndelcomponent.Enabled = xx
  btncomment.Enabled = xx
  ''preoperative
  btnperson.Enabled = xx
  btnprediscus.Enabled = xx
  grdprelist.Enabled = xx
  grdprexam.Enabled = xx
  btnpreindication.Enabled = xx
  btnprecomment.Enabled = xx
  btnorderpre.Enabled = xx
  btndosepre.Enabled = xx
  grdpreitem.Enabled = xx
  ''on procedure
  grdonlist.Enabled = xx
  grdonproc.Enabled = xx
  btnsaveonprocindi.Enabled = xx
  btnsavesummry.Enabled = xx
  btnorderon.Enabled = xx
  btndoseon.Enabled = xx
  grdonpharmacy.Enabled = xx
  btnaddperson.Enabled = xx
  grdperson.Enabled = xx
  ''anesthesia
  grdaneslist.Enabled = xx
  grdanes.Enabled = xx
  btnsavetechniq.Enabled = xx
  btnanesnote.Enabled = xx
  btnorderanes.Enabled = xx
  btndoseanes.Enabled = xx
  grdanesitem.Enabled = xx
  ''postoperative
  grdpostlist.Enabled = xx
  grdpostexam.Enabled = xx
  btnpostindication.Enabled = xx
  btnpostcomment.Enabled = xx
  btnorderpost.Enabled = xx
  btndosepost.Enabled = xx
  grdpostitem.Enabled = xx
  ''event timing
  mnutiming.Enabled = xx
  ''vital
  mnuessent.Enabled = xx
  ''monitoring
  mnumonitor.Enabled = xx
  
  If modBasic.$LockProcedCompInput = "Yes" Then
    btnaddcompo.Enabled = False
  Endif
  If modBasic.$LockAnesTechnInput = "Yes" Then
    btnaddtechniq.Enabled = False
  Endif
  
  If $UserRestrict Then
    UserAccessRestrict()
  Endif
  
End

Public Sub BasicInfoPatient()
  
  txtencid.Text = hPatient.$PatientEncounter
  
  If txtencid.Text Then
    modAppSupport.RecordPatientActivity("Patient Data", Me.Name, "EncounterID", Trim(txtencid.Text))
    $sTatus = modPatient.CurrentAdmissionStatus(Trim(txtencid.Text))
    $PatientNum = modPatient.GetPatientNoByEnc(Trim(txtencid.Text))
    GetDefaultBillingmodes()
    ButtonControl()
    ShowAddedProctable()
    modPatientSub.PopUpPatientForm(Trim(txtencid.Text), Me.Tag)
    cmbprocedure.SetFocus
  Endif
  
End

Private Sub GetDefaultBillingmodes()
  
  Dim xpackage As String
  Dim resx As Result
  
  Select $sTatus
    Case "Admitted", "Discharged", "LAMA", "Death", "Refer", "Absconder"
      $billModeTest = modNonMedical.GetAutoIPBillingPack("Test", Trim(txtencid.Text))
      $billModeRadio = modNonMedical.GetAutoIPBillingPack("Radio", Trim(txtencid.Text))
      $billModePharmacy = modNonMedical.GetAutoIPBillingPack("Pharmacy", Trim(txtencid.Text))
      $billModeEquipment = modNonMedical.GetAutoIPBillingPack("Equipment", Trim(txtencid.Text))
      $billModeProcedure = modNonMedical.GetAutoIPBillingPack("Procedure", Trim(txtencid.Text))
      $billModeService = modNonMedical.GetAutoIPBillingPack("Service", Trim(txtencid.Text))
      $billModeOthers = modNonMedical.GetAutoIPBillingPack("Others", Trim(txtencid.Text))
    Case Else
      xpackage = modNonMedical.DefaultBillingScheme(Trim(txtencid.Text), modBasic.$compID)
      $billModeTest = xpackage
      $billModeRadio = xpackage
      $billModePharmacy = xpackage
      $billModeEquipment = xpackage
      $billModeProcedure = xpackage
      $billModeService = xpackage
      $billModeOthers = xpackage
  End Select
  
  resx = modDatabase.$myConn.Exec("select fldmode,fldbillingmode,fldacledger,fldbilltype,fldreference,fldlimit from tbldiscount where fldtype=&1", $billModePharmacy)
  If resx.Available Then
    ''billingmode
    If resx["fldbillingmode"] Then
      $PharmMode = resx["fldbillingmode"]
    Else
      $PharmMode = modPatient.GetPatBillingMode(Trim(txtencid.Text))
    Endif
    ''ledger A/C
    $LedgerAC = resx["fldacledger"]
    ''BillType
    $xBillType = resx["fldbilltype"]
    If Not $xBillType Then
      $xBillType = "Cash"
    Endif
  Endif
  
End

Public Sub mnulastencid_Click()
  
  hPatient.txtencid.Text = modSettings.ShowLogValues("LastValue/Encounter")
  
End

Public Sub mnupatlock_Click()
  
  If txtencid.Text Then
    modPatientSub.LockPatientActivity(Me.Name, Trim(txtencid.Text))
  Endif
  
End

''================================ Tab Data ===========================================
Public Sub Form_KeyRelease()
  
  If Key.Code = Key.F2 Then
    TabPanel1.Index = 0
    LoadTabPicture(TabPanel1.Index)
    
  Else If Key.Code = Key.F3 Then
    TabPanel1.Index = 1
    If $ProcIndex Then
      LoadTabPicture(TabPanel1.Index)
      lstdiscuss.List = modPatPatho.GetDiscusPanels(Trim(txtencid.Text), $ProcIndex)
      lstfinaldiagno.List = modPathoSub.GetFinalDiagnosisList(Trim(txtencid.Text))
      txtprediscuss.RichText = GetLastValueProc("fldreport", "Pre-Operative Discussion")
      txtprecomment.RichText = GetLastValueProc("fldreport", "Pre-Operative Note")
      cmbpreindication.Text = GetLastValueProc("fldreportquali", "Pre-Operative Indication")
      GetExamList("Pre-Operative", grdprelist)
      FillExamtable("Pre-Operative Exam:" & CStr($ProcIndex), grdprexam)
      FillDosingGrid("Current", "Pre-Operative", grdpreitem)
    Endif
    
  Else If Key.Code = Key.F4 Then
    TabPanel1.Index = 2
    If $ProcIndex Then
      LoadTabPicture(TabPanel1.Index)
      txtincision.RichText = GetLastValueProc("fldreport", "Incision")
      txtfindings.RichText = GetLastValueProc("fldreport", "Findings")
      txtprocedures.RichText = GetLastValueProc("fldreport", "Proedures")
      txtclosure.RichText = GetLastValueProc("fldreport", "Closure")
      txtsummry.RichText = GetLastValueProc("fldreport", "Operation Note")
      cmbonindication.Text = GetLastValueProc("fldreportquali", "Operative Indication")
      lstcomponent.List = modPatPatho.GetComponentProcedure(Trim(txtencid.Text), $ProcIndex)
      GetExamList("Operative", grdonlist)
      FillExamtable("Operative Exam:" & CStr($ProcIndex), grdonproc)
      FillDosingGrid("Current", "Procedure", grdonpharmacy)
      ShowCurrStockGrid()
      ShowUsedGridViewList()
    Endif
    
  Else If Key.Code = Key.F5 Then
    TabPanel1.Index = 3
    If $ProcIndex Then
      LoadTabPicture(TabPanel1.Index)
      txtanesnote.RichText = GetLastValueProc("fldreport", "Anaesthesia Note")
      cmbtechniq.Text = GetLastValueProc("fldreportquali", "Anaesthesia Technique")
      GetExamList("Anaesthesia", grdaneslist)
      FillExamtable("Anaesthesia:" & CStr($ProcIndex), grdanes)
      FillDosingGrid("Current", "Anaesthesia", grdanesitem)
    Endif
    
  Else If Key.Code = Key.F6 Then
    TabPanel1.Index = 4
    If $ProcIndex Then
      LoadTabPicture(TabPanel1.Index)
      txtpostcomment.RichText = GetLastValueProc("fldreport", "Post-Operative Note")
      cmbpostindication.Text = GetLastValueProc("fldreportquali", "Post-Operative Indication")
      GetExamList("Post-Operative", grdpostlist)
      FillExamtable("Post-Operative Exam:" & CStr($ProcIndex), grdpostexam)
      FillDosingGrid("Current", "Post-Operative", grdpostitem)
    Endif
    
  Else If Key.Code = Key["X"] And If Key.Control Then
    Me.Close()
    
  Else
    modGeneralmain.GoToNextControlTab()
  Endif
  
End

Public Sub TabPanel1_Click()
  
  If txtencid.Text And If $ProcIndex Then
    LoadTabPicture(TabPanel1.Index)
    
    If TabPanel1.Index = 0 Then
      ShowSurgUser()
      
    Else If TabPanel1.Index = 1 Then
      lstdiscuss.List = modPatPatho.GetDiscusPanels(Trim(txtencid.Text), $ProcIndex)
      lstfinaldiagno.List = modPathoSub.GetFinalDiagnosisList(Trim(txtencid.Text))
      txtprediscuss.RichText = GetLastValueProc("fldreport", "Pre-Operative Discussion")
      txtprecomment.RichText = GetLastValueProc("fldreport", "Pre-Operative Note")
      cmbpreindication.Text = GetLastValueProc("fldreportquali", "Pre-Operative Indication")
      GetExamList("Pre-Operative", grdprelist)
      FillExamtable("Pre-Operative Exam:" & CStr($ProcIndex), grdprexam)
      FillDosingGrid("Current", "Pre-Operative", grdpreitem)
      
    Else If TabPanel1.Index = 2 Then
      txtincision.RichText = GetLastValueProc("fldreport", "Incision")
      txtfindings.RichText = GetLastValueProc("fldreport", "Findings")
      txtprocedures.RichText = GetLastValueProc("fldreport", "Proedures")
      txtclosure.RichText = GetLastValueProc("fldreport", "Closure")
      txtsummry.RichText = GetLastValueProc("fldreport", "Operation Note")
      cmbonindication.Text = GetLastValueProc("fldreportquali", "Operative Indication")
      lstcomponent.List = modPatPatho.GetComponentProcedure(Trim(txtencid.Text), $ProcIndex)
      GetExamList("Operative", grdonlist)
      FillExamtable("Operative Exam:" & CStr($ProcIndex), grdonproc)
      FillDosingGrid("Current", "Procedure", grdonpharmacy)
      ShowCurrStockGrid()
      ShowUsedGridViewList()
      
    Else If TabPanel1.Index = 3 Then
      txtanesnote.RichText = GetLastValueProc("fldreport", "Anaesthesia Note")
      cmbtechniq.Text = GetLastValueProc("fldreportquali", "Anaesthesia Technique")
      GetExamList("Anaesthesia", grdaneslist)
      FillExamtable("Anaesthesia:" & CStr($ProcIndex), grdanes)
      FillDosingGrid("Current", "Anaesthesia", grdanesitem)
      
    Else If TabPanel1.Index = 4 Then
      txtpostcomment.RichText = GetLastValueProc("fldreport", "Post-Operative Note")
      cmbpostindication.Text = GetLastValueProc("fldreportquali", "Post-Operative Indication")
      GetExamList("Post-Operative", grdpostlist)
      FillExamtable("Post-Operative Exam:" & CStr($ProcIndex), grdpostexam)
      FillDosingGrid("Current", "Post-Operative", grdpostitem)
      
    Endif
    
  Endif
  
End

Private Sub LoadTabPicture(i As Integer)
  
  Dim p As Integer
  
  For p = 0 To TabPanel1.Count - 1
    If p = i Then
      TabPanel1[i].Picture = Picture["icons/coll4.png"]
    Else
      If TabPanel1[p].Picture Then
        TabPanel1[p].Picture = Picture[""]
      Endif
    Endif
  Next
  
End

''=========================== General text====================
Private Function GetLastValueProc(sFIeld As String, sCategory As String) As String
  
  Dim res As Result
  Dim sql As String
  Dim xx As String
  
  sql = Subst("select &1 as col from tblpatsubgeneral", sFIeld)
  res = modDatabase.$myConn.Exec(sql & " where flditemid=&1 and fldencounterval=&2 and fldchapter=&3", $ProcIndex, Trim(txtencid.Text), sCategory)
  If res.Available Then
    res.MoveLast
    xx = res!col
  Endif
  Return xx
  
End

Public Sub btnaddprelist_Click()
  
  Dim xpath As String
  
  If Dialog.OpenFile() Then Return
  xpath = Dialog.Path
  If Exist(xpath) Then
    modSettings.SaveSettingsToFile("ClinicForms/PreOperativeIndications", xpath)
    cmbpreindication.List = modString.GetStringArrayFromFile(xpath, True)
  Endif
  
End

Public Sub btnaddonlist_Click()
  
  Dim xpath As String
  
  If Dialog.OpenFile() Then Return
  xpath = Dialog.Path
  If Exist(xpath) Then
    modSettings.SaveSettingsToFile("ClinicForms/OperativeIndications", xpath)
    cmbonindication.List = modString.GetStringArrayFromFile(xpath, True)
  Endif
  
End

Public Sub btnaddpostlist_Click()
  
  Dim xpath As String
  
  If Dialog.OpenFile() Then Return
  xpath = Dialog.Path
  If Exist(xpath) Then
    modSettings.SaveSettingsToFile("ClinicForms/PostOperativeIndications", xpath)
    cmbpostindication.List = modString.GetStringArrayFromFile(xpath, True)
  Endif
  
End

''============================ Medicines ======================
Private Sub FillDosingGrid(strType As String, xcateg As String, xgridview As GridView)
  
  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result
  
  If xcateg Then
    If strType = "Current" Then
      sql = "select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,(fldqtydisp-fldqtyret) as qty,fldlabel,fldcurval from tblpatdosing where fldencounterval=&1 and fldcomp_order=&2 and fldsave_order=&3 and flditemtype=&4"                                                   ''
      res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), modBasic.$compID, True, "Medicines")
    Else If strType = "All" Then
      sql = "select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,(fldqtydisp-fldqtyret) as qty,fldlabel,fldcurval from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and flditemtype=&3"                                                   ''
      res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, "Medicines")
    Endif
    
    xgridview.Clear
    xgridview.Columns.Count = res.Fields.Count
    xgridview.Rows.Count = res.Count
    
    With xgridview
      .Rows.Height = modBasic.$AppGridRowHeight
      .Columns[0].Width = 1
      .Columns[1].Width = 150 * modBasic.$AppWidthRatio
      .Columns[2].Width = 75 * modBasic.$AppWidthRatio
      .Columns[3].Width = 350 * modBasic.$AppWidthRatio
      .Columns[4].Width = 75 * modBasic.$AppWidthRatio
      .Columns[5].Width = 50 * modBasic.$AppWidthRatio
      .Columns[6].Width = 50 * modBasic.$AppWidthRatio
      .Columns[7].Width = 50 * modBasic.$AppWidthRatio
      .Columns[8].Width = 1
      .Columns[9].Width = 75 * modBasic.$AppWidthRatio
      
      .Columns[1].Text = "StartDate"
      .Columns[2].Text = "Route"
      .Columns[3].Text = "Particulars"
      .Columns[4].Text = "Dose"
      .Columns[5].Text = "Freq"
      .Columns[6].Text = "Days"
      .Columns[7].Text = "QTY"
      .Columns[9].Text = "Status"
    End With
    
    For Each res
      Column = 0
      For Each fld In res.Fields
        modGeneralMain.GridExplicitDecoration(xgridview, res.Index, Column)
        If Column = 1 Then
          xgridview[res.Index, Column].Text = modReportVar.GetDateTimeReport(res["fldstarttime"], gb.GeneralDate)
        Else
          xgridview[res.Index, Column].Text = res[fld.Name]
        Endif
        xgridview.Rows[res.Index].Height = Max(xgridview.Rows[res.Index].Height, xgridview[res.Index, Column].Font.RichTextHeight(xgridview[res.Index, Column].Text, xgridview.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (xgridview.Rows.Height - xgridview.Font.Height))
        xgridview[res.Index, Column].WordWrap = True
        
        Column = Column + 1
      Next
    Next
    xgridview.Row = 0
    
  Endif
  
End

Private Sub UpdateMedStatus(GridViewx As GridView)
  
  Dim xx As String[] = ["Continue", "Completed", "Discontinue", "Hold", "Change", "ReWrite", "Cancelled", "Wasted"]
  Dim res As Result
  Dim xval As String
  
  If GridViewx.Column = 9 Then
    xval = InputCombo(GridViewx[GridViewx.Row, 3].Text, ("Select Current Status"), xx, GridViewx[GridViewx.Row, 9].Text, True)
    If xval Then
      res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", GridViewx[GridViewx.Row, 0].Text)
      res["fldcurval"] = xval
      res["xyz"] = False
      res.Update()
    Endif
  Endif
  
End

Private Sub OrderMedicine(xcateg As String, xGridView As GridView)
  
  Dim hForm As FmMedOrder
  
  If txtencid.Text Then
    If $ProcIndex Then
      If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Pharmacy") = True Then
        If modBasic.$MedRequestForm = "Separate" Then
        Else
          hForm = New FmMedOrder(Trim(txtencid.Text), $sTatus, $billModePharmacy)
          hForm.ShowModal
        Endif
        FillDosingGrid("Current", xcateg, xGridView)
      Endif
    Endif
  Endif
  
End

Private Sub ClickDose(xcateg As String, xGridView As GridView)
  
  Dim hForm As FmDosecount
  
  If txtencid.Text Then
    If $ProcIndex Then
      hForm = New FmDosecount(Trim(txtencid.Text))
      hForm.ShowModal
      FillDosingGrid("Current", xcateg, xGridView)
    Endif
  Endif
  
End

Private Sub ClickInfusion(xcateg As String, xGridView As GridView)
  
  Dim hForm As FmIVInfusion
  
  If txtencid.Text Then
    If $ProcIndex Then
      hForm = New FmIVInfusion(Trim(txtencid.Text))
      hForm.ShowModal
      FillDosingGrid("Current", xcateg, xGridView)
    Endif
  Endif
  
End

Private Sub ShowAllMed(btnall As Button, xcateg As String, xgridview As GridView)
  
  If txtencid.Text Then
    If btnall.Value = True Then
      FillDosingGrid("All", xcateg, xgridview)
    Else If btnall.Value = False Then
      FillDosingGrid("Current", xcateg, xgridview)
    Endif
  Endif
  
End

''================================== Examination =======================
Private Function GetExamList(sType As String, xGridView As GridView) As String[]
  
  Dim res As Result
  Dim Column As Integer
  Dim fld As ResultField
  
  res = modDatabase.$myConn.Exec("select fldexamid,fldtype,fldsysconst,fldexamid,fldtanswertype from tbldeptexam where flddept=&1", sType)
  xGridView.Clear
  xGridView.Columns.Count = res.Fields.Count
  xGridView.Rows.Count = res.Count
  
  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(xGridView, res.Index, Column)
      If Column = 3 Then
        xGridView[res.Index, Column].Text = modFixClinic.GetExamtOptionType(res[fld.Name])
      Else
        xGridView[res.Index, Column].Text = res[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  xGridView.Row = 0
  
  With xGridView
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 250 * modBasic.$AppWidthRatio
    .Columns[1].Width = 1
    .Columns[2].Width = 1
    .Columns[3].Width = 1
    .Columns[4].Width = 1
  End With
  
End

Private Function ProcedureExamType(sCateg As String) As String
  
  Dim xx As String
  
  If sCateg = "Pre-Operative Exam" Then
    xx = "Pre-Operative"
  Else If sCateg = "Operative Exam" Then
    xx = "Operative"
  Else If sCateg = "Anaesthesia" Then
    xx = "Anaesthesia"
  Else If sCateg = "Post-Operative Exam" Then
    xx = "Post-Operative"
  Endif
  Return xx
  
End

Private Sub AddExamSelectionProc(encid As String, sExamLabel As String, sysConst As String, sType As String, OptionType As String, xid As String)
  
  Dim sName As String
  Dim xquantival As Variant[]
  Dim yqualival As Variant[]
  Dim lftrtval As Variant[]
  Dim xlimit As Float[]
  Dim opt As String[]
  Dim sVal As String[]
  Dim asx As String[]
  Dim xdate As Date
  Dim xval As String
  Dim xdefval As Float
  Dim xstrval As String
  
  Dim cForm As CFindExam
  Dim examtype As String
  Dim sExam As String
  Dim sOptName As String
  Dim sDefault As String
  
  If sysConst Then
    cForm = New CFindExam(sysConst)
    examtype = cForm.GetExamMode()
    sExam = cForm.GetExamName()
    sOptName = cForm.GetExamOption()
    sDefault = cForm.GetExamDefault()
  Endif
  
  If sExam Then
    sName = sExam
  Else
    sName = sExamLabel
  Endif
  
  If sType = "Quantitative" Then
    xdefval = 0
    If sysConst Then
      If OptionType = "Sys Constant" And If sOptName = "Calculated" Then
        If sDefault Then
          xdefval = modReportVar.GetCalcValueFloat(sDefault, encid)
        Endif
      Else If OptionType = "Calculated" Then
        xdefval = modReportVar.GetCalcValueFloat(sysConst, encid)
      Else If OptionType = "CopyValue" Then
        xdefval = modReportVar.GetLastQuantiParamValue(examtype, sExam, encid)
      Endif
      xlimit = modClinic.GetBothQuantiExamVal(sExam, encid)
    Else
      xlimit = [0, 0]
    Endif
    xquantival = GetQuantiValues(examtype, Trim(txtencid.Text), sName, xlimit[0], xlimit[1], xdefval)
    If xquantival Then
      modClinSub.AddQuantiData(encid, "", sExamLabel, OptionType, xquantival[0], xquantival[1], xid, sysConst)
    Endif
    
  Else
    If sysConst Then
      xstrval = ""
      If OptionType = "Sys Constant" Then
        If sOptName = "Calculated" Then
          If sDefault Then
            xstrval = modReportVar.GetCalcValueVariant(sDefault, encid)
          Endif
          yqualival = GetQualiValues(sName, xstrval, examtype)
        Else
          yqualival = modExamOption.GetQualiExamOptionDirectValue(sExam, "", examtype, sOptName)
        Endif
      Else If OptionType = "Calculated" Then
        xstrval = modReportVar.GetCalcValueVariant(sysConst, encid)
        yqualival = GetQualiValues(sName, xstrval, examtype)
      Else If OptionType = "CopyValue" Then
        xstrval = modReportVar.GetLastQualiParamValue(examtype, sExam, encid)
        yqualival = GetQualiValues(sName, xstrval, examtype)
      Endif
      
    Else
      If OptionType = "Date Time" Then
        xdate = GetDateValue(("Select Date Time"), sName, "")
        If xdate Then
          yqualival = [modDate.DateStringForExam(xdate), False]
        Endif
        
      Else If OptionType = "BS Date" Then
        xdate = GetDateValue(("Select Date Time"), sName, "")
        If xdate Then
          yqualival = [modDate.ConvertToLocaldate(xdate), False]
        Endif
        
      Else If OptionType = "Qualitative" Then
        yqualival = GetQualiString(sName, "", "Exam")
        
      Else If OptionType = "Left and Right" Then
        lftrtval = CLeftRight(sName, "", modFixClinic.GetLeftRightMainHeader("Exam", sName))
        If lftrtval Then
          yqualival = [lftrtval[0], lftrtval[1]]
        Endif
        
      Else If OptionType = "Single Selection" Or If OptionType = "Dichotomous" Or If OptionType = "Multiple Selection" Then
        asx = Split(xid, ":")
        opt = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldanswer from tbldeptexamoption where fldexamid=&1 and flddept=&2 and fldtanswertype=&3 ORDER BY fldindex", sExamLabel, ProcedureExamType(asx[0]), OptionType))
        If opt.Count Then
          sVal = SubChoose(opt, OptionType, sExamLabel)
          If sVal Then
            yqualival = [sVal.Join(gb.NewLine), False]
          Endif
        Else
          yqualival = GetQualiValues(sName, "", "Exam")
        Endif
        
      Else If OptionType = "Text Table" Then
        asx = Split(xid, ":")
        opt = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldanswer from tbldeptexamoption where fldexamid=&1 and flddept=&2 and fldtanswertype=&3 ORDER BY fldindex", sExamLabel, ProcedureExamType(asx[0]), OptionType))
        If opt.Count Then
          xval = TableEntry(opt, sExamLabel, "")
          If xval Then
            yqualival = [modString.GetTableFormatFromText(xval), False]
          Endif
        Else
          yqualival = GetQualiValues(sName, "", "Exam")
        Endif
        
      Else If OptionType = "RichText Area" Then
        yqualival = GetQualiRich(sName, "", "Exam")
        
      Else
        yqualival = GetQualiValues(sName, "", "Exam")
      Endif
    Endif
    
    If yqualival Then
      If yqualival.Count = 3 And If yqualival[2] Then
        modClinSub.AddClinicExam(encid, "", sExamLabel, OptionType, yqualival[0], CFloat(yqualival[2]), yqualival[1], xid, sysConst, "Regular")
      Else
        modClinSub.AddClinicExam(encid, "", sExamLabel, OptionType, yqualival[0], 0, yqualival[1], xid, sysConst, "Regular")
      Endif
    Endif
  Endif ''quali or quanti
  
End

Public Sub FillExamtable(xcateg As String, xGridView As GridView)
  
  Dim Column As Integer
  Dim fld As ResultField
  Dim $sData1 As Result
  
  $sData1 = modDatabase.$myConn.Exec("select fldid,fldtype,fldhead,fldabnormal,fldid,fldid,fldtime,fldencounterval,fldrepquali,fldsysconst,flduserid,fldcomp from tblpatientexam where fldencounterval=&1 and fldinput=&2 and fldsave=&3", Trim(txtencid.Text), xcateg, True)
  xGridView.Clear
  xGridView.Columns.Count = $sData1.Fields.Count
  xGridView.Rows.Count = $sData1.Count
  
  With xGridView
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 1
    .Columns[2].Width = 200 * modBasic.$AppWidthRatio
    .Columns[3].Width = 25 * modBasic.$AppWidthRatio
    .Columns[4].Width = 250 * modBasic.$AppWidthRatio
    .Columns[5].Width = 25 * modBasic.$AppWidthRatio
    .Columns[6].Width = 150 * modBasic.$AppWidthRatio
    .Columns[7].Width = 1
    .Columns[8].Width = 1
    .Columns[9].Width = 1
    .Columns[10].Width = 100 * modBasic.$AppWidthRatio
    .Columns[11].Width = 100 * modBasic.$AppWidthRatio
    
    .Columns[2].Text = "Examination"
    .Columns[4].Text = "Observation"
    .Columns[6].Text = "ReportTime"
    .Columns[10].Text = "UserID"
    .Columns[11].Text = "Location"
  End With
  
  For Each $sData1
    Column = 0
    For Each fld In $sData1.Fields
      modGeneralMain.GridExplicitDecoration(xGridView, $sData1.Index, Column)
      If Column = 3 Then
        xGridView[$sData1.Index, Column].Picture = Picture[modMisc.GetGridIcon($sData1[fld.Name])]
        xGridView[$sData1.Index, Column].Text = ""
      Else If Column = 4 Then
        xGridView[$sData1.Index, Column].RichText = modClinic.GetExamValueString(Trim(txtencid.Text), $sData1["fldid"], False)
        If modBasic.$RichtextResizeRow = "Yes" Then
          xGridView.Rows[$sData1.Index].Height = Max(xGridView.Rows[$sData1.Index].Height, xGridView[$sData1.Index, Column].Font.RichTextHeight(xGridView[$sData1.Index, Column].RichText, xGridView.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (xGridView.Rows.Height - xGridView.Font.Height))
        Endif
      Else If Column = 5 Then
        xGridView[$sData1.Index, Column].Picture = Picture["icon:/small/cancel"]
        xGridView[$sData1.Index, Column].Text = ""
      Else If Column = 6 Then
        xGridView[$sData1.Index, Column].Text = modReportVar.GetDateTimeReport($sData1["fldtime"], gb.GeneralDate)
      Else
        xGridView[$sData1.Index, Column].Text = $sData1[fld.Name]
      Endif
      xGridView.Rows[$sData1.Index].Height = Max(xGridView.Rows[$sData1.Index].Height, xGridView[$sData1.Index, Column].Font.RichTextHeight(xGridView[$sData1.Index, Column].Text, xGridView.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (xGridView.Rows.Height - xGridView.Font.Height))
      xGridView[$sData1.Index, Column].WordWrap = True
      
      Column = Column + 1
    Next
  Next
  xGridView.Row = 0
  
End

''================================== First Tab ============================================
Public Sub dtneplan_Click()
  
  Dim xx As String
  
  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtplan.Value))
  If xx Then
    dtplan.Value = modDate.ConvertToEnglishdate(xx)
  Endif
  
End

Public Sub cmbstatus_GotFocus()
  
  If cmbprocedure.Text Then
    If modNonMedical.GetControlServCombo(cmbprocedure.Text) = False Then
      cmbprocedure.Text = ""
      Balloon.Warning(("Item not listed"), cmbprocedure)
      Balloon.Delay = modBasic.$BalloonDelay
      cmbprocedure.SetFocus
    Endif
  Endif
  
End

Public Sub cmbstatus_KeyRelease()
  
  modFillContainer.AutoFillComboBox(cmbstatus)
  modFillContainer.RestrictComboToContent(cmbstatus)
  
End

Public Sub btnpayto_Click()
  
  Dim xMedUser As String[]
  
  xMedUser = MedicalSelectedValue(("Select Payable User"), modBasic.$PayUserList)
  If xMedUser And If xMedUser.Count Then
    btnpayto.Tag = xMedUser[0]
    btnpayto.Text = xMedUser[1]
  Else
    btnpayto.Tag = ""
    btnpayto.Text = ""
  Endif
  
End

Public Sub btnpayto_Change()
  
  If btnpayto.Text = "" Then
    btnpayto.Tag = ""
  Endif
  
End

Public Sub btnpayto_KeyRelease()
  
  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    If btnpayto.Tag Then
    Else
      btnpayto_Click()
    Endif
  Endif
  
End

''
Public Sub btnrefer_Click()
  
  Dim xMedUser As String[]
  
  xMedUser = MedicalSelectedValue(("Select Referral User"), modBasic.$ReferUserList)
  If xMedUser And If xMedUser.Count Then
    btnrefer.Tag = xMedUser[0]
    btnrefer.Text = xMedUser[1]
  Else
    btnrefer.Tag = ""
    btnrefer.Text = ""
  Endif
  
End

Public Sub btnrefer_Change()
  
  If btnrefer.Text = "" Then
    btnrefer.Tag = ""
  Endif
  
End

Public Sub btnrefer_KeyRelease()
  
  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    If btnrefer.Tag Then
    Else
      btnrefer_Click()
    Endif
  Endif
  
End

Private Function CheckBoxPath(sText As String) As String
  
  Dim xpath As String
  
  If sText = "Waiting" Then
    xpath = "icons/unchecked.png"
  Else If sText = "Cleared" Then
    xpath = "icons/checked.png"
  Endif
  Return xpath
  
End

Public Sub ShowAddedProctable()
  
  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result
  
  If modBasic.$LockToOwnProcedure = "Yes" Then
    sql = "select fldid,fldencounterval,fldnewdate,flditem,fldreportquali,flddetail,fldtime,fldid,fldstatus,fldgroupid from tblpatgeneral where fldencounterval=&1 and fldinput=&2 and fldcomp like &3 ORDER BY fldid DESC"
  Else
    sql = "select fldid,fldencounterval,fldnewdate,flditem,fldreportquali,flddetail,fldtime,fldid,fldstatus,fldgroupid from tblpatgeneral where fldencounterval=&1 and fldinput=&2 ORDER BY fldid DESC"
  Endif
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Procedures", modBasic.$compID)
  
  TableView1.Clear
  TableView1.Columns.Count = res.Fields.Count
  TableView1.Rows.Count = res.Count
  
  With TableView1
    .Rows.Height = 1.5 * modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 1
    .Columns[2].Width = 150 * modBasic.$AppWidthRatio
    .Columns[3].Width = 225 * modBasic.$AppWidthRatio
    .Columns[4].Width = 75 * modBasic.$AppWidthRatio
    .Columns[5].Width = 1
    .Columns[6].Width = 1
    .Columns[7].Width = 30 * modBasic.$AppWidthRatio
    .Columns[8].Width = 30 * modBasic.$AppWidthRatio
    .Columns[9].Width = 1
    
    .Columns[2].Text = "Target Date"
    .Columns[3].Text = "Procedure"
    .Columns[4].Text = "Status"
  End With
  
  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(TableView1, res.Index, Column)
      If Column = 2 Then
        TableView1[res.Index, Column].Text = modReportVar.GetDateTimeReport(res["fldnewdate"], gb.GeneralDate)
      Else If Column = 3 Then
        TableView1[res.Index, Column].Text = res[fld.Name]
        TableView1.Rows[res.Index].Height = Max(TableView1.Rows[res.Index].Height, TableView1[res.Index, Column].Font.RichTextHeight(TableView1[res.Index, Column].Text, TableView1.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (TableView1.Rows.Height - TableView1.Font.Height))
        TableView1[res.Index, Column].WordWrap = True
      Else If Column = 7 Then
        TableView1[res.Index, Column].Picture = Picture["icon:/small/html"]
        TableView1[res.Index, Column].Text = ""
      Else If Column = 8 Then
        TableView1[res.Index, Column].Picture = Picture[CheckBoxPath(res[fld.Name])]
        TableView1[res.Index, Column].Text = ""
      Else
        TableView1[res.Index, Column].Text = res[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  TableView1.Row = 0
  
  If TableView1.Rows.Selection.Count Then
    TableView1_Click()
  Endif
  
End

Public Sub TableView1_Click()
  
  Dim res As Result
  Dim res1 As Result
  Dim xPath As String
  Dim abc As String[] = ["General:Status", "General:Personnel", "General:Summary", "Pre-Operative:Indication", "Pre-Operative:Discussion", "Pre-Operative:Discussion Panel", "Pre-Operative:Examination", "Pre-Operative:Medications", "Pre-Operative:Note", "Procedure:Components", "Procedure:Parameters", "Procedure:Medications", "Procedure:Incision", "Procedure:Findings", "Procedure:Proedures", "Procedure:Closure", "Procedure:Note", "Anaesthesia:Technique", "Anaesthesia:Parameters", "Anaesthesia:Medications", "Anaesthesia:Medications", "Anaesthesia:Note", "Post-Operative:Indication", "Post-Operative:Examination", "Post-Operative:Medications", "Post-Operative:Note"]
  Dim xxx As String[]
  
  If TableView1.Column = 7 Then
    If TableView1.Rows.Selection.Count > 0 Then
      xxx = SelectListView("Select Procedure Components", abc, False)
      If xxx Then
        Inc Application.Busy
        xpath = modCHTMLPatient.ShowUniProcedureReport(TableView1[TableView1.Row, 0].Text, Trim(txtencid.Text), xxx)
        Dec Application.Busy
        modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
      Endif
    Endif
    
  Else
    $ProcIndex = 0
    $PositionList = New String[]
    Inc Application.Busy
    res = modDatabase.$myConn.Exec("select fldid,fldnewdate,flditem,fldreportquali,fldtime,fldsave,flddetail,fldbillingmode,fldstatus,fldgroupid from tblpatgeneral where fldid=&1", TableView1[TableView1.Row, 0].Text)
    If res.Available Then
      cmbstatus.Clear()
      If res!fldstatus = "Waiting" Then
        cmbstatus.List = ["Referred", "On Hold", "Cancelled", "Done"]
      Else
        cmbstatus.List = ["On Hold", "Done"]
      Endif
      
      $ProcIndex = res["fldid"]
      If res["fldgroupid"] Then
        $ProcBill = res["fldgroupid"]
      Endif
      cmbprocedure.Text = res["flditem"]
      cmbstatus.Text = res["fldreportquali"]
      dtplan.Value = res["fldnewdate"]
      txtcomment.RichText = res["flddetail"]
      txtbillmode.Text = res["fldbillingmode"]
      If $ProcIndex Then
        txtcomment.Enabled = True
        TabPanel2.Enabled = True
        TabPanel3.Enabled = True
        TabPanel4.Enabled = True
        TabPanel5.Enabled = True
        If cmbstatus.Text = "Done" Then
          btnaddperson.Enabled = False
        Else
          btnaddperson.Enabled = True
        Endif
      Endif
      
      res1 = modDatabase.$myConn.Exec("select fldpayto,fldrefer from tblpatbilling where fldencounterval=&1 and flditemtype=&2 and fldparent=&3", txtencid.Text, "Procedures", res!fldid)
      If res1.Available Then
        btnrefer.Tag = res1!fldrefer
        btnrefer.Text = modGeneral.GetUserFullName(btnrefer.Tag)
        btnpayto.Tag = res1!fldpayto
        btnpayto.Text = modGeneral.GetUserFullName(btnpayto.Tag)
      Endif
      
      $PositionList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldusertype) as col from tblprocedureshare where flditemtype=&1 and fldbillingmode like &2 and (flditemname like &3 or flditemname=&4) and fldactive=&5", "Procedures", txtbillmode.Text, res["flditem"], "%", "Active"))
      ShowSurgUser()
    Endif
    Dec Application.Busy
  Endif
  
End

Public Sub btnsubChange_Click()
  
  Dim res As Result
  
  If $ProcIndex Then
    If cmbstatus.Text Then
      
      Inc Application.Busy
      modDatabase.$myConn.Begin
      res = modDatabase.$myConn.Edit("tblpatgeneral", "fldid=&1 and fldsave=&2 and fldreportquali<>&3", $ProcIndex, False, "Done")
      If res.Available Then
        res["fldnewdate"] = dtplan.Value
        res["fldreportquali"] = cmbstatus.Text
        res["flduserid"] = modBasic.$lbluser
        res["flduptime"] = Now()
        res["fldcomp"] = modBasic.$compID
        res["xyz"] = False
        res.Update()
        Wait
        If cmbstatus.Text = "Done" Then
          btnaddperson.Enabled = False
          SaveProcedureBilling($ProcIndex)
        Endif
      Endif
      modDatabase.$myConn.Commit
      Dec Application.Busy
      ShowAddedProctable()
      Balloon.Info(("Information updated"), btnsubChange)
      Balloon.Delay = modBasic.$BalloonDelay
      
    Endif
  Endif
  
Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()
  
End

Private Sub SaveProcedureBilling(procIndex As Long)
  
  Dim res As Result
  Dim res1 As Result
  Dim xauto As String
  
  res = modDatabase.$myConn.Exec("select fldid,fldencounterval,fldnewdate,flditem,fldreportquali,fldtime from tblpatgeneral where fldid=&1 and fldencounterval=&2 and fldreportquali=&3 and fldinput=&4 and fldsave=&5 and fldstatus=&6", procIndex, Trim(txtencid.Text), "Done", "Procedures", False, "Waiting")
  If res.Available = True Then
    xauto = modBasic.$AutoBillProcedure
    If xauto = "Yes" Or If xauto = "Full" Then
      modBillings.GetAutoBillingEntry(res["fldencounterval"], $billModeProcedure, "Procedure", res["flditem"], 1, "Done", procIndex, True, False, btnpayto.Tag, btnrefer.Tag)                         ''
    Else If xauto = "Partial" Then
      modBillings.GetAutoBillingEntry(res["fldencounterval"], $billModeProcedure, "Procedure", res["flditem"], 1, "Punched", procIndex, False, False, btnpayto.Tag, btnrefer.Tag)
    Endif
    res1 = modDatabase.$myConn.Edit("tblpatgeneral", "fldid=&1", procIndex)
    res1["fldstatus"] = "Cleared"
    res1["fldsave"] = True
    res1["xyz"] = False
    res1.Update()
  Endif
  
End

Public Sub btncomment_Click()
  
  Dim res As Result
  
  If $ProcIndex Then
    res = modDatabase.$myConn.Edit("tblpatgeneral", "fldid=&1", $ProcIndex)
    res["flddetail"] = txtcomment.RichText
    res["xyz"] = False
    res.Update
    Balloon.Info(("Information updated"), btncomment)
    Balloon.Delay = modBasic.$BalloonDelay
  Endif
  
End

Public Sub mnunewproc_Click()
  
  Dim hForm As FmMajorProced
  
  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Procedure") = True Then
      hForm = New FmMajorProced(Trim(txtencid.Text), $billModeProcedure)
      hForm.ShowModal
      ShowAddedProctable()
    Endif
  Endif
  
End

Public Sub mnublank_Click()
  
  Me.Close
  Wait
  modWorkSpace.Add(fmProcedure)
  
End

Public Sub mnuhistory_Click()
  
  Dim res As Result
  Dim hForm As FRequest
  Dim xpatno As String
  
  If txtencid.Text Then
    xpatno = $PatientNum
    If modPatientSub.GetPatPassCheck(modDatabase.$myConn, xpatno) = True Then
      res = modDatabase.$myConn.Exec("select fldencounterval,fldregdate,fldadmission,fldcurrlocat,flduserid,flddisctype from tblencounter where fldpatientval=&1 ORDER BY fldregdate", xpatno)
      hForm = New FRequest(res, "Patient Encounters", "PatientEncounters", False)
      hForm.ShowModal
    Endif
  Endif
  
End

Public Sub btnaddcompo_Click()
  
  Dim hForm As FmAddVariableGrid
  
  hForm = New FmAddVariableGrid("flditem", "tblprocedure")
  hForm.ShowModal
  
End

Public Sub btncustonpoint_Click()
  
  Dim xx As String
  
  If txtencid.Text And If $ProcIndex Then
    xx = InputBox(("Enter Procedure Name"), ("Procedure"), "")
    If xx Then
      
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Components", xx, "Other")
      lstcomponent.List = modPatPatho.GetComponentProcedure(Trim(txtencid.Text), $ProcIndex)
      Balloon.Info(("Information saved"), btncustonpoint)
      Balloon.Delay = modBasic.$BalloonDelay
      
    Endif
  Endif
  
End

Public Sub bnlistpoint_Click()
  
  Dim xx As String
  Dim xlst As String[]
  
  If txtencid.Text And If $ProcIndex Then
    xlst = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select flditem as col from tblprocedure"))
    xx = InputListView(("Enter Procedure Name"), ("Procedure"), xlst)
    If xx Then
      
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Components", xx, "Other")
      lstcomponent.List = modPatPatho.GetComponentProcedure(Trim(txtencid.Text), $ProcIndex)
      Balloon.Info(("Information saved"), bnlistpoint)
      Balloon.Delay = modBasic.$BalloonDelay
      
    Endif
  Endif
  
End

Public Sub btnicdpoint_Click()
  
  Dim sName As String[]
  Dim sList As String[]
  
  sList = New String[]
  If txtencid.Text And If $ProcIndex Then
    sName = ICDTree(modDatabase.$icdConn, "Procedure", sList, sList, sList, "")
    If sName Then
      
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Components", sName[1], sName[0])
      lstcomponent.List = modPatPatho.GetComponentProcedure(Trim(txtencid.Text), $ProcIndex)
      Balloon.Info(("Information saved"), btnicdpoint)
      Balloon.Delay = modBasic.$BalloonDelay
      
    Endif
  Endif
  
End

Public Sub btndelcomponent_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If lstcomponent.Text Then
      If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
        modDatabase.$myConn.Delete("tblpatsubgeneral", "flditemid=&1 and fldencounterval=&2 and fldchapter=&3 and fldreportquali=&4", $ProcIndex, Trim(txtencid.Text), "Components", lstcomponent.Text)
        lstcomponent.List = modPatPatho.GetComponentProcedure(Trim(txtencid.Text), $ProcIndex)
        Balloon.Delete(("Information deleted"), btndelcomponent)
        Balloon.Delay = modBasic.$BalloonDelay
      Endif
    Endif
  Endif
  
End

Public Sub TableView1_Menu()
  
  If TableView1.Rows.Selection.Count > 0 Then
    mnudetpre.Popup
  Endif
  
End

Public Sub mnucustompr_Click()
  
  Dim hCls As CReportCustom
  
  If TableView1.Rows.Selection.Count > 0 Then
    If txtencid.Text Then
      If modSettings.ShowSettingFromFIle("Procedure Report/Name") Then
        hCls = New CReportCustom(Trim(txtencid.Text), "Procedure Report", "ReportSize", MMain.$defUnit, "Procedure|" & CStr(TableView1[TableView1.Row, 0].Text))
        hCls.Preview()
      Endif
    Endif
  Endif
  
End

''=================================== PRE OPERATIVE ================================
Public Sub btnpreindication_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If cmbpreindication.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Pre-Operative Indication", cmbpreindication.Text, "")
      Balloon.Info(("Information saved"), btnpreindication)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub grdprelist_Click()
  
  AddExamSelectionProc(Trim(txtencid.Text), grdprelist[grdprelist.Row, 0].Text, grdprelist[grdprelist.Row, 2].Text, grdprelist[grdprelist.Row, 1].Text, grdprelist[grdprelist.Row, 4].Text, "Pre-Operative Exam:" & CStr($ProcIndex))
  FillExamtable("Pre-Operative Exam:" & CStr($ProcIndex), grdprexam)
  
End

Public Sub grdprelist_KeyRelease()
  
  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    AddExamSelectionProc(Trim(txtencid.Text), grdprelist[grdprelist.Row, 0].Text, grdprelist[grdprelist.Row, 2].Text, grdprelist[grdprelist.Row, 1].Text, grdprelist[grdprelist.Row, 4].Text, "Pre-Operative Exam:" & CStr($ProcIndex))
    FillExamtable("Pre-Operative Exam:" & CStr($ProcIndex), grdprexam)
  Endif
  
End

Public Sub grdprexam_Click()
  
  Dim Row As Integer
  Dim xx As String
  Dim xopt As String
  Dim res As Result
  
  Row = grdprexam.Row
  If grdprexam.Column = 4 Then
    xopt = modGridView.GetGridColValFromColText(grdprelist, grdprexam[grdprexam.Row, 2].Text, 0, 4)
    If xopt = "Fixed Components" Then
      modExamOption.EnterDeptFixedComponents(Trim(txtencid.Text), "Pre-Operative", grdprexam[grdprexam.Row, 0].Text, grdprexam[grdprexam.Row, 2].Text, grdprexam[grdprexam.Row, 4].RichText)
    Else
      modExamOption.UpdateExamSelectionLabel(grdprexam[grdprexam.Row, 0].Text, grdprexam[grdprexam.Row, 7].Text, grdprexam[grdprexam.Row, 2].Text, grdprexam[grdprexam.Row, 1].Text, grdprexam[grdprexam.Row, 9].Text, grdprexam[grdprexam.Row, 8].Text, xopt)
    Endif
    FillExamtable("Pre-Operative Exam:" & CStr($ProcIndex), grdprexam)
    
  Else If grdprexam.Column = 3 Then
    xx = InputCombo("Select Flag for observation", "Change Flag", ["Normal", "Abnormal"], modMisc.GetIconValue(grdprexam[grdprexam.Row, 3].Picture), True)
    If xx Then
      modClinSub.UpdateExamFlag(grdprexam[grdprexam.Row, 0].Text, xx)
      FillExamtable("Pre-Operative Exam:" & CStr($ProcIndex), grdprexam)
    Endif
    
  Else If grdprexam.Column = 5 Then
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblpatientexam", "fldid=&1", grdprexam[grdprexam.Row, 0].Text)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        FillExamtable("Pre-Operative Exam:" & CStr($ProcIndex), grdprexam)
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
    
  Endif
  grdprexam.Row = Row
  
End

Public Sub btnprecomment_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If txtprecomment.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Pre-Operative Note", txtprecomment.KeyList.Join(";"), txtprecomment.RichText)
      Balloon.Info(("Information saved"), btnprecomment)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub btnprediscus_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If txtprediscuss.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Pre-Operative Discussion", txtprediscuss.KeyList.Join(";"), txtprediscuss.RichText)
      Balloon.Info(("Information saved"), btnprediscus)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub btnperson_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If cmbperson.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Discussion Panel", cmbperson.Text, "")
      lstdiscuss.List = modPatPatho.GetDiscusPanels(Trim(txtencid.Text), $ProcIndex)
      Balloon.Info(("Information saved"), btnperson)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub grdpreitem_Click()
  
  UpdateMedStatus(grdpreitem)
  FillDosingGrid("Current", "Pre-Operative", grdpreitem)
  
End

Public Sub btnorderpre_Click()
  
  OrderMedicine("Pre-Operative", grdpreitem)
  
End

Public Sub btndosepre_Click()
  
  ClickDose("Pre-Operative", grdpreitem)
  
End

Public Sub btninfusionpre_Click()
  
  ClickInfusion("Pre-Operative", grdpreitem)
  
End

Public Sub btnshowallpre_Click()
  
  ShowAllMed(btnshowallpre, "Pre-Operative", grdpreitem)
  
End

Public Sub btnmedexpopre_Click()
  
  modCHTMLReport.ExportGridToHTML(grdpreitem, "ITEMS USED: " & "Pre-Operative", modReportVar.GetDateTimeReport(Now(), gb.GeneralDate))
  
End

''====================================== On Operation ===================================
Public Sub btnsavesummry_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If txtsummry.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Operation Note", txtsummry.KeyList.Join(";"), txtsummry.RichText)
      Balloon.Info(("Information saved"), btnsavesummry)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub btnsaveonprocindi_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If cmbonindication.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Operative Indication", cmbonindication.Text, "")
      Balloon.Info(("Information saved"), btnsaveonprocindi)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub grdonlist_Click()
  
  AddExamSelectionProc(Trim(txtencid.Text), grdonlist[grdonlist.Row, 0].Text, grdonlist[grdonlist.Row, 2].Text, grdonlist[grdonlist.Row, 1].Text, grdonlist[grdonlist.Row, 4].Text, "Operative Exam:" & CStr($ProcIndex))
  FillExamtable("Operative Exam:" & CStr($ProcIndex), grdonproc)
  
End

Public Sub grdonlist_KeyRelease()
  
  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    AddExamSelectionProc(Trim(txtencid.Text), grdonlist[grdonlist.Row, 0].Text, grdonlist[grdonlist.Row, 2].Text, grdonlist[grdonlist.Row, 1].Text, grdonlist[grdonlist.Row, 4].Text, "Operative Exam:" & CStr($ProcIndex))
    FillExamtable("Operative Exam:" & CStr($ProcIndex), grdonproc)
  Endif
  
End

Public Sub grdonproc_Click()
  
  Dim Row As Integer
  Dim xx As String
  Dim xopt As String
  Dim res As Result
  
  Row = grdonproc.Row
  If grdonproc.Column = 4 Then
    xopt = modGridView.GetGridColValFromColText(grdonlist, grdonproc[grdonproc.Row, 2].Text, 0, 4)
    If xopt = "Fixed Components" Then
      modExamOption.EnterDeptFixedComponents(Trim(txtencid.Text), "Operative", grdonproc[grdonproc.Row, 0].Text, grdonproc[grdonproc.Row, 2].Text, grdonproc[grdonproc.Row, 4].RichText)
    Else
      modExamOption.UpdateExamSelectionLabel(grdonproc[grdonproc.Row, 0].Text, grdonproc[grdonproc.Row, 7].Text, grdonproc[grdonproc.Row, 2].Text, grdonproc[grdonproc.Row, 1].Text, grdonproc[grdonproc.Row, 9].Text, grdonproc[grdonproc.Row, 8].Text, xopt)
    Endif
    FillExamtable("Operative Exam:" & CStr($ProcIndex), grdonproc)
    
  Else If grdonproc.Column = 3 Then
    xx = InputCombo("Select Flag for observation", "Change Flag", ["Normal", "Abnormal"], modMisc.GetIconValue(grdonproc[grdonproc.Row, 3].Picture), True)
    If xx Then
      modClinSub.UpdateExamFlag(grdonproc[grdonproc.Row, 0].Text, xx)
      FillExamtable("Operative Exam:" & CStr($ProcIndex), grdonproc)
    Endif
    
  Else If grdonproc.Column = 5 Then
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblpatientexam", "fldid=&1", grdonproc[grdonproc.Row, 0].Text)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        FillExamtable("Operative Exam:" & CStr($ProcIndex), grdonproc)
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
    
  Endif
  grdonproc.Row = Row
  
End

Public Sub grdonpharmacy_Click()
  
  UpdateMedStatus(grdonpharmacy)
  FillDosingGrid("Current", "Procedure", grdonpharmacy)
  
End

Public Sub btnorderon_Click()
  
  OrderMedicine("Procedure", grdonpharmacy)
  
End

Public Sub btndoseon_Click()
  
  ClickDose("Procedure", grdonpharmacy)
  
End

Public Sub btninfusionoper_Click()
  
  ClickInfusion("Procedure", grdonpharmacy)
  
End

Public Sub btnshowallon_Click()
  
  ShowAllMed(btnshowallon, "Procedure", grdonpharmacy)
  
End

Public Sub btnmedexpoon_Click()
  
  modCHTMLReport.ExportGridToHTML(grdonpharmacy, "ITEMS USED: " & "Procedure", modReportVar.GetDateTimeReport(Now(), gb.GeneralDate))
  
End

''===================================== Anaesthesia ================================
Public Sub btnaddtechniq_Click()
  
  Dim hForm As FmAddVariableGrid
  
  hForm = New FmAddVariableGrid("flditem", "tblanaesthesia")
  hForm.ShowModal
  cmbtechniq.List = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select flditem as col from tblanaesthesia"))
  
End

Public Sub btnsavetechniq_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If cmbtechniq.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Anaesthesia Technique", cmbtechniq.Text, "")
      Balloon.Info(("Information saved"), btnsavetechniq)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub grdaneslist_Click()
  
  AddExamSelectionProc(Trim(txtencid.Text), grdaneslist[grdaneslist.Row, 0].Text, grdaneslist[grdaneslist.Row, 2].Text, grdaneslist[grdaneslist.Row, 1].Text, grdaneslist[grdaneslist.Row, 4].Text, "Anaesthesia:" & CStr($ProcIndex))
  FillExamtable("Anaesthesia:" & CStr($ProcIndex), grdanes)
  
End

Public Sub grdaneslist_KeyRelease()
  
  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    AddExamSelectionProc(Trim(txtencid.Text), grdaneslist[grdaneslist.Row, 0].Text, grdaneslist[grdaneslist.Row, 2].Text, grdaneslist[grdaneslist.Row, 1].Text, grdaneslist[grdaneslist.Row, 4].Text, "Anaesthesia:" & CStr($ProcIndex))
    FillExamtable("Anaesthesia:" & CStr($ProcIndex), grdanes)
  Endif
  
End

Public Sub grdanes_Click()
  
  Dim Row As Integer
  Dim xx As String
  Dim xopt As String
  Dim res As Result
  
  Row = grdanes.Row
  If grdanes.Column = 4 Then
    xopt = modGridView.GetGridColValFromColText(grdaneslist, grdanes[grdanes.Row, 2].Text, 0, 4)
    If xopt = "Fixed Components" Then
      modExamOption.EnterDeptFixedComponents(Trim(txtencid.Text), "Anaesthesia", grdanes[grdanes.Row, 0].Text, grdanes[grdanes.Row, 2].Text, grdanes[grdanes.Row, 4].RichText)
    Else
      modExamOption.UpdateExamSelectionLabel(grdanes[grdanes.Row, 0].Text, grdanes[grdanes.Row, 7].Text, grdanes[grdanes.Row, 2].Text, grdanes[grdanes.Row, 1].Text, grdanes[grdanes.Row, 9].Text, grdanes[grdanes.Row, 8].Text, xopt)
    Endif
    FillExamtable("Anaesthesia:" & CStr($ProcIndex), grdanes)
    
  Else If grdanes.Column = 3 Then
    xx = InputCombo("Select Flag for observation", "Change Flag", ["Normal", "Abnormal"], modMisc.GetIconValue(grdanes[grdanes.Row, 3].Picture), True)
    If xx Then
      modClinSub.UpdateExamFlag(grdanes[grdanes.Row, 0].Text, xx)
      FillExamtable("Anaesthesia:" & CStr($ProcIndex), grdanes)
    Endif
    
  Else If grdanes.Column = 5 Then
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblpatientexam", "fldid=&1", grdanes[grdanes.Row, 0].Text)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        FillExamtable("Anaesthesia:" & CStr($ProcIndex), grdanes)
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
    
  Endif
  grdanes.Row = Row
  
End

Public Sub btnanesnote_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If txtanesnote.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Anaesthesia Note", txtanesnote.KeyList.Join(";"), txtanesnote.RichText)
      Balloon.Info(("Information saved"), btnanesnote)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub grdanesitem_Click()
  
  UpdateMedStatus(grdanesitem)
  FillDosingGrid("Current", "Anaesthesia", grdanesitem)
  
End

Public Sub btnorderanes_Click()
  
  OrderMedicine("Anaesthesia", grdanesitem)
  
End

Public Sub btndoseanes_Click()
  
  ClickDose("Anaesthesia", grdanesitem)
  
End

Public Sub btninfusionanes_Click()
  
  ClickInfusion("Anaesthesia", grdanesitem)
  
End

Public Sub btnshowallanes_Click()
  
  ShowAllMed(btnshowallanes, "Anaesthesia", grdanesitem)
  
End

Public Sub btnmedexpoanes_Click()
  
  modCHTMLReport.ExportGridToHTML(grdanesitem, "ITEMS USED: " & "Anaesthesia", modReportVar.GetDateTimeReport(Now(), gb.GeneralDate))
  
End

''==========================================Post Operative ==================================
Public Sub btnpostindication_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If cmbpostindication.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Post-Operative Indication", cmbpostindication.Text, "")
      Balloon.Info(("Information saved"), btnpostindication)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub grdpostlist_Click()
  
  AddExamSelectionProc(Trim(txtencid.Text), grdpostlist[grdpostlist.Row, 0].Text, grdpostlist[grdpostlist.Row, 2].Text, grdpostlist[grdpostlist.Row, 1].Text, grdpostlist[grdpostlist.Row, 4].Text, "Post-Operative Exam:" & CStr($ProcIndex))
  FillExamtable("Post-Operative Exam:" & CStr($ProcIndex), grdpostexam)
  
End

Public Sub grdpostlist_KeyRelease()
  
  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    AddExamSelectionProc(Trim(txtencid.Text), grdpostlist[grdpostlist.Row, 0].Text, grdpostlist[grdpostlist.Row, 2].Text, grdpostlist[grdpostlist.Row, 1].Text, grdpostlist[grdpostlist.Row, 4].Text, "Post-Operative Exam:" & CStr($ProcIndex))
    FillExamtable("Post-Operative Exam:" & CStr($ProcIndex), grdpostexam)
  Endif
  
End

Public Sub grdpostexam_Click()
  
  Dim Row As Integer
  Dim xx As String
  Dim xopt As String
  Dim res As Result
  
  Row = grdpostexam.Row
  If grdpostexam.Column = 4 Then
    xopt = modGridView.GetGridColValFromColText(grdpostlist, grdpostexam[grdpostexam.Row, 2].Text, 0, 4)
    If xopt = "Fixed Components" Then
      modExamOption.EnterDeptFixedComponents(Trim(txtencid.Text), "Post-Operative", grdpostexam[grdpostexam.Row, 0].Text, grdpostexam[grdpostexam.Row, 2].Text, grdpostexam[grdpostexam.Row, 4].RichText)
    Else
      modExamOption.UpdateExamSelectionLabel(grdpostexam[grdpostexam.Row, 0].Text, grdpostexam[grdpostexam.Row, 7].Text, grdpostexam[grdpostexam.Row, 2].Text, grdpostexam[grdpostexam.Row, 1].Text, grdpostexam[grdpostexam.Row, 9].Text, grdpostexam[grdpostexam.Row, 8].Text, xopt)
    Endif
    FillExamtable("Post-Operative Exam:" & CStr($ProcIndex), grdpostexam)
    
  Else If grdpostexam.Column = 3 Then
    xx = InputCombo("Select Flag for observation", "Change Flag", ["Normal", "Abnormal"], modMisc.GetIconValue(grdpostexam[grdpostexam.Row, 3].Picture), True)
    If xx Then
      modClinSub.UpdateExamFlag(grdpostexam[grdpostexam.Row, 0].Text, xx)
      FillExamtable("Post-Operative Exam:" & CStr($ProcIndex), grdpostexam)
    Endif
    
  Else If grdpostexam.Column = 5 Then
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblpatientexam", "fldid=&1", grdpostexam[grdpostexam.Row, 0].Text)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        FillExamtable("Post-Operative Exam:" & CStr($ProcIndex), grdpostexam)
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
    
  Endif
  grdpostexam.Row = Row
  
End

Public Sub btnpostcomment_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If txtpostcomment.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Post-Operative Note", txtpostcomment.KeyList.Join(";"), txtpostcomment.RichText)
      Balloon.Info(("Information saved"), btnpostcomment)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub grdpostitem_Click()
  
  UpdateMedStatus(grdpostitem)
  FillDosingGrid("Current", "Post-Operative", grdpostitem)
  
End

Public Sub btnorderpost_Click()
  
  OrderMedicine("Post-Operative", grdpostitem)
  
End

Public Sub btndosepost_Click()
  
  ClickDose("Post-Operative", grdpostitem)
  
End

Public Sub btninfusionpost_Click()
  
  ClickInfusion("Post-Operative", grdpostitem)
  
End

Public Sub btnshowallpost_Click()
  
  ShowAllMed(btnshowallpost, "Post-Operative", grdpostitem)
  
End

Public Sub btnmedexpopost_Click()
  
  modCHTMLReport.ExportGridToHTML(grdpostitem, "ITEMS USED: " & "Post-Operative", modReportVar.GetDateTimeReport(Now(), gb.GeneralDate))
  
End

''============================= Professional involved ====================================
Public Sub cmbpertype_KeyRelease()
  
  modFillContainer.AutoFillComboBox(cmbpertype)
  modFillContainer.RestrictComboToContent(cmbpertype)
  
End

Public Sub cmbpertype_Click()
  
  Dim xval As String
  
  If cmbpertype.Text Then
    xval = GetDefaultUser(cmbpertype.Text)
    If xval Then
      btnconsult.Tag = xval
      btnconsult.Text = modGeneral.GetUserFullName(btnconsult.Tag)
      btnconsult.Enabled = False
    Endif
  Endif
  
End

Private Function GetDefaultUser(xUserType As String) As String
  
  Dim res As Result
  Dim xval As String
  
  If $ProcBill Then
    res = modDatabase.$myConn.Exec("select flddefault from tblprocedureshare where flditemtype=&1 and fldbillingmode like &2 and (flditemname like &3 or flditemname=&4) and fldactive=&5 and fldusertype=&6", "Procedures", txtbillmode.Text, TableView1[TableView1.Row, 3].Text, "%", "Active", xUserType)
    If res.Available Then
      res.MoveFirst
      If res["flddefault"] Then
        xval = res["flddefault"]
      Else
        xval = ""
      Endif
    Else
      xval = ""
    Endif
  Endif
  Return xval
  
End

Public Sub btnconsult_Click()
  
  Dim xMedUser As String[]
  
  If modBasic.$PayableUserFormat = "Restricted" Then
    xMedUser = MedicalSelectedValue(("Select Sharing User"), modGeneral.CategoricalUserList("fldpayable", cmbpertype.Text))
  Else
    xMedUser = MedicalSelectedValue(("Select Sharing User"), modGeneral.CategoricalUserList("fldpayable"))
  Endif
  If xMedUser And If xMedUser.Count Then
    btnconsult.Tag = xMedUser[0]
    btnconsult.Text = xMedUser[1]
  Else
    btnconsult.Tag = ""
    btnconsult.Text = ""
  Endif
  
End

Public Sub btnaddperson_Click()
  
  If $ProcBill Then
    If cmbpertype.Text And If btnconsult.Tag Then
      If Not btnpayto.Tag Then
        modPatientGeneral.AddClinicalSharingUser("Procedures", $ProcBill, Trim(txtencid.Text), cmbpertype.Text, btnconsult.Tag, "", $sLevel, 100)
        ' ' modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), cmbpertype.Text, btnconsult.Tag, "")
        ShowSurgUser()
        cmbpertype.Text = ""
        btnconsult.Tag = ""
        btnconsult.Text = ""
        btnconsult.Enabled = True
        cmbpertype.SetFocus
      Endif
    Endif
  Else
    Message.Warning("User Sharing can be added only after Billing", ("OK"))
  Endif
  
End

Private Sub ShowSurgUser()
  
  Dim Column As Integer
  Dim fld As ResultField
  Dim $sData3 As Result
  Dim posList As String[]
  
  $sData3 = modDatabase.$myConn.Exec("select fldid,fldtime,fldusertype,fldvalue,fldreport from tblpatgenshare where flditemid=&1 and fldcategory=&2 and fldactive=&3", $ProcBill, "Procedures", $sLevel)
  
  grdperson.Clear
  grdperson.Columns.Count = $sData3.Fields.Count
  grdperson.Rows.Count = $sData3.Count
  
  posList = New String[]
  For Each $sData3
    posList.Add($sData3["fldusertype"])
    Column = 0
    For Each fld In $sData3.Fields
      modGeneralMain.GridExplicitDecoration(grdperson, $sData3.Index, Column)
      If Column = 3 Then
        grdperson[$sData3.Index, Column].Text = modGeneral.GetUserFullName($sData3[fld.Name])
      Else
        grdperson[$sData3.Index, Column].Text = $sData3[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  grdperson.Row = 0
  cmbpertype.List = modString.GetRemainingArray($PositionList, posList)
  
  With grdperson
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 1
    .Columns[2].Width = 100 * modBasic.$AppWidthRatio
    .Columns[3].Width = 175 * modBasic.$AppWidthRatio
    .Columns[4].Width = 250 * modBasic.$AppWidthRatio
    
    .Columns[2].Text = "Category"
    .Columns[3].Text = "User Name"
    .Columns[4].Text = "Description"
  End With
  
End

Public Sub grdperson_Click()
  
  Dim res As Result
  Dim xx As String
  
  If grdperson.Column = 4 Then
    xx = GetTextArea(grdperson[grdperson.Row, 0].Text, grdperson[grdperson.Row, 4].Text)
    If xx Then
      res = modDatabase.$myConn.Edit("tblpatgenshare", "fldid=&1 and fldsave=&2", grdperson[grdperson.Row, 0].Text, True)
      res["fldreport"] = xx
      res["flduptime"] = Now()
      res["xyz"] = False
      res.Update
      ShowSurgUser()
    Endif
  Endif
  
End

Public Sub grdperson_Menu()
  
  mnudelperson.Popup()
  
End

Public Sub mnudelsurguser_Click()
  
  If grdperson.Rows.Selection.Count Then
    If cmbstatus.Text <> "Done" Then
      modDatabase.$myConn.Delete("tblpatgenshare", "fldid=&1 and fldsave=&2", grdperson[grdperson.Row, 0].Text, True)
      ShowSurgUser()
    Endif
  Endif
  
End

''================================ Other Items ====================================
Private Sub ShowCurrStockGrid()
  
  If rbmed.Value = True Then
    $rData = modDatabase.$syConn.Exec("select fldbrandid,fldbrand,fldbrandid,fldbrandid as qty from tblmedbrand where lower(fldbrandid) like &1 and fldbrandid in(select fldstockid from tblentry where fldqty>&2 and fldcomp like &3) order by fldbrandid ASC", LCase(txtname.Text) & "%", 0, modBasic.$compID)                                   ''
  Else If rbsurg.Value = True Then
    $rData = modDatabase.$syConn.Exec("select fldbrandid,fldbrand,fldbrandid,fldbrandid as qty from tblsurgbrand where lower(fldbrandid) like &1 and fldbrandid in(select fldstockid from tblentry where fldqty>&2 and fldcomp like &3) order by fldbrandid ASC", LCase(txtname.Text) & "%", 0, modBasic.$compID)
  Else If rbextra.Value = True Then
    $rData = modDatabase.$syConn.Exec("select fldbrandid,fldbrand,fldbrandid,fldbrandid as qty from tblextrabrand where lower(fldbrandid) like &1 and fldbrandid in(select fldstockid from tblentry where fldqty>&2 and fldcomp like &3) order by fldbrandid ASC", LCase(txtname.Text) & "%", 0, modBasic.$compID)
  Endif
  
  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView3, $rData, $aMyFields)
  
  If Not $AlphaList.Count Then
    For Each $rData
      If $AlphaList.Count = 0 Then
        $AlphaList.Add(UCase(Left($rData["fldbrandid"], 1)))
      Else
        If $AlphaList.Exist(UCase(Left($rData["fldbrandid"], 1))) = False Then
          $AlphaList.Add(UCase(Left($rData["fldbrandid"], 1)))
        Endif
      Endif
    Next
    lstletter.List = $AlphaList
  Endif
  
  With GridView3
    .Columns[0].Width = 250 * modBasic.$AppWidthRatio
    .Columns[1].Width = 1
    .Columns[2].Width = 1
    .Columns[3].Width = 50 * modBasic.$AppWidthRatio
    .Columns[0].Text = "Particulars"
    .Columns[3].Text = "QTY"
  End With
  
End

Public Sub GridView3_Data(Row As Integer, Column As Integer)
  
  $rData.MoveTo(Row)
  modGeneralMain.GridViewDecoration(GridView3, Row)
  If Column = 3 Then
    GridView3.Data.Text = modStock.TotalQTYbyBrand($rData["qty"], modBasic.$compID)
  Else
    GridView3.Data.Text = $rData[$aMyFields[Column]]
  Endif
  GridView3.Rows[Row].Height = Max(GridView3.Rows[Row].Height, GridView3.Data.Font.RichTextHeight(GridView3.Data.Text, GridView3.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView3.Rows.Height - GridView3.Font.Height))
  GridView3.Data.WordWrap = True
  
End

Public Sub rbmed_Click()
  
  $AlphaList.Clear()
  txtname.Text = ""
  ShowCurrStockGrid()
  txtname.SetFocus
  
End

Public Sub rbsurg_Click()
  
  $AlphaList.Clear()
  txtname.Text = ""
  ShowCurrStockGrid()
  txtname.SetFocus
  
End

Public Sub rbextra_Click()
  
  $AlphaList.Clear()
  txtname.Text = ""
  ShowCurrStockGrid()
  txtname.SetFocus
  
End

Public Sub txtname_Change()
  
  ShowCurrStockGrid()
  
End

Public Sub txtname_Click()
  
  txtname.Text = ""
  ShowCurrStockGrid()
  
End

Public Sub lstletter_Click()
  
  txtname.Text = lstletter.Text
  
End

Public Sub GridView3_Click()
  
  Dim xval As Float
  Dim sType As String
  
  If GridView3.Rows.Selection.Count Then
    Panel4.Enabled = False
    If rbmed.Value = True Then
      sType = "Medicines"
    Else If rbsurg.Value = True Then
      sType = "Surgicals"
    Else If rbextra.Value = True Then
      sType = "Extra Items"
    Endif
    xval = InputValue("QUANTITY OF <b>" & GridView3[GridView3.Row, 0].Text & "</b>", "Use Record", 0)
    Panel4.Enabled = True
    If xval Then
      EntryUseOwndata(sType, GridView3[GridView3.Row, 0].Text, xval)
      ShowUsedGridViewList()
    Endif
  Endif
  
End

Private Sub EntryUseOwndata(sType As String, sItem As String, sQty As Float)
  
  Dim xroute As String
  Dim xtax As Float
  Dim xdisc As Float
  Dim xdose As Float
  Dim xfixrate As Float
  Dim xfixname As String
  ' Dim xvarfix As Variant[]
  Dim itemmode As String
  Dim CPharmFix As CFixRatePharmacy
  
  CPharmFix = New CFixRatePharmacy(sType, sItem, $PharmMode)
  xfixrate = CPharmFix.GetFixRate()
  xfixname = CPharmFix.GetFixItem()
  If xfixname Then
    itemmode = txtbillmode.Text
  Else
    itemmode = "%"
  Endif
  ' xvarfix = modStock.GetSellingPriceFixByStockID(sType, sItem, $PharmMode)
  ' If xvarfix Then
  '   xfixrate = xvarfix[1]
  '   xfixname = xvarfix[0]
  '   itemmode = txtbillmode.Text
  ' Else
  '   xfixrate = 0
  '   xfixname = ""
  '   itemmode = "%"
  ' Endif
  xtax = modNonMedical.ShowTaxValues(sType, sItem)
  xdisc = modNonMedical.DiscPercentForCategoryValue(Trim(txtencid.Text), $billModePharmacy, sType, sItem, itemmode)
  xroute = modMedicine.GetRouteFromItem(sItem, sType)
  
  If sType = "Medicines" Then
    xdose = sQty * modPharmLabel.GetPackVolValue(sItem) * modMedConstant.GetDrugInitialStrength(sItem)
    modPharmSub.InsertDosingEntry(Trim(txtencid.Text), $xBillType, $PharmMode, $billModePharmacy, $LedgerAC, xroute, sItem, xdose, "stat", 1, sQty, $sTatus, "", "", 0, xtax, xdisc, xfixname, xfixrate, "UseOwn", "Procedure", "", 0)
  Else
    modPharmSub.InsertNonMedDosingEntry(sType, Trim(txtencid.Text), $xBillType, $PharmMode, $billModePharmacy, $LedgerAC, xroute, sItem, sQty, $sTatus, 0, xtax, xdisc, xfixname, xfixrate, "UseOwn", "Procedure", "", 0)
  Endif
  
End

Private Sub ShowUsedGridViewList()
  
  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result
  
  sql = "select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,fldqtydisp,flduserid_order,fldid,fldid,fldstarttime from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstatus=&3 and fldorder=&4 and fldcurval=&5"                                                   ''
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), False, $sTatus, "UseOwn", "Continue")
  
  GridView4.Clear
  GridView4.Columns.Count = res.Fields.Count
  GridView4.Rows.Count = res.Count
  
  With GridView4
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 1
    .Columns[2].Width = 1
    .Columns[3].Width = 375 * modBasic.$AppWidthRatio
    .Columns[4].Width = 1
    .Columns[5].Width = 1
    .Columns[6].Width = 1
    .Columns[7].Width = 50 * modBasic.$AppWidthRatio
    .Columns[8].Width = 1
    .Columns[9].Width = 35 * modBasic.$AppWidthRatio
    .Columns[10].Width = 35 * modBasic.$AppWidthRatio
    .Columns[11].Width = 1
    
    .Columns[3].Text = "Particulars"
    .Columns[7].Text = "QTY"
  End With
  
  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(GridView4, res.Index, Column)
      If Column = 1 Then
        GridView4[res.Index, Column].Text = modReportVar.GetDateTimeReport(res["fldstarttime"], gb.GeneralDate)
      Else If Column = 9 Then
        GridView4[res.Index, Column].Picture = Picture["icon:/small/cancel"]
        GridView4[res.Index, Column].Text = ""
      Else If Column = 10 Then
        GridView4[res.Index, Column].Picture = Picture["icon:/small/apply"]
        GridView4[res.Index, Column].Text = ""
      Else
        GridView4[res.Index, Column].Text = res[fld.Name]
      Endif
      GridView4.Rows[res.Index].Height = Max(GridView4.Rows[res.Index].Height, GridView4[res.Index, Column].Font.RichTextHeight(GridView4[res.Index, Column].Text, GridView4.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView4.Rows.Height - GridView4.Font.Height))
      GridView4[res.Index, Column].WordWrap = True
      
      Column = Column + 1
    Next
  Next
  GridView4.Row = 0
  
End

Public Sub GridView4_Click()
  
  Dim xval As Float
  Dim Column As Integer
  Dim Row As Integer
  Dim res As Result
  
  Row = GridView4.Row
  Column = GridView4.Column
  If GridView4.Column = 7 Then
    xval = InputValue(GridView4[GridView4.Row, 3].Text, ("Change Value"), GridView4[GridView4.Row, 7].Text)
    modPharmSub.UpdateQTYBefDispensing(GridView4[GridView4.Row, 0].Text, xval)
    ShowUsedGridViewList()
    
  Else If GridView4.Column = 9 Then
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1 and fldsave_order=&2", GridView4[GridView4.Row, 0].Text, False)
      If modGeneral.AllowClinicalEdit(res["flduserid_order"]) = True Then
        modDatabase.$myConn.Delete("tblpatdosing", "fldid=&1 and fldsave_order=&2", GridView4[GridView4.Row, 0].Text, False)
      Else
        res["fldcurval"] = "Cancelled"
        res["flduserid_order"] = modBasic.$lbluser
        res["xyz"] = False
        res.Update
      Endif
      ShowUsedGridViewList()
    Endif
    
  Else If GridView4.Column = 10 Then
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      SaveOwnDispensing(GridView4[GridView4.Row, 0].Text)
      ShowUsedGridViewList()
      ShowCurrStockGrid()
    Endif
    
  Endif
  GridView4.Row = Row
  GridView4.Column = Column
  
End

Private Sub SaveOwnDispensing(sID As Long)
  
  Dim sql1 As String
  Dim res1 As Result
  Dim res2 As Result
  Dim sql2 As String
  
  Dim tax As Float
  Dim disc As Float
  Dim xrate As Float
  Dim xitem As String
  
  Dim qtynew As Float
  Dim xcateg As String
  Dim xdose As Float
  Dim xunit As String
  Dim xerr As String
  
  Dim xrefer As String
  Dim xpayble As String
  Dim xallow As Boolean
  Dim xCshCrd As Float
  
  xrefer = modBillings.GetReferralUserSetting("Pharmacy", Trim(txtencid.Text))
  xpayble = modBillings.GetPayableUserSetting("Pharmacy", Trim(txtencid.Text))
  
  xerr = ""
  sql1 = "select fldid,fldtime,fldroute,flditem,flddose,fldfreq,flddays,fldqtydisp,fldlabel,flditemtype,fldfixname,fldfixrate,fldtaxper,flddiscper,fldbillingmode,flddisctype,fldacledger,fldbilltype,fldcashincredit from tblpatdosing where fldid=&1"                                                   ''
  res1 = modDatabase.$myConn.Exec(sql1, sID)
  If res1.Available = True Then
    
    'get tax and discount percentages
    xcateg = res1["flditemtype"]
    If res1["fldtaxper"] Then
      tax = res1["fldtaxper"]
    Else
      tax = 0
    Endif
    If res1["flddiscper"] Then
      disc = res1["flddiscper"]
    Else
      disc = 0
    Endif
    If res1["fldcashincredit"] Then
      xCshCrd = res1["fldcashincredit"]
    Else
      xCshCrd = 0
    Endif
    
    If res1["fldfixrate"] Then
      xrate = res1["fldfixrate"]
    Else
      xrate = modStock.GetCurrentSellingPrice(res1["flditem"], modBasic.$compID)
    Endif
    xallow = modNonMedical.AllowPharmProceedPreBill(Trim(txtencid.Text), $billModePharmacy, res1["fldqtydisp"], xrate, res1["flddiscper"], res1["fldbilltype"], xCshCrd, res1["fldroute"], res1["flditem"])
    If xallow = True Then
      
      Inc Application.Busy
      qtynew = res1["fldqtydisp"]
      
      modDatabase.$myConn.Begin
      While qtynew > 0
        'get stockno, rate and quantity based on expiry check
        sql2 = "select fldstockno,fldqty from tblentry where fldstockid=&1 and fldcomp=&2 and fldstatus=&3 and fldqty>&4"
        res2 = modDatabase.$myConn.Exec(sql2, res1["flditem"], modBasic.$compID, 1, 0)
        If res2.Available Then
          res2.MoveFirst
          
          xitem = res1["flditem"]
          If res1["fldfixname"] Then
            xitem = res1["fldfixname"]
            If res1["fldfixrate"] Then
              xrate = res1["fldfixrate"]
            Else
              xrate = 0
            Endif
          Else
            xrate = modStock.GetSellingPriceByStockNo(res2["fldstockno"], txtbillmode.Text)
          Endif
          
          If qtynew <= res2["fldqty"] Then
            If modBasic.$AutoBillUseOwn = "Enable" Then
              modBillings.InsertBlankBillItemNewApp(Trim(txtencid.Text), res1["fldbilltype"], res1["fldbillingmode"], res1["flddisctype"], res1["fldacledger"], res1["flditemtype"], res2["fldstockno"], xitem, xrate, qtynew, tax, disc, xCshCrd, "Done", res1["fldid"], True, False, "", xpayble, xrefer)
            Endif
            modStockSub.AddToExistEntry(res2["fldstockno"], (0 - qtynew), modBasic.$compID)
            qtynew = 0
          Else If qtynew > res2["fldqty"] Then
            If modBasic.$AutoBillUseOwn = "Enable" Then
              modBillings.InsertBlankBillItemNewApp(Trim(txtencid.Text), res1["fldbilltype"], res1["fldbillingmode"], res1["flddisctype"], res1["fldacledger"], res1["flditemtype"], res2["fldstockno"], xitem, xrate, res2["fldqty"], tax, disc, xCshCrd, "Done", res1["fldid"], True, False, "", xpayble, xrefer)
            Endif
            modStockSub.AddToExistEntry(res2["fldstockno"], (0 - res2["fldqty"]), modBasic.$compID)
            qtynew = qtynew - res2["fldqty"]
          Endif
          Wait
        Else
          Break
        Endif
      Wend
      
      If qtynew > 0 Then
        modPharmSub.DuplicateRecordWithQTY(res1["fldid"], qtynew)
        modPharmSub.UpdateQTYBefDispensing(res1["fldid"], res1["fldqtydisp"] - qtynew)
      Endif
      modPharmSub.UpdateDispensing(res1["fldid"], True, True)
      modDatabase.$myConn.Commit
      
      If modNonMedical.GetBillItemCategoryFromCombo(res1["fldroute"]) = "Medicines" Then
        xdose = Round(res1["flddose"] / modMedConstant.GetDrugInitialStrength(res1["flditem"]), -2)
        xunit = modPharmLabel.GetDosageFormForLabel(res1["flditem"], "Inpatient")
        modPharmSub.InsertNurDosing(res1["fldid"], Trim(txtencid.Text), xdose, xunit, "")
      Endif
      Dec Application.Busy
      
    Else
      xerr = xerr & res1["fldfixname"] & gb.NewLine
    Endif
  Endif
  If xerr Then
    Balloon.Warning("<b>Over Set Discount/Credit Limit:</b>" & gb.NewLine & xerr, GridView4)
  Endif
  
Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()
  
End

''=========================== General ==================================
Public Sub btnnewsummry_Click()
  
  txtcomment.RichText = txtcomment.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))
  
End

Public Sub btnhelppredisc_Click()
  
  txtprediscuss.RichText = txtprediscuss.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))
  
End

Public Sub btnhelppre_Click()
  
  txtprecomment.RichText = txtprecomment.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))
  
End

Public Sub btnhelponproc_Click()
  
  txtsummry.RichText = txtsummry.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))
  
End

Public Sub btnhelpanes_Click()
  
  txtanesnote.RichText = txtanesnote.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))
  
End

Public Sub btnhelppost_Click()
  
  txtpostcomment.RichText = txtpostcomment.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))
  
End

Public Sub dctnewsummry_Click()
  
  Dim xx As String
  
  xx = GetRichTextArea("Summary of Procedure", txtcomment.RichText)
  If xx Then
    txtcomment.RichText = xx
  Endif
  
End

Public Sub btntemplnewsummary_Click()
  
  txtcomment.RichText = txtcomment.RichText & DictionaryVIew(modBasic.$dictadvPath)
  
End

Public Sub dcthelppredisc_Click()
  
  Dim xx As String
  
  xx = GetRichTextArea("Pre-Operative Discussion", txtprediscuss.RichText)
  If xx Then
    txtprediscuss.RichText = xx
  Endif
  
End

Public Sub btntemplpredisc_Click()
  
  txtprediscuss.RichText = txtprediscuss.RichText & DictionaryVIew(modBasic.$dictadvPath)
  
End

Public Sub dcthelppre_Click()
  
  Dim xx As String
  
  xx = GetRichTextArea("Pre-Operative Note", txtprecomment.RichText)
  If xx Then
    txtprecomment.RichText = xx
  Endif
  
End

Public Sub btntemplpre_Click()
  
  txtprecomment.RichText = txtprecomment.RichText & DictionaryVIew(modBasic.$dictadvPath)
  
End

Public Sub dcthelponproc_Click()
  
  Dim xx As String
  
  xx = GetRichTextArea("Operation Note", txtsummry.RichText)
  If xx Then
    txtsummry.RichText = xx
  Endif
  
End

Public Sub btntemplonproc_Click()
  
  txtsummry.RichText = txtsummry.RichText & DictionaryVIew(modBasic.$dictadvPath)
  
End

Public Sub dcthelpanes_Click()
  
  Dim xx As String
  
  xx = GetRichTextArea("Anaesthesia Note", txtanesnote.RichText)
  If xx Then
    txtanesnote.RichText = xx
  Endif
  
End

Public Sub btntemplanes_Click()
  
  txtanesnote.RichText = txtanesnote.RichText & DictionaryVIew(modBasic.$dictadvPath)
  
End

Public Sub dcthelppost_Click()
  
  Dim xx As String
  
  xx = GetRichTextArea("Post-Operative Discussion", txtpostcomment.RichText)
  If xx Then
    txtpostcomment.RichText = xx
  Endif
  
End

Public Sub btntemplpost_Click()
  
  txtpostcomment.RichText = txtpostcomment.RichText & DictionaryVIew(modBasic.$dictadvPath)
  
End

''============== Structured Operation Note ======================
Public Sub dcthelpincis_Click()
  
  Dim xx As String
  
  xx = GetRichTextArea("Explain Incision", txtincision.RichText)
  If xx Then
    txtincision.RichText = xx
  Endif
  
End

Public Sub btnhelpincis_Click()
  
  txtincision.RichText = txtincision.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))
  
End

Public Sub btnlstincis_Click()
  
  txtincision.RichText = txtincision.RichText & DictionaryVIew(modBasic.$dictadvPath)
  
End

Public Sub dcthelpfind_Click()
  
  Dim xx As String
  
  xx = GetRichTextArea("Explain Findings", txtfindings.RichText)
  If xx Then
    txtfindings.RichText = xx
  Endif
  
End

Public Sub btnhelpfind_Click()
  
  txtfindings.RichText = txtfindings.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))
  
End

Public Sub btnlstfind_Click()
  
  txtfindings.RichText = txtfindings.RichText & DictionaryVIew(modBasic.$dictadvPath)
  
End

Public Sub dcthelpproc_Click()
  
  Dim xx As String
  
  xx = GetRichTextArea("Explain Procedure", txtprocedures.RichText)
  If xx Then
    txtprocedures.RichText = xx
  Endif
  
End

Public Sub btnhelpproc_Click()
  
  txtprocedures.RichText = txtprocedures.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))
  
End

Public Sub btnlstproc_Click()
  
  txtprocedures.RichText = txtprocedures.RichText & DictionaryVIew(modBasic.$dictadvPath)
  
End

Public Sub dcthelpclose_Click()
  
  Dim xx As String
  
  xx = GetRichTextArea("Explain Closure", txtclosure.RichText)
  If xx Then
    txtclosure.RichText = xx
  Endif
  
End

Public Sub btnhelpclos_Click()
  
  txtclosure.RichText = txtclosure.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))
  
End

Public Sub btnlstclose_Click()
  
  txtclosure.RichText = txtclosure.RichText & DictionaryVIew(modBasic.$dictadvPath)
  
End

Public Sub btnsaveincision_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If txtincision.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Incision", txtincision.KeyList.Join(";"), txtincision.RichText)
      Balloon.Info(("Information saved"), btnsaveincision)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub btnsavefinding_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If txtfindings.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Findings", txtfindings.KeyList.Join(";"), txtfindings.RichText)
      Balloon.Info(("Information saved"), btnsavefinding)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub btnsaveprocedure_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If txtprocedures.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Proedures", txtprocedures.KeyList.Join(";"), txtprocedures.RichText)
      Balloon.Info(("Information saved"), btnsaveprocedure)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

Public Sub btnsaveclosure_Click()
  
  If txtencid.Text And If $ProcIndex Then
    If txtclosure.Text Then
      modPatientGeneral.AddSubGeneralQualiData($ProcIndex, Trim(txtencid.Text), "Closure", txtclosure.KeyList.Join(";"), txtclosure.RichText)
      Balloon.Info(("Information saved"), btnsaveclosure)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif
  
End

''============================= Examination Menu ======================================
Public Sub mnumonitor_Click()
  
  Dim hForm As FmReqVital
  
  If txtencid.Text Then
    hForm = New FmReqVital(Trim(txtencid.Text), "Procedure")
    hForm.ShowModal
  Endif
  
End

Public Sub mnutiming_Click()
  
  Dim hForm As FmEventTime
  
  If txtencid.Text Then
    hForm = New FmEventTime(Trim(txtencid.Text), "Procedure")
    hForm.ShowModal
  Endif
  
End

Public Sub mnuessent_Click()
  
  Dim hForm As FmVital
  
  If txtencid.Text
    hForm = New FmVital(Trim(txtencid.Text))
    hForm.ShowModal
    hPatient.UpdateTriage()
  Endif
  
End

Public Sub mnulabrepo_Click()
  
  Dim xPath As String
  
  If txtencid.Text Then
    Inc Application.Busy
    xpath = modCHTMLPatient.ShowPatientLaboratoryReport(Trim(txtencid.Text), modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif
  
End

Public Sub mnuradioreport_Click()
  
  Dim xPath As String
  
  If txtencid.Text Then
    Inc Application.Busy
    xpath = modCHTMLPatient.ShowPatRadioReportbyEncID(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif
  
End

Public Sub mnucomplete_Click()
  
  If txtencid.Text Then
    modPatReports.GetSelectedPatientValues(Trim(txtencid.Text), modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
  Endif
  
End

Public Sub mnuallencreport_Click()
  
  Dim xPath As String
  Dim xpatno As String
  Dim xList As String[]
  Dim xvarList As Variant[]
  Dim examlist As String[]
  Dim lablist As String[]
  Dim radiolist As String[]
  
  If txtencid.Text Then
    xpatno = $PatientNum
    xList = SelectMedBody("")
    Wait
    If xList Then
      If xList.Exist("Selected Investigations") Then
        xvarList = ListViewMulti(Trim(txtencid.Text))
        If xvarList Then
          examlist = xvarList[0]
          lablist = xvarList[1]
          radiolist = xvarList[2]
        Endif
      Endif
    Endif
    Inc Application.Busy
    xpath = modPatReports.ShowAllEncounterReport(Trim(txtencid.Text), xList, examlist, lablist, radiolist, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif
  
End

''----------------------------------------------- Custom menu ----------------------------------------
Private Sub FillCustomFormMenu()
  
  Dim xform1 As String
  Dim xform2 As String
  Dim xform3 As String
  Dim xform4 As String
  Dim xform5 As String
  Dim xform6 As String
  Dim xform7 As String
  Dim xform8 As String
  Dim xform9 As String
  Dim xform10 As String
  
  xform1 = modSettings.ShowSettingForReport("CustomForm1/Form_Name")
  xform2 = modSettings.ShowSettingForReport("CustomForm2/Form_Name")
  xform3 = modSettings.ShowSettingForReport("CustomForm3/Form_Name")
  xform4 = modSettings.ShowSettingForReport("CustomForm4/Form_Name")
  xform5 = modSettings.ShowSettingForReport("CustomForm5/Form_Name")
  xform6 = modSettings.ShowSettingForReport("CustomForm6/Form_Name")
  xform7 = modSettings.ShowSettingForReport("CustomForm7/Form_Name")
  xform8 = modSettings.ShowSettingForReport("CustomForm8/Form_Name")
  xform9 = modSettings.ShowSettingForReport("CustomForm9/Form_Name")
  xform10 = modSettings.ShowSettingForReport("CustomForm10/Form_Name")
  
  If xform1 Then
    mnucustform1.Caption = xform1
    mnucustform1.Tag = "CustomForm1"
    mnucustform1.Enabled = True
  Endif
  
  If xform2 Then
    mnucustform2.Caption = xform2
    mnucustform2.Tag = "CustomForm2"
    mnucustform2.Enabled = True
  Endif
  
  If xform3 Then
    mnucustform3.Caption = xform3
    mnucustform3.Tag = "CustomForm3"
    mnucustform3.Enabled = True
  Endif
  
  If xform4 Then
    mnucustform4.Caption = xform4
    mnucustform4.Tag = "CustomForm4"
    mnucustform4.Enabled = True
  Endif
  
  If xform5 Then
    mnucustform5.Caption = xform5
    mnucustform5.Tag = "CustomForm5"
    mnucustform5.Enabled = True
  Endif
  
  If xform6 Then
    mnucustform6.Caption = xform6
    mnucustform6.Tag = "CustomForm6"
    mnucustform6.Enabled = True
  Endif
  
  If xform7 Then
    mnucustform7.Caption = xform7
    mnucustform7.Tag = "CustomForm7"
    mnucustform7.Enabled = True
  Endif
  
  If xform8 Then
    mnucustform8.Caption = xform8
    mnucustform8.Tag = "CustomForm8"
    mnucustform8.Enabled = True
  Endif
  
  If xform9 Then
    mnucustform9.Caption = xform9
    mnucustform9.Tag = "CustomForm9"
    mnucustform9.Enabled = True
  Endif
  
  If xform10 Then
    mnucustform10.Caption = xform10
    mnucustform10.Tag = "CustomForm10"
    mnucustform10.Enabled = True
  Endif
  
End

Public Sub mnucustform1_Click()
  
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart
  
  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform1.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform1.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif
  
End

Public Sub mnucustform2_Click()
  
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart
  
  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform2.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform2.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif
  
End

Public Sub mnucustform3_Click()
  
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart
  
  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform3.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform3.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif
  
End

Public Sub mnucustform4_Click()
  
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart
  
  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform4.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform4.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif
  
End

Public Sub mnucustform5_Click()
  
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart
  
  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform5.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform5.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif
  
End

Public Sub mnucustform6_Click()
  
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart
  
  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform6.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform6.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif
  
End

Public Sub mnucustform7_Click()
  
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart
  
  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform7.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform7.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif
  
End

Public Sub mnucustform8_Click()
  
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart
  
  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform8.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform8.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif
  
End

Public Sub mnucustform9_Click()
  
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart
  
  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform9.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform9.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif
  
End

Public Sub mnucustform10_Click()
  
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart
  
  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform10.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform10.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif
  
End

Private Sub UserAccessRestrict()
  
  If $UserRestrict.Exist("Procedure Addition") Then
    mnunewproc.Enabled = False
    btnsubChange.Enabled = False
  Endif
  If $UserRestrict.Exist("Procedure Components") Then
    btncustonpoint.Enabled = False
    bnlistpoint.Enabled = False
    btnicdpoint.Enabled = False
    btndelcomponent.Enabled = False
  Endif
  If $UserRestrict.Exist("Procedure Summary") Then
    btncomment.Enabled = False
  Endif
  
  If $UserRestrict.Exist("PreOperative Discussion") Then
    btnperson.Enabled = False
    btnprediscus.Enabled = False
  Endif
  If $UserRestrict.Exist("Preoperative Examination") Then
    grdprelist.Enabled = False
    grdprexam.Enabled = False
  Endif
  If $UserRestrict.Exist("Preoperative Note") Then
    btnpreindication.Enabled = False
    btnprecomment.Enabled = False
  Endif
  If $UserRestrict.Exist("Preoperative Item Used") Then
    btnorderpre.Enabled = False
    btndosepre.Enabled = False
    grdpreitem.Enabled = False
  Endif
  
  If $UserRestrict.Exist("Procedure Parameters") Then
    grdonlist.Enabled = False
    grdonproc.Enabled = False
  Endif
  If $UserRestrict.Exist("Procedure Note") Then
    btnsaveonprocindi.Enabled = False
    btnsavesummry.Enabled = False
  Endif
  If $UserRestrict.Exist("Procedure Item Used") Then
    btnorderon.Enabled = False
    btndoseon.Enabled = False
    grdonpharmacy.Enabled = False
  Endif
  If $UserRestrict.Exist("Procedure Personnel") Then
    btnaddperson.Enabled = False
    grdperson.Enabled = False
  Endif
  If $UserRestrict.Exist("Procedure Instruments") Then
    
  Endif
  
  If $UserRestrict.Exist("Anesthesia Parameters") Then
    grdaneslist.Enabled = False
    grdanes.Enabled = False
  Endif
  If $UserRestrict.Exist("Anesthesia Note") Then
    btnsavetechniq.Enabled = False
    btnanesnote.Enabled = False
  Endif
  If $UserRestrict.Exist("Anesthesia Item Used") Then
    btnorderanes.Enabled = False
    btndoseanes.Enabled = False
    grdanesitem.Enabled = False
  Endif
  
  If $UserRestrict.Exist("Postoperative Examination") Then
    grdpostlist.Enabled = False
    grdpostexam.Enabled = False
  Endif
  If $UserRestrict.Exist("Postoperative Note") Then
    btnpostindication.Enabled = False
    btnpostcomment.Enabled = False
  Endif
  If $UserRestrict.Exist("Postoperative Item Used") Then
    btnorderpost.Enabled = False
    btndosepost.Enabled = False
    grdpostitem.Enabled = False
  Endif
  
  If $UserRestrict.Exist("Event Timing") Then
    mnutiming.Enabled = False
  Endif
  If $UserRestrict.Exist("Essential Examinations") Then
    mnuessent.Enabled = False
  Endif
  If $UserRestrict.Exist("Monitoring Plan") Then
    mnumonitor.Enabled = False
  Endif
  
  If $UserRestrict.Exist("Medicine Dosing") Then
    btndosepre.Enabled = False
    btndoseon.Enabled = False
    btndoseanes.Enabled = False
    btndosepost.Enabled = False
  Endif
  If $UserRestrict.Exist("IV Infusion") Then
    btninfusionpre.Enabled = False
    btninfusionoper.Enabled = False
    btninfusionanes.Enabled = False
    btninfusionpost.Enabled = False
  Endif
  
End
