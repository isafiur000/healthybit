' Gambas class file

Private $sTatus As String
Private $OutFluid As String[]
Private $ExamLst As String[]
Private $focus As Boolean
Private $UserRestrict As String[]
Private $EBMDiagnosis As String
Private $PatientNum As String
Private $xFinClear As Boolean
Private $NotesList As String[]

Private $rData As Result
Private $aMyFields As String[]

Private $billModeTest As String
Private $billModeRadio As String
Private $billModePharmacy As String
Private $billModeProcedure As String
Private $billModeEquipment As String
Private $billModeService As String
Private $billModeOthers As String
Private $billReference As String

Private $tblpatlabtest As String
Private $tblpatlabsubtest As String

Public Sub _new(encid As String, Focus As Boolean)

  txtencid.Text = encid
  $focus = Focus

End

Public Sub Form_Open()

  Dim hFmQuan1 As FmQuantiEntry
  Dim hFmQuan2 As FmQuantiEntry
  Dim hFmQuan3 As FmQuantiEntry
  Dim xlocat As String

  modGeneralMain.ArrangeEmbedForms(Me, Panel1, "Vertical")
  Me.Icon = Picture[modGeneralMain.$strLogo]
  hFmQuan1 = New FmQuantiEntry(txtsympval, pnlquantisyn)
  hFmQuan2 = New FmQuantiEntry(txtfinval, pnlquantiexam)
  hFmQuan3 = New FmQuantiEntry(txtmonval, pnlquantinurse)
  modLabSub.DisplayDefaultTestUnit(rbsi, rbmetric)
  pnlplan.Height = 800 * modBasic.$AppHeightRatio

  cmbpatheightunit.List = ["cm", "inch", "foot"]
  cmbsympunit.List = ["Hours", "Days", "Weeks", "Months", "Years", "Episodes"]
  cmbsymdura.List = ["Both Side", "Left Side", "Right Side", "On/Off"]
  If modBasic.$ItemListFormat = "GridView" Then
  Else
    cmbsymptom.List = modBasic.$ClinComplaintComp
  Endif
  $ExamLst = modMedicine.FillClinicalSubClass("InPatient")
  $UserRestrict = modBasic.$ClinicDisableCompo
  xlocat = modSettings.ShowSettingFromFIle("ClinicForms/ImpressionList")
  If xlocat Then
    txtmonimpression.List = modString.GetStringArrayFromFile(xlocat, True)
  Endif

  FillCustomFormMenu()
  FillCustomMenu()
  SHowALgorithmList()

  SetHtmlTextOption(txthistory)
  SetHtmlTextOption(txtnote)
  SetHtmlTextOption(txtsubject)
  SetHtmlTextOption(txtobject)
  SetHtmlTextOption(txtmanage)
  SetHtmlTextOption(txtplan)
  SetHtmlTextOption(txtmonproblem)
  SetHtmlTextOption(txtmontreatment)
  SetHtmlTextOption(txtmoninout)
  SetHtmlTextOption(txtmonplan)
  modAccount.PasInvoiceSetting(cmbfiscal, False)
  LoadTableNames()

  If txtencid.Text Then
    GetEncounterValue()
  Else
    modGeneralMain.SetEncIDPrefix(txtencid)
    txtencid.SetFocus
  Endif

End

Public Sub Form_Close()

  If txtencid.Text Then
    modPatientSub.ReleaseLockEncounter(Trim(txtencid.Text), modHelpVariable.$LogInCategory)
  Endif
  modGeneralMain.RecordFormExit(Me)

End

Public Sub Form_Activate()

  Me.Icon = Picture["icons/coll4.png"]
  If $focus = True Then
    txtencid.SetFocus
  Endif

End

Public Sub Form_Deactivate()

  Me.Icon = Picture[modGeneralMain.$strLogo]

End

Public Sub Form_Resize()

  modGeneralMain.ShowSelectedFormMenu(Me)

End

Private Sub SetHtmlTextOption(TextHTML1 As TextHTML)

  TextHTML1.DictionaryPath = modBasic.$dictPathList
  TextHTML1.UserList = modBasic.$IPConsultUserList

End

Private Sub LoadTableNames()

  Dim res As Result

  If cmbfiscal.Text = "Current" Then
    $tblpatlabtest = "tblpatlabtest"
    $tblpatlabsubtest = "tblpatlabsubtest"
  Else
    res = modDatabase.$syConn.Exec("select fldpatlabtest,fldpatlabsubtest from tblfisclosing where fldindex=&1 and (fldstate=&2 or fldstate IS NULL)", cmbfiscal.Text, "Active")
    If res.Available Then
      If res["fldpatlabtest"] Then
        $tblpatlabtest = res["fldpatlabtest"]
      Else
        $tblpatlabtest = "tblpatlabtest"
      Endif
      If res["fldpatlabsubtest"] Then
        $tblpatlabsubtest = res["fldpatlabsubtest"]
      Else
        $tblpatlabsubtest = "tblpatlabsubtest"
      Endif
    Else
      $tblpatlabtest = "tblpatlabtest"
      $tblpatlabsubtest = "tblpatlabsubtest"
    Endif
  Endif

End

Public Sub cmbfiscal_Click()

  LoadTableNames()
  If txtencid.Text Then
    lstfinding.List = modLabTest.PaientAllTestNameArray(Trim(txtencid.Text), $tblpatlabtest)
  Endif

End

''-------------------------------------- patient profile ----------------------------------------------
Public Sub txtencid_LostFocus()

  GetEncounterValue()

End

Private Sub GetEncounterValue()

  Dim res As Result
  Dim xallow As Boolean

  If Not txtpatientname.Text Then
    If Not txtencid.Text Then Return
    If modBasic.$EncIdPrefix And If txtencid.Text = modBasic.$EncIdPrefix Then
      txtencid.SetFocus
      Return
    Endif

    ' If modPatientSub.LockEncounterDesk(Trim(txtencid.Text)) = False Then
    '   txtencid.Text = ""
    '   Balloon.Warning(("Encounter Locked"), txtencid)
    '   Balloon.Delay = modBasic.$BalloonDelay
    '   txtencid.SetFocus
    ' Endif

    dtdob.Value = ""
    If txtencid.Text Then
      Me.Title = "ENC: " & txtencid.Text
      If txtencid.Text = modBasic.$EncIdPrefix Then
      Else
        modSettings.SaveValuesToLog("LastValue/Encounter", Trim(txtencid.Text))
      Endif
      res = modDatabase.$myConn.Exec("select fldpatientval,flduserid from tblencounter where fldencounterval=&1", Trim(txtencid.Text))
      If res.Available = False Then
        modLinkDB.CheckEncDataRemote(Trim(txtencid.Text))
        txtencid.SetFocus
      Else
        If modBasic.$LockToOwnConsultant = "Yes" Then
          If res["flduserid"] = modBasic.$lbluser Then
            xallow = True
          Else
            xallow = False
          Endif
        Else
          xallow = True
        Endif
        If xallow = True Then
          modRepository.$RepoDataStatus = False
          txtpatientname.Text = modPatient.GetPatientNameByEnc(Trim(txtencid.Text))
          If txtpatientname.Text Then
            Panel7.Enabled = True
            xPanelentry.Enabled = True
            TabStrip1.Enabled = True
            txtgender.Text = modPatient.GetPatientSex(Trim(txtencid.Text))
            txtpatientaddress.Text = modPatient.GetPatientAddressByEnc(Trim(txtencid.Text))
            dtdob.Value = modPatient.GetPatientBirthDay(Trim(txtencid.Text))
            modDateSub.GetAgeControlFromDate(dtdob.Value, txtpatage, cmbpatageunit)

            $PatientNum = modPatient.GetPatientNoByEnc(Trim(txtencid.Text))
            $sTatus = modPatient.CurrentAdmissionStatus(Trim(txtencid.Text))
            txtnow.Text = $sTatus
            txtbedno.Text = modPatient.GetLocationSetting(Trim(txtencid.Text), $sTatus)
            txtpatdoa.Text = modReportVar.GetDateTimeReport(modPatient.GetRecordDate(Trim(txtencid.Text)), gb.GeneralDate)
            txtpatweight.Value = modClinic.GetBodyWeight(Trim(txtencid.Text))
            btnconsult.Tag = modPatient.GetAttendingConsultant(Trim(txtencid.Text))
            btnconsult.Text = modGeneral.GetUserFullName(btnconsult.Tag)
            modClinSub.GetPatientHeight(Trim(txtencid.Text), txtpatheight, cmbpatheightunit)
            modAppSupport.RecordPatientActivity("Patient Data", Me.Name, "EncounterID", Trim(txtencid.Text))
            txtcolor.Background = modPatient.GetPatientColor(Trim(txtencid.Text))
            $xFinClear = modNonMedical.GetFinanceClearance(Trim(txtencid.Text))
            Wait
            If modPatientSub.AllowEncIDHistory(Trim(txtencid.Text), modDatabase.$myConn) = True Then
              BlockDCButton()
              BasicInfoPatient()
              txtencid.ReadOnly = True
              modImage.ShowPhotoSplash("Patient", $PatientNum)
              modPatientSub.PopUpPatientForm(Trim(txtencid.Text), Me.Tag)
              $focus = False
              $EBMDiagnosis = ""
              $NotesList = New String[]
              txtadmitcause.SetFocus
            Else
              Me.Enabled = False
            Endif
          Else
            Balloon.Warning(("Encounter ID not found"), txtencid)
            Balloon.Delay = modBasic.$BalloonDelay
            txtencid.SetFocus
          Endif
        Else
          Message.Warning("Not authorized", ("OK"))
        Endif
      Endif
    Endif
  Endif

End

Private Sub BlockDCButton()

  Dim xx As Boolean

  xx = modPatient.EnableClinicForm(txtnow.Text)
  btnaddheit.Enabled = xx
  tlbtnaddbed.Enabled = xx
  tlbtnadwt.Enabled = xx
  dtdob.Enabled = xx
  btnpic.Enabled = xx
  btnconsult.Enabled = xx

End

Public Sub txtpatweight_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    tlbtnadwt_Click()
  Endif

End

Public Sub cmbpatheightunit_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    btnaddheit_Click()
  Else
    modFillContainer.AutoFillComboBox(cmbpatheightunit)
    modFillContainer.RestrictComboToContent(cmbpatheightunit)
  Endif

End

Public Sub txtpatweight_GotFocus()

  If modBasic.$TabletModeEnable = "Yes" Then
    txtpatweight.Enabled = False
    txtpatweight.Value = InputValue(("Set Patient Body Weight"), txtencid.Text, txtpatweight.Value)
    txtpatweight.Enabled = True
  Endif

End

Public Sub txtpatheight_GotFocus()

  If modBasic.$TabletModeEnable = "Yes" Then
    txtpatheight.Enabled = False
    txtpatheight.Value = InputValue(("Set Patient Body Height"), txtencid.Text, txtpatheight.Value)
    txtpatheight.Enabled = True
  Endif

End

Public Sub tlbtnadwt_Click()

  If txtencid.Text Then
    If txtpatweight.Value Then
      modClinSub.AddGeneralParametersQuanti(Trim(txtencid.Text), "Body Weight", txtpatweight.Value)
      tlbtnadwt.Enabled = False
      Balloon.Info(("Information saved"), tlbtnadwt)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

Public Sub btnaddheit_Click()

  If txtencid.Text Then
    If txtpatheight.Value Then
      If cmbpatheightunit.Text Then
        modClinSub.UpdatePatientHeight(Trim(txtencid.Text), txtpatheight.Value, cmbpatheightunit.Text)
        btnaddheit.Enabled = False
        Balloon.Info(("Information updated"), btnaddheit)
        Balloon.Delay = modBasic.$BalloonDelay
      Endif
    Endif
  Endif

End

Public Sub dtdob_Click()

  If txtencid.Text Then
    If dtdob.Value Then
      modPatientSub.UpdatePatDOB(Trim(txtencid.Text), dtdob.Value)
      modDateSub.GetAgeControlFromDate(dtdob.Value, txtpatage, cmbpatageunit)
      Balloon.Info(("Information updated"), dtdob)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

Public Sub btnconsult_Change()

  If btnconsult.Text = "" Then
    btnconsult.Tag = ""
  Endif

End

Public Sub cmbpatageunit_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbpatageunit)
  modFillContainer.RestrictComboToContent(cmbpatageunit)

End

Public Sub btnconsult_Click()

  Dim xMedUser As String[]

  xMedUser = MedicalSelectedValue(("Select Consultant"), modBasic.$IPConsultUserList)
  If xMedUser And If xMedUser.Count Then
    btnconsult.Tag = xMedUser[0]
    btnconsult.Text = xMedUser[1]
  Else
    btnconsult.Tag = ""
    btnconsult.Text = ""
  Endif
  If btnconsult.Tag And If txtencid.Text Then
    modPatientSub.UpdateAttendingConsultant(Trim(txtencid.Text), btnconsult.Tag)
    Balloon.Info(("Information saved"), btnconsult)
    Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnwebcam_Click()

  If txtencid.Text Then
    GetEncounterValue()
  Else
    txtencid.Text = modDevice.ChooseBarCodeSource()
    txtencid.SetFocus
    txtencid.Pos = Len(txtencid.Text)
  Endif

End

Public Sub txtencid_KeyPress()

  If Key.Code = Key.Down Then
    If Not txtencid.Text Then
      txtencid.Text = PatSearch("Encounter")
      txtencid.SetFocus
    Else
      If modBasic.$AutoEncSuffix = "Yes" Then
        txtencid.Text = txtencid.Text & modBasic.$HospCode
      Endif
    Endif
  Else
    modGeneralMain.InputUpCaseOnly()
  Endif

End

Public Sub tlbtnaddbed_Click()

  Dim hForm As FmBedManage
  Dim xadmitId As String

  If txtencid.Text Then
    If txtnow.Text = "Admitted" Then
      hForm = New FmBedManage(Trim(txtencid.Text), txtbedno)
      hForm.ShowModal

    Else
      If modBasic.$WardAdmission = "Yes" Then
        If Message.Question(("Patient getting admitted. Are you sure?"), ("No"), ("Yes")) = 2 Then
          xadmitId = modPatientSub.GetPatientAdmission(Trim(txtencid.Text))
          txtnow.Text = "Admitted"
          txtbedno.Text = ""
          Balloon.Info(("Patient Admitted"), txtbedno)
          Balloon.Delay = modBasic.$BalloonDelay
        Endif
      Endif

    Endif
  Endif

End

Public Sub tlbtnpayment_Click()

  If txtencid.Text Then
    modNonMedical.CurrentPayStatusMsg(Trim(txtencid.Text))
  Endif

End

Public Sub btnpic_Click()

  Dim hForm As FmPersonImage

  If txtencid.Text Then
    hForm = New FmPersonImage("Patient", $PatientNum, False)
    hForm.ShowModal
  Endif

End

Public Sub btnprofile_Click()

  Dim hForm As FmMinProfile

  hForm = New FmMinProfile(Trim(txtencid.Text))
  hForm.ShowModal()

End

Public Sub btnsms_Click()

  Dim xval As String

  If btnconsult.Tag Then
    xval = modDevice.SendSMSToInpatDoc(Trim(txtencid.Text), modGeneral.GetUserContact(btnconsult.Tag))
    If xval Then
      Balloon.Info(xval, btnsms)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

''------------------------------------- clinic form -----------------------------------------------------
Public Sub rbsi_Click()

  modSettings.SaveSettingsToFile("TestUnit/Default", "SI")

End

Public Sub rbmetric_Click()

  modSettings.SaveSettingsToFile("TestUnit/Default", "Metric")

End

Private Function LabUnitForm() As String

  Dim xx As String

  If rbsi.Value = True Then
    xx = "SI"
  Else
    xx = "Metric"
  Endif
  Return xx

End

Private Function NoteTakingTypeList() As String[]

  Dim xList As String[]
  Dim aList As String[]

  Select $sTatus
    Case "Absconder"
      aList = New String[]
    Case "Discharged", "LAMA", "Refer", "Death"
      If modBasic.$ClinHistoryDischarge = "Selected" Then
        Select $billReference
          Case "Claim Code", "Accident SSF", "Medical SSF", "Critical SSF", "Staff List"
            xList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select flditem as col from tbldischarge where fldcomp like &1 and fldformat=&2", modBasic.$compID, $billReference))
          Case Else
            xList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select flditem as col from tbldischarge where fldcomp like &1 and fldformat=&2", modBasic.$compID, "Common"))
        End Select
      Else
        xList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select flditem as col from tbldischarge where fldcomp like &1", modBasic.$compID))
      Endif
      If xList And If xList.Count Then
        aList = xList
      Else
        aList = ["Condition of Discharge", "Advice on Discharge"]
      Endif
    Case Else
      aList = ["Progress Note", "Clinicians Note", "Nurses Note", "Transfer Note"]
  End Select

  Return aList

End

Private Function GetHistoryList() As String[]

  Dim xList As String[]
  Dim xnew As String[]
  Dim xfinal As String[]

  xList = New String[]
  xList.Add("General Complaints")
  xList.Add("History of Illness")
  If modBasic.$ClinHistoryDischarge = "Selected" Then
    Select $billReference
      Case "Claim Code", "Accident SSF", "Medical SSF", "Critical SSF", "Staff List"
        xnew = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select flditem as col from tblhistory where fldcomp like &1 and fldformat=&2", modBasic.$compID, $billReference))
      Case Else
        xnew = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select flditem as col from tblhistory where fldcomp like &1 and fldformat=&2", modBasic.$compID, "Common"))
    End Select
  Else
    xnew = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select flditem as col from tblhistory where fldcomp like &1", modBasic.$compID))
  Endif
  If xnew And If xnew.Count Then
    xList.Insert(xnew)
  Endif
  xList.Add("Initial Planning")

  xfinal = modString.BinaryDistinctStringArray(xList)
  Return xfinal

End

Private Sub PregnancySettings()

  If modPatient.GetPatientSex(Trim(txtencid.Text)) = "Male" Then
    cmbpregnancy.Text = "Not Applicable"
    cmbpregnancy.Enabled = False
    tlbtpregnancy.Enabled = False
  Else
    cmbpregnancy.List = ["1st trimester", "2nd trimester", "3rd trimester", "Breast feeding", "Non Pregnant"]
    cmbpregnancy.Text = modClinic.GetPregnancyStatus(Trim(txtencid.Text))
    cmbpregnancy.Enabled = True
  Endif

End

Private Sub BasicInfoPatient()

  If txtencid.Text Then
    GetDefaultBillingmodes()
    txthistorylabel.List = GetHistoryList()
    cmbnote.List = NoteTakingTypeList()
    If $sTatus = "Admitted" Then
      cmbnotetype.List = ["All Types", "Progress Note", "Clinicians Note", "Nurses Note", "Transfer Note", "Patient Note"]
      cmbnotetype.Text = "All Types"
    Else
      cmbnotetype.Text = "All Types"
      Panel4.Visible = False
    Endif
    lstallergy.List = modPathoSub.GetAllergyMedicineList(Trim(txtencid.Text), chkallergy.Value)
    lsticdisease.List = modPathoSub.GetFinalDiagnosisList(Trim(txtencid.Text))
    lstsyndrome.List = modPathoSub.GetProvisionalDiagnosisList(Trim(txtencid.Text))
    ShowChiefSymptomData()
    txtadmitcause.Text = modPatPatho.ShowSelectedHistoryValue(Trim(txtencid.Text), "Cause of Admission")
    ButtonControl()
    TabStrip1.Index = 0
  Endif

End

Private Sub GetDefaultBillingmodes()

  Dim xpackage As String

  $billReference = modNonMedical.GetFixedReference(Trim(txtencid.Text))
  Select $sTatus
    Case "Admitted", "Discharged", "LAMA", "Death", "Refer", "Absconder"
      $billModeTest = modNonMedical.GetAutoIPBillingPack("Test", Trim(txtencid.Text))
      $billModeRadio = modNonMedical.GetAutoIPBillingPack("Radio", Trim(txtencid.Text))
      $billModePharmacy = modNonMedical.GetAutoIPBillingPack("Pharmacy", Trim(txtencid.Text))
      $billModeEquipment = modNonMedical.GetAutoIPBillingPack("Equipment", Trim(txtencid.Text))
      $billModeProcedure = modNonMedical.GetAutoIPBillingPack("Procedure", Trim(txtencid.Text))
      $billModeService = modNonMedical.GetAutoIPBillingPack("Service", Trim(txtencid.Text))
      $billModeOthers = modNonMedical.GetAutoIPBillingPack("Others", Trim(txtencid.Text))
    Case Else
      xpackage = modNonMedical.DefaultBillingScheme(Trim(txtencid.Text), modBasic.$compID)
      $billModeTest = xpackage
      $billModeRadio = xpackage
      $billModePharmacy = xpackage
      $billModeEquipment = xpackage
      $billModeProcedure = xpackage
      $billModeService = xpackage
      $billModeOthers = xpackage
  End Select

End

Private Sub ButtonControl()

  Dim xx As Boolean
  Dim xval As String

  xx = modPatient.EnableClinicForm(txtnow.Text)
  ''set consult
  btnconsult.Enabled = xx
  ''presenting complaints
  btnsympadd.Enabled = xx
  btnaddsymplist.Enabled = xx
  grdchiefsymptom.Enabled = xx
  ''cause of admission
  btnadmitcause.Enabled = xx
  ''patient history
  tlbtnhistory.Enabled = xx
  ''clinical findings
  btnfinadd.Enabled = xx
  GridView1.Enabled = xx
  btnaddexamlistmain.Enabled = xx
  btnaddexamlistmainall.Enabled = xx
  btnaddscales.Enabled = xx
  btntriage.Enabled = xx
  ''body wt
  btnaddwt.Enabled = xx
  grdwt.Enabled = xx
  ''input/output
  btnaddinput.Enabled = xx
  btaddoutput.Enabled = xx
  grdintake.Enabled = xx
  grdoutput.Enabled = xx
  ''progress note
  btnmoniadd.Enabled = xx
  btnmonproblem.Enabled = xx
  btnmontreatment.Enabled = xx
  btnmoninout.Enabled = xx
  btnmonplan.Enabled = xx
  btnmonimpression.Enabled = xx
  ''clinical note
  ' btnoteadd.Enabled = xx
  ' btnotedit.Enabled = xx
  ''planning
  btnplanadd.Enabled = xx
  btnaddsubject.Enabled = xx
  btnaddobject.Enabled = xx
  btnaddassess.Enabled = xx
  btnaddplan.Enabled = xx
  ''symptoms
  btnaddsympfree.Enabled = xx
  btnaddsymptom.Enabled = xx
  btndelsymptom.Enabled = xx
  grdsymptom.Enabled = xx
  ''provisional Diagnosis
  tlbtndelprov.Enabled = xx
  btnprovcustom.Enabled = xx
  tbnprovdisease.Enabled = xx
  btnprovsyndro.Enabled = xx
  ''final diagnosis
  tlbtndelfinal.Enabled = xx
  btnfinalcustom.Enabled = xx
  tbnfinaldisease.Enabled = xx
  btnfinalsyndro.Enabled = xx
  ''drug allergy
  tlbtndelallergy.Enabled = xx
  btnallergy.Enabled = xx
  btnallergymanual.Enabled = xx
  ''change status
  mnupatappl.Enabled = xx
  ''lab request
  btnlabs.Enabled = xx
  ''radiology request
  btnradio.Enabled = xx
  ''pharmacy request
  grdfluid.Enabled = xx
  grdmedicine.Enabled = xx
  grdmedprn.Enabled = xx
  ''medical product
  mnumedproduct.Enabled = xx
  ''major proced
  mnumajor.Enabled = xx
  ''consultation
  mnuconsult.Enabled = xx
  ''P/O intake
  btnintake.Enabled = xx
  ''monitoring
  mnumonitor.Enabled = xx
  ''demographic
  mnudemograph.Enabled = xx
  ''images
  mnuscreendraw.Enabled = xx
  ''equipment
  mnuequipment.Enabled = xx
  ''minor procedure
  mnuminiproc.Enabled = xx
  ''gen service
  mnugenservice.Enabled = xx
  ''extra procedure
  mnuextprocedure.Enabled = xx
  ''drug dosing
  grdfluiddata.Enabled = xx
  btndosingroutine.Enabled = xx
  btndosingprn.Enabled = xx
  grdfluid.Enabled = xx
  ''event timing
  mnuevent.Enabled = xx
  mnudeviceuse.Enabled = xx
  ''triage
  mnutriage.Enabled = xx
  ''vital exam
  btnvital.Enabled = xx
  mnuexam.Enabled = xx
  ''iv drip
  btnivdrip.Enabled = xx
  ''hepatc/pregnancy
  tlbthepatic.Enabled = xx
  tlbtpregnancy.Enabled = xx

  If xx = True Then
    mnucert.Enabled = False
    mnudiscexam.Enabled = False
    mnuexitpass.Enabled = False
    mnudiscrollback.Enabled = False
    If $sTatus = "Admitted" Then
      mnuadmission.Enabled = True
      mnudischarge.Enabled = True
      mnustartlama.Enabled = True
      mnustartdeath.Enabled = True
      mnurefer.Enabled = True
      mnuabsconder.Enabled = True
    Endif

  Else If xx = False Then
    mnucert.Enabled = True
    mnudiscexam.Enabled = True
    mnuexitpass.Enabled = True
    mnudiscrollback.Enabled = True
    If $sTatus = "Discharged" Then
      mnudiscrep.Enabled = True
    Else If $sTatus = "LAMA" Then
      mnulama.Enabled = True
    Else If $sTatus = "Death" Then
      mnudeath.Enabled = True
    Else If $sTatus = "Refer" Then
      mnurefercert.Enabled = True
    Endif

  Endif

  If $sTatus = "Absconder" Then
    TabStrip1.Enabled = False
    mnunewrequest.Enabled = False
    mnucustform.Enabled = False
    mnucustom.Enabled = False
  Endif

  xval = modBasic.$LockDiagnosisList
  If xval = "No" Then
  Else
    btnprovcustom.Enabled = False
    btnfinalcustom.Enabled = False
  Endif

  If $UserRestrict Then
    RestrictUserAccess()
  Endif

End

'''----------------------------------- ALLERGY-------------------------------------------------------------------------------
Public Sub tlbtndelallergy_Click()

  Dim res As Result

  If txtencid.Text Then
    If lstallergy.Text Then
      If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
        res = modDatabase.$myConn.Edit("tblpatfindings", "fldcode=&1 and fldencounterval=&2 and fldtype=&3 and fldsave=&4", lstallergy.Text, Trim(txtencid.Text), "Allergic Drugs", True)
        res["fldsave"] = False
        res["xyz"] = False
        res.Update
        lstallergy.List = modPathoSub.GetAllergyMedicineList(Trim(txtencid.Text), chkallergy.Value)
        Balloon.Delete(("Information deleted"), tlbtndelallergy)
        Balloon.Delay = modBasic.$BalloonDelay
      Endif
    Endif
  Endif

End

Public Sub chkallergy_Click()

  lstallergy.List = modPathoSub.GetAllergyMedicineList(Trim(txtencid.Text), chkallergy.Value)

End

Public Sub btnallergymanual_Click()

  Dim xx As String

  If txtencid.Text Then
    xx = InputBox(("Enter custom Drug Allergy"), ("Drug Allergy"), "")
    If xx Then
      modPatientGeneral.AddPatientFindings("Allergic Drugs", Trim(txtencid.Text), xx, "", "")
      lstallergy.List = modPathoSub.GetAllergyMedicineList(Trim(txtencid.Text), chkallergy.Value)
    Endif
  Endif

End

Public Sub btnallergy_Click()

  Dim sName As String[]
  Dim sText As String
  Dim druglist As String[]

  If txtencid.Text Then
    druglist = modString.GetRemainingArray(modBasic.$GenericMedName, lstallergy.List)
    sName = GridListView(("Select Drugs"), druglist, lstallergy, lstallergy.Height + TabPanel1.Height)
    If sName And If sName.Count Then
      For Each sText In sName
        modPatientGeneral.AddPatientFindings("Allergic Drugs", Trim(txtencid.Text), sText, "", "")
      Next
    Endif
    lstallergy.List = modPathoSub.GetAllergyMedicineList(Trim(txtencid.Text), chkallergy.Value)
  Endif

End

''-------------------------------- provisional diagnosis -----------------------------------------
Public Sub tlbtndelprov_Click()

  Dim res As Result

  If txtencid.Text Then
    If lstsyndrome.Text Then
      If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
        res = modDatabase.$myConn.Edit("tblpatfindings", "fldcode=&1 and fldencounterval=&2 and fldtype=&3 and fldsave=&4", lstsyndrome.Text, Trim(txtencid.Text), "Provisional Diagnosis", True)
        res["fldsave"] = False
        res["xyz"] = False
        res.Update
        lstsyndrome.List = modPathoSub.GetProvisionalDiagnosisList(Trim(txtencid.Text))
        Balloon.Delete(("Information deleted"), tlbtndelprov)
        Balloon.Delay = modBasic.$BalloonDelay
      Endif
    Endif
  Endif

End

Public Sub btnprovsyndro_Click()

  Dim sName As String[]
  Dim xGroup As String

  If txtencid.Text Then
    If MMain.$Ayurveda = "Yes" Then
      sName = AyurvedicDiagnosis(modAMISRep.$AyurvedicDiagnosis)
    Else
      If modBasic.$ClinICDPunchFormat = "GridView" Then
        sName = ICDGridView("Select Diseases")
      Else
        xGroup = modPathoSub.GetDiagnoGroupForService(txtbedno.Text)
        If xGroup Then
          sName = ICDTree(modDatabase.$icdConn, "Disease", modBasic.$ClinDiagnoSelectGrouped, modBasic.$ClinDiagnoSelectERGroup, modBasic.$ClinDiagnoChapterGrouped, xGroup)
        Else
          sName = ICDTree(modDatabase.$icdConn, "Disease", modBasic.$ClinDiagnoSelectGrouped, modBasic.$ClinDiagnoSelectERGroup, modBasic.$ClinDiagnoChapterGrouped, modBasic.$DefaultDiagnoGroup)
        Endif
      Endif
    Endif
    If sName Then
      If sName[1] And If sName[0] Then
        modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), sName[0], sName[1], sName[2])
        lstsyndrome.List = modPathoSub.GetProvisionalDiagnosisList(Trim(txtencid.Text))
      Endif
    Endif
  Endif

End

Public Sub btnprovcustom_Click()

  Dim xx As String

  If txtencid.Text Then
    xx = InputBox(("Enter custom Provisional Diagnosis"), ("Provisional Diagnosis"), "")
    If xx Then
      modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), xx, "Other", "Other")
      lstsyndrome.List = modPathoSub.GetProvisionalDiagnosisList(Trim(txtencid.Text))
    Endif
  Endif

End

Public Sub tbnprovdisease_Click()

  Dim sName As String[]

  If txtencid.Text Then
    If modBasic.$ProvDiagnosisRule = "Obstetrics" Then
      sName = DiagnoObstetrics(Trim(txtencid.Text), True)
    Else
      sName = GetSyndromes()
    Endif

    If sName Then
      If sName[1] And If sName[0] Then
        modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), sName[0], sName[1], sName[1])
        lstsyndrome.List = modPathoSub.GetProvisionalDiagnosisList(Trim(txtencid.Text))
      Endif
    Endif
  Endif

End

Public Sub btnregimprov_Click()

  Dim hForm As FmDrugDose

  If lstsyndrome.Text Then
    hForm = New FmDrugDose(Trim(txtencid.Text), lstsyndrome.Text)
    hForm.ShowModal
  Endif

End

Public Sub lstsyndrome_Click()

  $EBMDiagnosis = modPathoSub.GetDiagnosisCodePatient(Trim(txtencid.Text), lstsyndrome.Text)

End

''------------------------------------------ final diagnosis -----------------------------------------------
Public Sub tlbtndelfinal_Click()

  Dim res As Result

  If txtencid.Text Then
    If lsticdisease.Text Then
      If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
        res = modDatabase.$myConn.Edit("tblpatfindings", "fldcode=&1 and fldencounterval=&2 and fldtype=&3 and fldsave=&4", lsticdisease.Text, Trim(txtencid.Text), "Final Diagnosis", True)
        res["fldsave"] = False
        res["xyz"] = False
        res.Update
        lsticdisease.List = modPathoSub.GetFinalDiagnosisList(Trim(txtencid.Text))
        Balloon.Delete(("Information deleted"), tlbtndelfinal)
        Balloon.Delay = modBasic.$BalloonDelay
      Endif
    Endif
  Endif

End

Public Sub tbnfinaldisease_Click()

  Dim sName As String[]

  If txtencid.Text Then
    If modBasic.$FinalDiagnosisRule = "Obstetrics" Then
      sName = DiagnoObstetrics(Trim(txtencid.Text), True)
    Else
      sName = GetSyndromes()
    Endif

    If sName Then
      If sName[1] And If sName[0] Then
        modPatientGeneral.AddPatientFindings("Final Diagnosis", Trim(txtencid.Text), sName[0], sName[1], sName[1])
        lsticdisease.List = modPathoSub.GetFinalDiagnosisList(Trim(txtencid.Text))
      Endif
    Endif
  Endif

End

Public Sub btnfinalsyndro_Click()

  Dim sName As String[]
  Dim xGroup As String

  If txtencid.Text Then
    If MMain.$Ayurveda = "Yes" Then
      sName = AyurvedicDiagnosis(modAMISRep.$AyurvedicDiagnosis)
    Else
      If modBasic.$ClinICDPunchFormat = "GridView" Then
        sName = ICDGridView("Select Diseases")
      Else
        xGroup = modPathoSub.GetDiagnoGroupForService(txtbedno.Text)
        If xGroup Then
          sName = ICDTree(modDatabase.$icdConn, "Disease", modBasic.$ClinDiagnoSelectGrouped, modBasic.$ClinDiagnoSelectERGroup, modBasic.$ClinDiagnoChapterGrouped, xGroup)
        Else
          sName = ICDTree(modDatabase.$icdConn, "Disease", modBasic.$ClinDiagnoSelectGrouped, modBasic.$ClinDiagnoSelectERGroup, modBasic.$ClinDiagnoChapterGrouped, modBasic.$DefaultDiagnoGroup)
        Endif
      Endif
    Endif
    If sName Then
      If sName[1] And If sName[0] Then
        modPatientGeneral.AddPatientFindings("Final Diagnosis", Trim(txtencid.Text), sName[0], sName[1], sName[2])
        lsticdisease.List = modPathoSub.GetFinalDiagnosisList(Trim(txtencid.Text))
      Endif
    Endif
  Endif

End

Public Sub btnfinalcustom_Click()

  Dim xx As String

  If txtencid.Text Then
    xx = InputBox(("Enter custom Final Diagnosis"), ("Final Diagnosis"), "")
    If xx Then
      modPatientGeneral.AddPatientFindings("Final Diagnosis", Trim(txtencid.Text), xx, "Other", "Other")
      lsticdisease.List = modPathoSub.GetFinalDiagnosisList(Trim(txtencid.Text))
    Endif
  Endif

End

Public Sub btnregimfinal_Click()

  Dim hForm As FmDrugDose

  If lsticdisease.Text Then
    hForm = New FmDrugDose(Trim(txtencid.Text), lsticdisease.Text)
    hForm.ShowModal
  Endif

End

Public Sub lsticdisease_Click()

  $EBMDiagnosis = modPathoSub.GetDiagnosisCodePatient(Trim(txtencid.Text), lsticdisease.Text)

End

'''----------------------------------------- TABS ------------------------------------------------------------------------
Public Sub TabStrip1_Click()

  If txtencid.Text Then
    If TabStrip1.Index = 0 Then
    Else If TabStrip1.Index = 1 Then
      dtfind.Value = Now()
      lbldtfind.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), Now())
      If modBasic.$ItemListFormat = "GridView" Then
      Else
        cmbfinding.List = modBasic.$ClinFindingComp
      Endif
      FillExamtable()
      WeightGrid()
    Else If TabStrip1.Index = 2 Then
      dtfluid.Value = Now()
      lbldtfluid.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), Now())
      $OutFluid = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldfluid as col from tblbodyfluid"))
      rbfood.Value = True
      ShowIntakeFoodGrid()
      SHowOutputFluid()
    Else If TabStrip1.Index = 3 Then
      lstfinding.List = modLabTest.PaientAllTestNameArray(Trim(txtencid.Text), $tblpatlabtest)
    Else If TabStrip1.Index = 4 Then
      dtnote.Value = Now()
      lbldtnote.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), Now())
      ShowNoteTypeTime()
    Else If TabStrip1.Index = 5 Then
      rbvalue.Value = True
      ShowMedicines("Current")
    Else If TabStrip1.Index = 6 Then
      rbvalueR.Value = True
      ShowMedPRN("Current")
    Else If TabStrip1.Index = 7 Then
      ShowMedFluids("Current")
    Else If TabStrip1.Index = 8 Then
      dtplan.Value = Now()
      lbldtplan.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), Now())
      ShowProblemList()
    Else If TabStrip1.Index = 9 Then
      dtmonitor.Value = Now()
      lbldtmonitor.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), dtmonitor.Value)
      If modBasic.$ItemListFormat = "GridView" Then
      Else
        cmbmonexam.List = modBasic.$ClinNursingComp
      Endif
      ShowMonitoring()
    Else If TabStrip1.Index = 10 Then
      cmbhepatic.List = ["Impaired", "Normal"]
      cmbhepatic.Text = modClinic.GetHepaticStatus(Trim(txtencid.Text))
      ShowSymptomData()
      PregnancySettings()
    Endif
  Endif

End

Public Sub Form_KeyRelease()

  If Key.Code = Key.F1 Then
    If txtencid.Text Then
      TabStrip1.Index = 0
      cmbsymptom.SetFocus
    Endif
  Else If Key.Code = Key.F2 Then
    If txtencid.Text Then
      TabStrip1.Index = 1
      cmbfinding.SetFocus
    Endif
  Else If Key.Code = Key.F3 Then
    TabStrip1.Index = 2
    dtfluid.SetFocus
  Else If Key.Code = Key.F4 Then
    TabStrip1.Index = 3
    lstfinding.SetFocus
  Else If Key.Code = Key.F5 Then
    TabStrip1.Index = 4
    cmbnote.SetFocus
  Else If Key.Code = Key.F6 Then
    TabStrip1.Index = 5
  Else If Key.Code = Key.F7 Then
    TabStrip1.Index = 6
  Else If Key.Code = Key.F8 Then
    TabStrip1.Index = 7
  Else If Key.Code = Key.F9 Then
    TabStrip1.Index = 8
    txtproblem.SetFocus
  Else If Key.Code = Key.F10 Then
    TabStrip1.Index = 9
  Else If Key.Code = Key.F11 Then
    btnlabs_Click()
  Else If Key.Code = Key.F12 Then
    btnpharm_Click()
  Else If Key.Code = Key["O"] And If Key.Control Then
    btnwebcam_Click()
  Else If Key.Code = Key["F"] And If Key.Control Then
    txtencid.Text = GetEncid()
  Else If Key.Code = Key["X"] And If Key.Control Then
    Me.Close()
  Else
    modGeneralmain.GoToNextControlTab()
  Endif

End

'''-------------------------------- Findings----------------------------------------------------------------------
Public Sub mnuchartlab_Click()

  Dim hForm As FmClinChart

  hForm = New FmClinChart("Test", lstfinding.Text, Trim(txtencid.Text), modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
  modWorkSpace.Add(hForm)

End

Public Sub lstfinding_Menu()

  mnuhiddenlab.Popup

End

Public Sub lstfinding_Click()

  ShowLabtable(Trim(txtencid.Text), lstfinding.Text)

End

Public Sub lstfinding_Select()

  ShowLabtable(Trim(txtencid.Text), lstfinding.Text)

End

Private Sub ShowLabtable(encid As String, sTest As String)

  Dim sql As String

  sql = "select fldid,fldsampletype,fldtestid,fldstatus,fldsave_report,fldabnormal,fldid,fldtime_sample,fldtime_report,fldtest_type from " & $tblpatlabtest & " where fldencounterval=&1 and fldtestid like &2 and (fldstatus=&3 or fldstatus=&4) and flvisible=&5"
  $rData = modDatabase.$myConn.Exec(sql, encid, sTest, "Reported", "Verified", "Visible")
  $aMyFields = New String[]
  modGridView.ReadSmallData(grdfinding, $rData, $aMyFields)
  With grdfinding
    .Columns[0].Width = 1
    .Columns[1].Width = 100 * modBasic.$AppWidthRatio
    .Columns[2].Width = 200 * modBasic.$AppWidthRatio
    .Columns[3].Width = 75 * modBasic.$AppWidthRatio
    .Columns[4].Width = 1
    .Columns[5].Width = 25 * modBasic.$AppWidthRatio
    .Columns[6].Width = 250 * modBasic.$AppWidthRatio
    .Columns[7].Width = 150 * modBasic.$AppWidthRatio
    .Columns[8].Width = 150 * modBasic.$AppWidthRatio
    .Columns[9].Width = 1

    .Columns[1].Text = "Specimen"
    .Columns[2].Text = "Test Name"
    .Columns[3].Text = "Status"
    .Columns[6].Text = "Observation"
    .Columns[7].Text = "Sample Time"
    .Columns[8].Text = "Report Time"

  End With

End

Public Sub grdfinding_Data(Row As Integer, Column As Integer)

  $rData.MoveTo(Row)
  modGeneralMain.GridViewDecoration(grdfinding, Row)
  If Column = 5 Then
    grdfinding.Data.Picture = Picture[modMisc.GetGridIcon($rData[$aMyFields[Column]])]
    grdfinding.Data.Text = ""
  Else If Column = 6 Then
    grdfinding.Data.RichText = modLabTest.GetLabTestValueSubString($rData["fldid"], LabUnitForm(), True, $tblpatlabtest, $tblpatlabsubtest)
    If modBasic.$RichtextResizeRow = "Yes" Then
      grdfinding.Rows[Row].Height = Max(grdfinding.Rows[Row].Height, grdfinding.Data.Font.RichTextHeight(grdfinding.Data.RichText, grdfinding.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (grdfinding.Rows.Height - grdfinding.Font.Height))
    Endif
  Else If Column = 7 Then
    grdfinding.Data.Text = modReportVar.GetDateTimeReport($rData["fldtime_sample"], gb.GeneralDate)
  Else If Column = 8 Then
    grdfinding.Data.Text = modReportVar.GetDateTimeReport($rData["fldtime_report"], gb.GeneralDate)
  Else
    grdfinding.Data.Text = $rData[$aMyFields[Column]]
  Endif
  grdfinding.Data.WordWrap = True

End

Public Sub grdfinding_Click()

  Dim xx As String

  If grdfinding.Column = 6 Then
    ' If rbqualifinding.Value = True Then
    xx = GetRichTextArea(grdfinding[grdfinding.Row, 2].RichText, grdfinding[grdfinding.Row, 6].RichText)
    ' Endif
  Endif

End

Public Sub grdfinding_Menu()

  mnuhidetest.Popup

End

Public Sub mnuaddtestrepo_Click()

  If grdfinding.Rows.Selection.Count Then
    If modBasic.$SHowDayDiagnosticReport = "Yes" Then
      $NotesList.Add("[" & grdfinding[grdfinding.Row, 7].Text & "] " & grdfinding[grdfinding.Row, 2].Text & " : " & grdfinding[grdfinding.Row, 6].RichText)
    Else
      $NotesList.Add(grdfinding[grdfinding.Row, 2].Text & " : " & grdfinding[grdfinding.Row, 6].RichText)
    Endif
  Endif

End

Public Sub mnutestimage_Click()

  Dim xPath As String

  If grdfinding.Rows.Selection.Count > 0 Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatientLaboratoryImage(grdfinding[grdfinding.Row, 0].Text, Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuevidence_Click()

  Dim xx As String

  If grdfinding.Rows.Selection.Count > 0 Then
    If modBasic.$EBMDiagno = "Yes" Then
      If Not $EBMDiagnosis Then
        If Message.Question(("No Diagnosis selected. Do you want to proceed?"), ("No"), ("Yes")) = 2 Then
          Inc Application.Busy
          xx = modLabTest.GetStatLabReport(grdfinding[grdfinding.Row, 0].Text, LabUnitForm(), "")
          Dec Application.Busy
        Else
          xx = ""
        Endif
      Else
        Inc Application.Busy
        xx = modLabTest.GetStatLabReport(grdfinding[grdfinding.Row, 0].Text, LabUnitForm(), $EBMDiagnosis)
        Dec Application.Busy
      Endif
    Else
      Inc Application.Busy
      xx = modLabTest.GetStatLabReport(grdfinding[grdfinding.Row, 0].Text, LabUnitForm(), "")
      Dec Application.Busy
    Endif

    If xx Then
      Message.Title = "Evidence"
      Message.Info("[" & grdfinding[grdfinding.Row, 2].Text & "]" & gb.NewLine & xx, ("OK"))
    Endif
  Endif

End

''------------------------------------- chief symptom ------------------------------------------------------
Public Sub btnaddsymplist_Click()

  Dim xlist As String[]
  Dim aList As String[]
  Dim xitem As String
  Dim hForm As FmMultiComplaints

  If modBasic.$SelectMultiSymptoms = "Yes" Then
    xlist = modBasic.$ClinComplaintComp
    If xlist.Count Then
      aList = GridListView("Select Presenting Complaints", xlist, Panel9, grdchiefsymptom.Height + cmbsymptom.Height + Label29.Height + txtadmitcause.Height)
      If aList And If aList.Count Then
        For Each xitem In aList
          modPatientGeneral.AddExamGeneralQualiQuantiData(Trim(txtencid.Text), "Presenting Symptoms", xitem, "", 0, "")
        Next
        ShowChiefSymptomData()
      Endif
    Endif

  Else
    hForm = New FmMultiComplaints(Trim(txtencid.Text))
    hForm.ShowModal()
    ShowChiefSymptomData()
  Endif

End

Public Sub cmbsymptom_GotFocus()

  Dim xlist As String[]

  txtsympval.Value = 0
  txtsympval.Tag = ""
  If modBasic.$ItemListFormat = "GridView" Then
    If modBasic.$ClinCategoryGrid = "Yes" Then
      xlist = modBasic.$ClinComplaintCompGrouped
      If xlist.Count Then
        cmbsymptom.Text = GridViewGroup("Select Presenting Complaints", xlist, modMisc.LockBoolean(modBasic.$LockSymptomList), Panel9, grdchiefsymptom.Height + cmbsymptom.Height)
        txtsympval.SetFocus
      Endif
    Else
      xlist = modBasic.$ClinComplaintComp
      If xlist.Count Then
        cmbsymptom.Text = GridViewNew("Select Presenting Complaints", xlist, modMisc.LockBoolean(modBasic.$LockSymptomList), Panel9, grdchiefsymptom.Height + cmbsymptom.Height)
        txtsympval.SetFocus
      Endif
    Endif
  Endif

End

Public Sub cmbsymptom_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbsymptom)
  If modBasic.$LockSymptomList = "No" Then
  Else
    modFillContainer.RestrictComboToContent(cmbsymptom)
  Endif

End

Public Sub cmbsymdura_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbsymdura)
  ' modFillContainer.RestrictComboToContent(cmbsymdura)

End

Public Sub cmbsympunit_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbsympunit)
  modFillContainer.RestrictComboToContent(cmbsympunit)

End

Public Sub txtsympval_GotFocus()

  If modBasic.$TabletModeEnable = "Yes" Then
    If cmbsymptom.Text Then
      pnlquantisyn.Visible = True
    Endif
  Endif
  txtsympval.SelectAll

End

Public Sub cmbsympunit_GotFocus()

  pnlquantisyn.Visible = False
  If modBasic.$TabletModeEnable = "Yes" Then
    If Not cmbsympunit.Text Then
      cmbsympunit.Popup
    Endif
  Endif

End

Public Sub cmbsymdura_GotFocus()

  If modBasic.$TabletModeEnable = "Yes" Then
    If Not cmbsymdura.Text Then
      cmbsymdura.Popup
    Endif
  Endif

End

Public Sub btnsympadd_Click()

  Dim xhour As Float

  If txtencid.Text Then
    pnlquantisyn.Visible = False
    If cmbsymptom.Text Then
      If cmbsympunit.Text Then
        xhour = txtsympval.Value * modDate.GetHoursValue(cmbsympunit.Text)
      Endif
      modPatientGeneral.AddExamGeneralQualiQuantiData(Trim(txtencid.Text), "Presenting Symptoms", cmbsymptom.Text, cmbsymdura.Text, xhour, "")
      ShowChiefSymptomData()
      cmbsymptom.Text = ""
      cmbsymdura.Text = ""
      cmbsympunit.Text = ""
      txtsympval.Value = 0
      txtsympval.Tag = ""
    Endif
  Endif

End

Public Sub btnsympadd_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    btnsympadd_Click()
    cmbsymptom.SetFocus
  Endif

End

Public Sub ShowChiefSymptomData()

  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  sql = "select fldid,fldencounterval,fldtype,flditem,fldreportquanti,fldreportquali,fldid,fldid,fldtime,flddetail,fldreportquanti from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldsave=&3"
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Presenting Symptoms", True)
  grdchiefsymptom.Clear
  grdchiefsymptom.Columns.Count = res.Fields.Count
  grdchiefsymptom.Rows.Count = res.Count

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdchiefsymptom, res.Index, Column)
      If Column = 8 Then
        grdchiefsymptom[res.Index, Column].Text = modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate)
      Else If Column = 7 Then
        grdchiefsymptom[res.Index, Column].Picture = Picture["icon:/small/edit"]
        grdchiefsymptom[res.Index, Column].Text = ""
      Else If Column = 6 Then
        grdchiefsymptom[res.Index, Column].Picture = Picture["icon:/small/cancel"]
        grdchiefsymptom[res.Index, Column].Text = ""
      Else If Column = 4 Then
        grdchiefsymptom[res.Index, Column].Text = modDate.ConvertHoursToString(res[fld.Name])
      Else
        grdchiefsymptom[res.Index, Column].Text = res[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  grdchiefsymptom.Row = 0

  With grdchiefsymptom
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 1
    .Columns[2].Width = 1
    .Columns[3].Width = 200 * modBasic.$AppWidthRatio
    .Columns[4].Width = 75 * modBasic.$AppWidthRatio
    .Columns[5].Width = 75 * modBasic.$AppWidthRatio
    .Columns[6].Width = 25 * modBasic.$AppWidthRatio
    .Columns[7].Width = 25 * modBasic.$AppWidthRatio
    .Columns[8].Width = 150 * modBasic.$AppWidthRatio
    .Columns[9].Width = 1
    .Columns[10].Width = 1

    .Columns[3].Text = "Symptom"
    .Columns[4].Text = "Dura"
    .Columns[5].Text = "Side"
    .Columns[8].Text = "DateTime"
  End With

End

Public Sub grdchiefsymptom_Click()

  Dim xval As String
  Dim yval As Float
  Dim res As Result
  Dim yqualival As Variant[]

  pnlquantisyn.Visible = False
  If grdchiefsymptom.Column = 5 Then
    xval = InputCombo("Select Unit of Symptom", grdchiefsymptom[grdchiefsymptom.Row, 1].Text, cmbsymdura.List, grdchiefsymptom[grdchiefsymptom.Row, 5].Text, True)
    If xval Then
      res = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", grdchiefsymptom[grdchiefsymptom.Row, 0].Text)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldreportquali"] = xval
        res["flduptime"] = Now()
        res["flduserid"] = modBasic.$lbluser
        res["xyz"] = False
        res.Update()
        ShowChiefSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif

  Else If grdchiefsymptom.Column = 4 Then
    yval = InputHours("Select duration of Symptom", grdchiefsymptom[grdchiefsymptom.Row, 1].Text, grdchiefsymptom[grdchiefsymptom.Row, 10].Text)
    res = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", grdchiefsymptom[grdchiefsymptom.Row, 0].Text)
    If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
      res["fldreportquanti"] = yval
      res["flduptime"] = Now()
      res["flduserid"] = modBasic.$lbluser
      res["xyz"] = False
      res.Update()
      ShowChiefSymptomData()
    Else
      Message.Warning("Authorization with " & res["flduserid"], ("OK"))
    Endif

  Else If grdchiefsymptom.Column = 6 Then
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", grdchiefsymptom[grdchiefsymptom.Row, 0].Text)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        ShowChiefSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif

  Else If grdchiefsymptom.Column = 7 Then
    yqualival = GetQualiValues(grdchiefsymptom[grdchiefsymptom.Row, 3].Text, grdchiefsymptom[grdchiefsymptom.Row, 9].Text, "")
    If yqualival Then
      res = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", grdchiefsymptom[grdchiefsymptom.Row, 0].Text)                            ''"
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["flddetail"] = yqualival[0]
        res["flduptime"] = Now()
        res["flduserid"] = modBasic.$lbluser
        res["xyz"] = False
        res.Update()
        ShowChiefSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif

  Endif

End

''------------------------------- findings ---------------------------------------------
Public Sub btnvital_Click()

  Dim hForm As FmVItalMobile

  If txtencid.Text Then
    hForm = New FmVItalMobile(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub cmbfinding_GotFocus()

  Dim xlist As String[]

  txtfinding.Enabled = True
  txtfinding.Clear()
  txtfinding.Text = ""
  txtfinval.Enabled = True
  txtfinval.Value = 0
  txtfinval.Tag = ""
  If modBasic.$ItemListFormat = "GridView" Then
    If modBasic.$ClinCategoryGrid = "Yes" Then
      xlist = modBasic.$ClinFindingCompGrouped
      If xlist.Count Then
        cmbfinding.Text = GridViewGroup("Select Clinical Findings", xlist, modMisc.LockBoolean(modBasic.$LockExamList), Panel78, GridView1.Height + cmbfinding.Height)
        txtfinding.SetFocus
      Endif
    Else
      xlist = modBasic.$ClinFindingComp
      If xlist.Count Then
        cmbfinding.Text = GridViewNew("Select Clinical Findings", xlist, modMisc.LockBoolean(modBasic.$LockExamList), Panel78, GridView1.Height + cmbfinding.Height)
        txtfinding.SetFocus
      Endif
    Endif
  Endif

End

Public Sub cmbfinding_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbfinding)
  If modBasic.$LockExamList = "No" Then
  Else
    modFillContainer.RestrictComboToContent(cmbfinding)
  Endif

End

Public Sub txtfinding_GotFocus()

  Dim sType As String
  Dim xlimit As Float[]
  Dim xType As String
  Dim xscle As String[]
  Dim yqualival As Variant[]

  txtfindmax.Value = 0
  txtfindmin.Value = 0
  sType = modFixClinic.GetExaminationType(cmbfinding.Text)
  If sType = "Qualitative" Then
    txtfinval.Enabled = False
    txtfinding.Enabled = True
    pnlquantiexam.Visible = False
    If Not txtfinding.Text Then
      If cmbfinding.Text Then
        If modBasic.$DisplayExamOption = "No" Then
          If modBasic.$DisplayQualiArea = "Yes" Then
            txtfinding.Text = GetTextArea(cmbfinding.Text, "")
          Endif
        Else
          xType = modFixClinic.GetExamtOptionType(cmbfinding.Text)
          If xType = "Single Selection" Or If xType = "Dichotomous" Then
            txtfinding.List = modAllExam.SelectExamOptionList("Exam", cmbfinding.Text)
            If modBasic.$TabletModeEnable = "Yes" Then
              txtfinding.Popup()
            Endif
          Else If xType = "Clinical Scale" Then
            xscle = modExamOption.GetClinScalePopUp("Exam", cmbfinding.Text)
            If xscle Then
              txtfinval.Value = CFloat(xscle[0])
              txtfinding.Text = xscle[1]
              txtfinding.Enabled = False
            Endif
          Else If xType = "Left and Right" Then
            yqualival = CLeftRight(cmbfinding.Text, "", modFixClinic.GetLeftRightMainHeader("Exam", cmbfinding.Text))
            If yqualival Then
              txtfinding.Text = yqualival[0]
              txtfinding.Enabled = False
            Endif
          Else If xType = "Visual Input" Then
            txtfinding.Text = modExamOption.GetVisualDataExamVal(cmbfinding.Text)
          Else If xType = "Date Time" Then
            txtfinding.Text = modDate.DateStringForExam(GetDateValue(cmbfinding.Text, "Date Value", Now()))
            txtfinding.Enabled = False
          Else If xType = "BS Date" Then
            txtfinding.Text = modDate.ConvertToLocaldate(GetDateValue(cmbfinding.Text, "Date Value", Now()))
            txtfinding.Enabled = False
          Else
            If modBasic.$DisplayQualiArea = "Yes" Then
              txtfinding.Text = GetTextArea(cmbfinding.Text, "")
            Endif
          Endif
        Endif
      Endif
    Endif

  Else If sType = "Quantitative" Then
    xlimit = modClinic.GetBothQuantiExamVal(cmbfinding.Text, Trim(txtencid.Text))
    txtfindmin.Value = xlimit[0]
    txtfindmax.Value = xlimit[1]
    txtfinval.Enabled = True
    txtfinding.Enabled = False
    If modBasic.$TabletModeEnable = "Yes" Then
      If cmbfinding.Text Then
        pnlquantiexam.Visible = True
      Endif
    Endif
    txtfinval.SetFocus
  Else    ''is it good to allow items not in list?
    txtfinval.Enabled = False
    txtfinding.Enabled = True
    pnlquantiexam.Visible = False
  Endif

End

Public Sub btnfinadd_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    btnfinadd_Click()
    cmbfinding.SetFocus
  Endif

End

Public Sub btnallexam_Click()

  FillExamtable()

End

Public Sub btnaddexamlistmain_Click()

  Dim hForm As FmEnterGroupExam

  If txtencid.Text Then
    hForm = New FmEnterGroupExam(Trim(txtencid.Text), "Physician Examinations", "Group")
    hForm.ShowModal
    FillExamtable()
  Endif

End

Public Sub btnaddexamlistmainall_Click()

  Dim hForm As FmEnterGroupExam

  If txtencid.Text Then
    hForm = New FmEnterGroupExam(Trim(txtencid.Text), "Physician Examinations", "All")
    hForm.ShowModal
    FillExamtable()
  Endif

End

Public Sub btnaddscales_Click()

  Dim hForm As FmEnterGroupExam

  If txtencid.Text Then
    hForm = New FmEnterGroupExam(Trim(txtencid.Text), "Physician Examinations", "Scales")
    hForm.ShowModal
    FillExamtable()
  Endif

End

Public Sub btnfinadd_Click()

  Dim sType As String
  Dim abn As Boolean
  Dim xsys As String
  Dim OptionType As String
  Dim hForm As CGetExamParam

  If txtencid.Text Then
    If cmbfinding.Text Then
      hForm = New CGetExamParam(cmbfinding.Text, "Exam")
      sType = hForm.GetExamDataType()
      xsys = hForm.GetExamConstant()
      OptionType = hForm.GetExamOption()

      If sType = "Quantitative" Then
        pnlquantiexam.Visible = False
        If txtfindmin.Value > txtfinval.Value Or If txtfindmax.Value < txtfinval.Value Then
          abn = True
        Else
          abn = False
        Endif
        modClinSub.AddQuantiData(Trim(txtencid.Text), "", cmbfinding.Text, OptionType, txtfinval.Value, abn, "Physician Examinations", xsys)
      Else
        modClinSub.AddClinicExam(Trim(txtencid.Text), "", cmbfinding.Text, OptionType, txtfinding.Text, txtfinval.Value, False, "Physician Examinations", xsys, "Regular")
      Endif
      FillExamtable()
      cmbfinding.Text = ""
      txtfinding.Text = ""
      txtfinding.Clear()
      txtfinval.Value = 0
      txtfinval.Tag = ""
    Endif
  Endif

End

Public Sub FillExamtable()

  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  If btnallexam.Value = False Then
    res = modDatabase.$myConn.Exec("select fldid,fldtype,fldhead,fldabnormal,fldid,fldid,fldtime,fldencounterval,flduserid,fldcomp from tblpatientexam where fldencounterval=&1 and fldinput=&2 and fldsave=&3 and fldtime>=&4 and fldtime<=&5", Trim(txtencid.Text), "Physician Examinations", True, modDate.StartSqlDate(dtfind.Value), modDate.EndSqlDate(dtfind.Value))
  Else
    res = modDatabase.$myConn.Exec("select fldid,fldtype,fldhead,fldabnormal,fldid,fldid,fldtime,fldencounterval,flduserid,fldcomp from tblpatientexam where fldencounterval=&1 and fldinput=&2 and fldsave=&3", Trim(txtencid.Text), "Physician Examinations", True)
  Endif
  GridView1.Clear
  GridView1.Columns.Count = res.Fields.Count
  GridView1.Rows.Count = res.Count

  With GridView1
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 1
    .Columns[2].Width = 225 * modBasic.$AppWidthRatio
    .Columns[3].Width = 25 * modBasic.$AppWidthRatio
    .Columns[4].Width = 250 * modBasic.$AppWidthRatio
    .Columns[5].Width = 25 * modBasic.$AppWidthRatio
    .Columns[6].Width = 150 * modBasic.$AppWidthRatio
    .Columns[7].Width = 1
    .Columns[8].Width = 100 * modBasic.$AppWidthRatio
    .Columns[9].Width = 100 * modBasic.$AppWidthRatio

    .Columns[2].Text = "Examination"
    .Columns[4].Text = "Observation"
    .Columns[6].Text = "DateTime"
    .Columns[8].Text = "UserID"
    .Columns[9].Text = "Location"
  End With

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(GridView1, res.Index, Column)
      If Column = 3 Then
        GridView1[res.Index, Column].Picture = Picture[modMisc.GetGridIcon(res[fld.Name])]
        GridView1[res.Index, Column].Text = ""
      Else If Column = 4 Then
        GridView1[res.Index, Column].RichText = modClinic.GetExamValueString(Trim(txtencid.Text), res["fldid"], False)
        If modBasic.$RichtextResizeRow = "Yes" Then
          GridView1.Rows[res.Index].Height = Max(GridView1.Rows[res.Index].Height, GridView1[res.Index, Column].Font.RichTextHeight(GridView1[res.Index, Column].RichText, GridView1.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView1.Rows.Height - GridView1.Font.Height))
        Endif
      Else If Column = 5 Then
        GridView1[res.Index, Column].Picture = Picture["icon:/small/cancel"]
        GridView1[res.Index, Column].Text = ""
      Else If Column = 6 Then
        GridView1[res.Index, Column].Text = modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate)
      Else If Column = 2 Then
        GridView1[res.Index, Column].Text = res[fld.Name]
        GridView1.Rows[res.Index].Height = Max(GridView1.Rows[res.Index].Height, GridView1[res.Index, Column].Font.RichTextHeight(GridView1[res.Index, Column].Text, GridView1.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (GridView1.Rows.Height - GridView1.Font.Height))
      Else
        GridView1[res.Index, Column].Text = res[fld.Name]
      Endif
      GridView1[res.Index, Column].WordWrap = True

      Column = Column + 1
    Next
  Next
  GridView1.Row = 0

End

Public Sub dtfind_Click()

  If txtencid.Text Then
    lbldtfind.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), dtfind.Value)
    FillExamtable()
  Endif

End

Public Sub GridView1_Menu()

  mnuhidefind.Popup

End

Public Sub mnievidexam_Click()

  ''exam evidence
  Dim xx As String

  If GridView1.Rows.Selection.Count > 0 Then
    If modBasic.$EBMDiagno = "Yes" Then
      If Not $EBMDiagnosis Then
        If Message.Question(("No Diagnosis selected. Do you want to proceed?"), ("No"), ("Yes")) = 2 Then
          Inc Application.Busy
          xx = modClinic.GetStatExamReport(GridView1[GridView1.Row, 0].Text)
          Dec Application.Busy
        Else
          xx = ""
        Endif
      Else
        Inc Application.Busy
        xx = modClinic.GetStatExamReport(GridView1[GridView1.Row, 0].Text, $EBMDiagnosis)
        Dec Application.Busy
      Endif
    Else
      Inc Application.Busy
      xx = modClinic.GetStatExamReport(GridView1[GridView1.Row, 0].Text)
      Dec Application.Busy
    Endif

    If xx Then
      Message.Title = "Evidence"
      Message.Info("[" & GridView1[GridView1.Row, 2].Text & "]" & gb.NewLine & xx, ("OK"))
    Endif
  Endif

End

Public Sub GridView1_Click()

  Dim hForm2 As FmEnterMultiple
  Dim hForm22 As FmEnterMultipleVer
  Dim hFormTwo As FmEnterMultipleTwo
  Dim res As Result
  Dim xData As Variant[]
  Dim Row As Integer
  Dim yyy As String[]
  Dim xx As String

  Dim xquantival As Variant[]
  Dim yqualival As Variant[]
  Dim xlimit As Float[]
  Dim xType As String
  Dim xdate As Date

  pnlquantiexam.Visible = False
  Row = GridView1.Row
  If GridView1.Column = 4 Then
    If GridView1[GridView1.Row, 1].Text = "Qualitative" Then
      xType = modFixClinic.GetExamtOptionType(GridView1[GridView1.Row, 2].Text)
      If modClinic.GetSubExamBool(GridView1[GridView1.Row, 0].Text, Trim(txtencid.Text)) = False Then
        If xType = "Fixed Components" Or If xType = "Left/Right Components" Then
          yyy = modFixClinic.GetSubExamArray(GridView1[GridView1.Row, 2].Text)    'modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldsubexam as col from tblexamquali where fldexamid=&1", GridView1[GridView1.Row, 2].Text))
          If yyy.Count Then
            modClinSub.InsertExamSubExam(GridView1[GridView1.Row, 7].Text, GridView1[GridView1.Row, 0].Text, GridView1[GridView1.Row, 2].Text, yyy)
          Endif
        Endif
      Endif

      res = modDatabase.$myConn.Exec("select fldid,fldsubtexam,fldreport,fldtanswertype,fldabnormal,fldindex from tblpatientsubexam where fldheadid=&1", GridView1[GridView1.Row, 0].Text)
      If res.Available = False Then
        If xType = "Clinical Scale" Then
          yqualival = modExamOption.GetClinScalePopUp("Exam", GridView1[GridView1.Row, 2].Text)
          If yqualival Then
            modClinSub.UpdateQualiQuantiData(GridView1[GridView1.Row, 0].Text, yqualival[1], CFloat(yqualival[0]), False)
          Endif
        Else If xType = "Left and Right" Then
          yqualival = CLeftRight(GridView1[GridView1.Row, 2].Text, GridView1[GridView1.Row, 4].RichText, modFixClinic.GetLeftRightMainHeader("Exam", GridView1[GridView1.Row, 2].Text))
          If yqualival Then
            modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, yqualival[0], yqualival[1], "")
          Endif
        Else If xType = "Date Time" Then
          xdate = GetDateValue(GridView1[GridView1.Row, 2].Text, ("Select Date Time"), Val(GridView1[GridView1.Row, 4].RichText))
          If xdate Then
            modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, modDate.DateStringForExam(xdate), False, "")
          Endif
        Else If xType = "BS Date" Then
          xdate = GetDateValue(GridView1[GridView1.Row, 2].Text, ("Select Date Time"), modDate.ConvertToEnglishdate(GridView1[GridView1.Row, 4].RichText))
          If xdate Then
            modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, modDate.ConvertToLocaldate(xdate), False, "")
          Endif
        Else If xType = "Qualitative" Then
          yqualival = GetQualiString(GridView1[GridView1.Row, 2].Text, GridView1[GridView1.Row, 4].RichText, "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, yqualival[0], yqualival[1])
          Endif
        Else If xType = "RichText Area" Then
          yqualival = GetQualiRich(GridView1[GridView1.Row, 2].Text, GridView1[GridView1.Row, 4].RichText, "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, yqualival[0], yqualival[1], yqualival[2])
          Endif
        Else
          yqualival = GetQualiValues(GridView1[GridView1.Row, 2].Text, GridView1[GridView1.Row, 4].RichText, "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData(GridView1[GridView1.Row, 0].Text, yqualival[0], yqualival[1], yqualival[2])
          Endif
        Endif

      Else If res.Available = True Then
        xData = New Variant[]
        For Each res
          xData.Add([res["fldsubtexam"], res["fldreport"], res["fldid"], res["fldtanswertype"], res["fldabnormal"], res["fldindex"]])
        Next
        xData.Add(["Final Impression", GridView1[GridView1.Row, 4].RichText, 0, "RichText Area", False, ""])
        If xType = "Left/Right Components" Then
          hFormTwo = New FmEnterMultipleTwo(GridView1[GridView1.Row, 0].Text, "Exam", GridView1[GridView1.Row, 2].Text, xData, "", "Current")
          hFormTwo.ShowModal
        Else
          If modBasic.$FactorForm = "Vertical" Then
            hForm22 = New FmEnterMultipleVer(GridView1[GridView1.Row, 0].Text, "Exam", GridView1[GridView1.Row, 2].Text, xData, "", "Current")
            hForm22.ShowModal
          Else
            hForm2 = New FmEnterMultiple(GridView1[GridView1.Row, 0].Text, "Exam", GridView1[GridView1.Row, 2].Text, xData, "", "Current")
            hForm2.ShowModal
          Endif
        Endif
      Endif

    Else If GridView1[GridView1.Row, 1].Text = "Quantitative" Then
      xlimit = modClinic.GetBothQuantiExamVal(GridView1[GridView1.Row, 2].Text, GridView1[GridView1.Row, 7].Text)
      xquantival = GetQuantiValues("Exam", Trim(txtencid.Text), GridView1[GridView1.Row, 2].Text, xlimit[0], xlimit[1], modClinic.GetExamValueByID(GridView1[GridView1.Row, 0].Text))                                       '
      If xquantival Then
        modClinSub.UpdateQuantiData(GridView1[GridView1.Row, 0].Text, xquantival[0], xquantival[1])
      Endif

    Endif
    FillExamtable()

  Else If GridView1.Column = 3 Then
    xx = InputCombo("Select Flag for observation", "Change Flag", ["Normal", "Abnormal"], modMisc.GetIconValue(GridView1[GridView1.Row, 3].Picture), True)
    If xx Then
      modClinSub.UpdateExamFlag(GridView1[GridView1.Row, 0].Text, xx)
      FillExamtable()
    Endif

  Else If GridView1.Column = 5 Then
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblpatientexam", "fldid=&1", GridView1[GridView1.Row, 0].Text)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        FillExamtable()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif

  Endif
  GridView1.Row = Row

End

''----------------------------------------------- history -------------------------------------------------------
Public Sub btnadmitcause_Click()

  Dim xboolean As Boolean

  If modBasic.$ClinHistoryInput = "Single" Then
    xboolean = True
  Else
    xboolean = False
  Endif

  If txtencid.Text Then
    If txtadmitcause.Text Then
      modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "History", "Cause of Admission", "", txtadmitcause.Text, xboolean)
      Balloon.Info(("Information saved"), btnadmitcause)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

Public Sub dcthelpcause_Click()

  Dim xx As String

  xx = GetTextArea("Cause of Admission", txtadmitcause.Text)
  If xx Then
    txtadmitcause.Text = xx
  Endif

End

Public Sub btntemplpcause_Click()

  txtadmitcause.Text = txtadmitcause.Text & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub btnhistorydef_Click()

  If txthistorylabel.Text Then
    txthistory.RichText = AddHistory("History", txthistorylabel.Text)
  Endif

End

Public Sub tlbtnhistory_Click()

  Dim xboolean As Boolean

  If modBasic.$ClinHistoryInput = "Single" Then
    xboolean = True
  Else
    xboolean = False
  Endif

  If txthistorylabel.Text Then
    If txthistory.Text Then
      If txthistorylabel.Text = "Initial Planning" Or If txthistorylabel.Text = "Final Planning" Then
        modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Notes", txthistorylabel.Text, txthistory.KeyList.Join(";"), txthistory.RichText, xboolean)
      Else
        modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "History", txthistorylabel.Text, txthistory.KeyList.Join(";"), txthistory.RichText, xboolean)
      Endif
      Balloon.Info(("Information saved"), tlbtnhistory)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

Public Sub txthistorylabel_Click()

  If txthistorylabel.Text Then
    If txthistorylabel.Text = "Initial Planning" Or If txthistorylabel.Text = "Final Planning" Then
      txthistory.RichText = modPatPatho.ShowSelectedNotes(Trim(txtencid.Text), txthistorylabel.Text)
    Else
      txthistory.RichText = modPatPatho.ShowSelectedHistoryValue(Trim(txtencid.Text), txthistorylabel.Text)
    Endif
  Endif

End

Public Sub dcthelphistory_Click()

  Dim xx As String

  xx = GetRichTextArea("History Notes", txthistory.RichText)
  If xx Then
    txthistory.RichText = xx
  Endif

End

Public Sub btntemplphistory_Click()

  txthistory.RichText = txthistory.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

'''------------------------------------------------- General parameters --------------------------------------------------------------------
''''hepatic
Public Sub tlbthepatic_Click()

  If txtencid.Text And If cmbhepatic.Text Then
    modClinSub.AddGeneralParametersQuali(Trim(txtencid.Text), "Hepatic Status", cmbhepatic.Text)
    Balloon.Info(("Information saved"), tlbthepatic)
    Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

'''pregnancy
Public Sub tlbtpregnancy_Click()

  If txtencid.Text And If cmbpregnancy.Text Then
    modClinSub.AddGeneralParametersQuali(Trim(txtencid.Text), "Pregnancy Status", cmbpregnancy.Text)
    Balloon.Info(("Information saved"), tlbtpregnancy)
    Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

''''''weight
Public Sub btnaddwt_Click()

  Dim xquantival As Variant[]

  If txtencid.Text Then
    xquantival = GetQuantiValues("Exam", Trim(txtencid.Text), "Body Weight", 0, 0, 0)
    If xquantival Then
      modClinSub.AddGeneralParametersQuanti(Trim(txtencid.Text), "Body Weight", xquantival[0])
      Balloon.Info(("Information saved"), btnaddwt)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
    WeightGrid()
  Endif

End

Public Sub grdwt_Click()

  Dim xquantival As Variant[]

  If grdwt.Column = 2 Then
    xquantival = GetQuantiValues("Exam", Trim(txtencid.Text), "Body Weight", 0, 0, grdwt[grdwt.Row, 2].Text)
    If xquantival Then
      modClinSub.UpdateQuantiData(grdwt[grdwt.Row, 0].Text, xquantival[0], False)
    Endif
  Endif

End

Public Sub WeightGrid()

  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  sql = "select fldid,fldtime,fldrepquanti from tblpatientexam where fldencounterval=&1 and fldhead=&2 and fldtype=&3 and fldsave=&4 ORDER BY fldid DESC"
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Body Weight", "Quantitative", True)

  grdwt.Clear
  grdwt.Columns.Count = res.Fields.Count
  grdwt.Rows.Count = res.Count

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdwt, res.Index, Column)
      If Column = 1 Then
        grdwt[res.Index, Column].Text = modPatient.GetDayTimeFromAdmission(Trim(txtencid.Text), res["fldtime"])
      Else
        grdwt[res.Index, Column].Text = res[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  grdwt.Row = 0

  With grdwt
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 100 * modBasic.$AppWidthRatio
    .Columns[2].Width = 50 * modBasic.$AppWidthRatio
    .Columns[1].Text = "DateTime"
    .Columns[2].Text = "Wt"
  End With

End

''------------------------------------------------------ fluid-------------------------------------------------------------------------
Public Sub btnaddinput_Click()

  Dim hForm As FmOralIntake

  If txtencid.Text Then
    hForm = New FmOralIntake(Trim(txtencid.Text))
    hForm.ShowModal
    ShowIntakeFoodGrid()
  Endif

End

Public Sub btaddoutput_Click()

  Dim hForm As FmClinOutValue

  If txtencid.Text Then
    hForm = New FmClinOutValue("Output Fluid", Trim(txtencid.Text), modBasic.$ClinBodyFluidAll, 0, "mL")
    hForm.ShowModal
    SHowOutputFluid()
  Endif

End

Private Sub ShowIntakeFoodGrid()

  If rbfood.Value = True Then
    ShowIntakeInFoodGrid()
  Else If rbmed.Value = True Then
    ShowIntakeMedGrid()
  Endif

End

Public Sub ShowIntakeInFoodGrid()

  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  If btnallinout.Value = False Then
    res = modDatabase.$myConn.Exec("select fldid,fldencounterval,fldtype,flditem,fldreportquanti,fldid,fldid,fldtime from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldtime>=&3 and fldtime<=&4 and fldsave=&5", Trim(txtencid.Text), "Input Food/Fluid", modDate.StartSqlDate(dtfluid.Value), modDate.EndSqlDate(dtfluid.Value), True)
  Else
    res = modDatabase.$myConn.Exec("select fldid,fldencounterval,fldtype,flditem,fldreportquanti,fldid,fldid,fldtime from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldsave=&3", Trim(txtencid.Text), "Input Food/Fluid", True)
  Endif

  grdintake.Clear
  grdintake.Columns.Count = res.Fields.Count
  grdintake.Rows.Count = res.Count

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdintake, res.Index, Column)
      If Column = 7 Then
        grdintake[res.Index, Column].Text = modPatient.GetDayTimeFromAdmission(Trim(txtencid.Text), res["fldtime"])
      Else If Column = 5 Then
        grdintake[res.Index, Column].Text = modPatPatho.GetTotalCoponentFood(res["fldid"], "fldfluid")
      Else If Column = 6 Then
        grdintake[res.Index, Column].Text = modPatPatho.GetTotalCoponentFood(res["fldid"], "fldenergy")
      Else
        grdintake[res.Index, Column].Text = res[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  grdintake.Row = 0
  ResizeInputGrid()

End

Public Sub ShowIntakeMedGrid()

  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  If btnallinout.Value = False Then
    res = modDatabase.$myConn.Exec("select fldid,fldencounterval,flddoseno,flddoseno,fldvalue,fldid,fldid,fldtime from tblnurdosing where fldencounterval=&1 and fldsave=&2 and fldtime>=&3 and fldtime<=&4 and flddoseno in(select fldid from tblpatdosing where fldroute=&5 or fldroute=&6 or fldroute=&7)", Trim(txtencid.Text), True, modDate.StartSqlDate(dtfluid.Value), modDate.EndSqlDate(dtfluid.Value), "fluid", "IIV", "CIV")                                                     ''
  Else
    res = modDatabase.$myConn.Exec("select fldid,fldencounterval,flddoseno,flddoseno,fldvalue,fldid,fldid,fldtime from tblnurdosing where fldencounterval=&1 and fldsave=&2 and flddoseno in(select fldid from tblpatdosing where fldroute=&3 or fldroute=&4 or fldroute=&5)", Trim(txtencid.Text), True, "fluid", "IIV", "CIV")
  Endif

  grdintake.Clear
  grdintake.Columns.Count = res.Fields.Count
  grdintake.Rows.Count = res.Count

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdintake, res.Index, Column)
      If Column = 7 Then
        grdintake[res.Index, Column].Text = modPatient.GetDayTimeFromAdmission(Trim(txtencid.Text), res["fldtime"])
      Else If Column = 3 Then
        grdintake[res.Index, Column].Text = modPharmacy.GetStockIDFromDosing(res["flddoseno"])
      Else If Column = 5 Then
        grdintake[res.Index, Column].Text = modPharmacy.GetTotalFluidMedicine(res["fldid"])
      Else If Column = 6 Then
        grdintake[res.Index, Column].Text = 0
      Else
        grdintake[res.Index, Column].Text = res[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  grdintake.Row = 0
  ResizeInputGrid()

End

Private Sub ResizeInputGrid()

  With grdintake
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 1
    .Columns[2].Width = 1
    .Columns[3].Width = 200 * modBasic.$AppWidthRatio
    .Columns[4].Width = 75 * modBasic.$AppWidthRatio
    .Columns[5].Width = 75 * modBasic.$AppWidthRatio ''for fluid
    .Columns[6].Width = 75 * modBasic.$AppWidthRatio ''for calorie
    .Columns[7].Width = 150 * modBasic.$AppWidthRatio

    .Columns[3].Text = "Intake"
    .Columns[4].Text = "Dose/Rate"
    .Columns[5].Text = "Fluid(mL)"
    .Columns[6].Text = "Energy(kCal)"
    .Columns[7].Text = "Time"
  End With

End

Public Sub tblfluidcalc_Click()

  txtinfluid.Value = Round(modGridView.SumGridAmountt(grdintake, 5), -3)
  txtincalori.Value = Round(modGridView.SumGridAmountt(grdintake, 6), -3)

End

Public Sub dtfluid_Click()

  If txtencid.Text Then
    lbldtfluid.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), dtfluid.Value)
    ShowIntakeFoodGrid()
    SHowOutputFluid()
  Endif

End

Public Sub btnallinout_Click()

  ShowIntakeFoodGrid()
  SHowOutputFluid()

End

Public Sub rbfood_Click()

  If txtencid.Text Then
    ShowIntakeFoodGrid()
  Endif

End

Public Sub rbmed_Click()

  If txtencid.Text Then
    ShowIntakeMedGrid()
  Endif

End

Public Sub SHowOutputFluid()

  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  If btnallinout.Value = False Then
    sql = "select fldid,fldencounterval,fldtype,flditem,fldreportquanti,fldtime from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldtime>=&3 and fldtime<=&4"
  Else
    sql = "select fldid,fldencounterval,fldtype,flditem,fldreportquanti,fldtime from tblexamgeneral where fldencounterval=&1 and fldinput=&2"
  Endif
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Output Fluid", modDate.StartSqlDate(dtfluid.Value), modDate.EndSqlDate(dtfluid.Value))

  grdoutput.Clear
  grdoutput.Columns.Count = res.Fields.Count
  grdoutput.Rows.Count = res.Count

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdoutput, res.Index, Column)
      If Column = 5 Then
        grdoutput[res.Index, Column].Text = modPatient.GetDayTimeFromAdmission(Trim(txtencid.Text), res["fldtime"])
      Else
        grdoutput[res.Index, Column].Text = res[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  grdoutput.Row = 0

  With grdoutput
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 1
    .Columns[2].Width = 1
    .Columns[3].Width = 135 * modBasic.$AppWidthRatio
    .Columns[4].Width = 75 * modBasic.$AppWidthRatio
    .Columns[5].Width = 150 * modBasic.$AppWidthRatio
    .Columns[3].Text = "Output"
    .Columns[4].Text = "Vol(mL)"
    .Columns[5].Text = "Time"
  End With
  txtoutfluid.Value = modGridView.SumGridAmountt(grdoutput, 4)

End

Public Sub grdintake_Click()

  Dim yval As Float

  yval = InputValue(grdintake[grdintake.Row, 3].Text, ("Edit Intake Value"), grdintake[grdintake.Row, 4].Text)
  If yval Then
    modPatientGeneral.UpdateExamGeneralQuantiData(grdintake[grdintake.Row, 0].Text, grdintake[grdintake.Row, 3].Text, yval, "")
    ShowIntakeFoodGrid()
  Endif

End

Public Sub grdoutput_Click()

  Dim yval As Float

  yval = InputValue(grdoutput[grdoutput.Row, 3].Text, ("Edit Output Value"), grdoutput[grdoutput.Row, 4].Text)
  If yval Then
    modPatientGeneral.UpdateExamGeneralQuantiData(grdoutput[grdoutput.Row, 0].Text, grdoutput[grdoutput.Row, 3].Text, yval, "")
    SHowOutputFluid()
  Endif

End

''---------------------------------------------------------- notes ------------------------------------------------------------
Public Sub btnnotedef_Click()

  If cmbnote.Text Then
    txtnote.RichText = AddHistory("Discharge", cmbnote.Text)
  Endif

End

Public Sub btnoteadd_Click()

  If txtencid.Text Then
    If cmbnote.Text Then
      If cmbnote.Text = "Patient Note" Then
      Else
        If txtnote.Text Then
          modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Notes", cmbnote.Text, txtimpression.Text, txtnote.RichText, False)
          ShowNoteTypeTime()
          Balloon.Info(("Information saved"), btnoteadd)
          Balloon.Delay = modBasic.$BalloonDelay
          txtnote.RichText = ""
          txtimpression.Text = ""
        Endif
      Endif
    Endif
  Endif

End

Public Sub btnaddnotes_Click()

  txtnote.RichText = $NotesList.Join(gb.NewLine)
  $NotesList = New String[]

End

Public Sub dcthelpnote_Click()

  Dim xx As String

  xx = GetRichTextArea("Clinical Note", txtnote.RichText)
  If xx Then
    txtnote.RichText = xx
  Endif

End

Public Sub btntemplhelpnote_Click()

  txtnote.RichText = txtnote.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Private Sub ShowNoteTypeTime()

  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result
  Dim i As Integer
  Dim sTypLst As String[]

  If cmbnotetype.Text = "All Types" Then
    sTypLst = NoteTakingTypeList()
  Else
    sTypLst = [cmbnotetype.Text]
  Endif
  For i = 0 To sTypLst.Count - 1
    sTypLst[i] = "'" & sTypLst[i] & "'"
  Next

  If btnallnote.Value = False Then
    sql = "select fldid,fldtime,flditem,flduserid,fldreportquali from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem in(" & sTypLst.Join(",") & ") and fldtime>=&3 and fldtime<=&4"
  Else
    sql = "select fldid,fldtime,flditem,flduserid,fldreportquali from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem in(" & sTypLst.Join(",") & ")"
  Endif
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Notes", modDate.StartSqlDate(dtnote.Value), modDate.EndSqlDate(dtnote.Value))

  grdnote.Clear
  grdnote.Columns.Count = res.Fields.Count
  grdnote.Rows.Count = res.Count

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdnote, res.Index, Column)

      If $sTatus = "Admitted" Then
        If Column = 1 Then
          grdnote[res.Index, Column].Text = modPatient.GetDayTimeFromAdmission(Trim(txtencid.Text), res["fldtime"])
        Else If Column = 2 Then
          grdnote[res.Index, Column].Text = Trim(Replace(res[fld.Name], "Note", ""))
        Else
          grdnote[res.Index, Column].Text = res[fld.Name]
        Endif

      Else
        grdnote[res.Index, Column].Text = res[fld.Name]
      Endif

      Column = Column + 1
    Next
  Next
  grdnote.Row = 0

  With grdnote
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    If $sTatus = "Admitted" Then
      .Columns[1].Width = 100 * modBasic.$AppWidthRatio
      .Columns[2].Width = 100 * modBasic.$AppWidthRatio
      .Columns[1].Text = "DateTime"
    Else
      .Columns[1].Width = 1
      .Columns[2].Width = 200 * modBasic.$AppWidthRatio
    Endif
    .Columns[3].Width = 75 * modBasic.$AppWidthRatio
    .Columns[4].Width = 200 * modBasic.$AppWidthRatio

    .Columns[2].Text = "Category"
    .Columns[3].Text = "User"
    .Columns[4].Text = "Impression"
  End With

End

Public Sub cmbnote_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbnote)
  modFillContainer.RestrictComboToContent(cmbnote)

End

Public Sub cmbnote_Click()

  txtnote.Text = ""
  btnoteadd.Enabled = True

End

Public Sub grdnote_Click()

  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldid,flditem,fldreportquali,flddetail from tblexamgeneral where fldid=&1", grdnote[grdnote.Row, 0].Text)
  If res.Available Then
    cmbnote.Text = res["flditem"]
    txtnoteid.Value = res["fldid"]
    txtimpression.Text = res["fldreportquali"]
    txtnote.RichText = res["flddetail"]
    If $sTatus = "Admitted" Then
      btnoteadd.Enabled = True
    Else
      btnoteadd.Enabled = False
    Endif
  Else
    btnoteadd.Enabled = True
  Endif

End

Public Sub dtnote_Click()

  If txtencid.Text Then
    lbldtnote.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), dtnote.Value)
    ShowNoteTypeTime()
  Endif

End

Public Sub btnallnote_Click()

  If txtencid.Text Then
    ShowNoteTypeTime()
  Endif

End

Public Sub btnnoteshow_Click()

  If txtencid.Text Then
    ShowNoteTypeTime()
  Endif

End

Public Sub btnotedit_Click()

  If txtnoteid.Value Then
    modPatientGeneral.UpdateExamGeneralQualiData(txtnoteid.Value, cmbnote.Text, txtimpression.Text, txtnote.RichText)
    ShowNoteTypeTime()
    Balloon.Info(("Information saved"), btnotedit)
    Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub tbtnfollowcalen_Click()

  Dim res As Result
  Dim dt As Date

  If txtencid.Text Then
    dt = CTimeConsult("Follow Up", modPatient.GetFollowUpDate(Trim(txtencid.Text)))
    If dt Then
      res = modDatabase.$myConn.Edit("tblencounter", "fldencounterval=&1", Trim(txtencid.Text))
      res["fldfollowdate"] = dt
      res["xyz"] = False
      res.Update
      Balloon.Info(("Information saved"), tbtnfollowcalen)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

''----------------------------------------------------- planning --------------------------------------------------------------
Public Sub btnplanadd_Click()

  Dim res As Result

  If txtencid.Text Then
    If txtproblem.Text Then
      res = modDatabase.$myConn.Create("tblpatplanning")
      res["fldencounterval"] = Trim(txtencid.Text)
      res["fldplancategory"] = "Clinician Plan"
      res["fldproblem"] = txtproblem.Text
      res["fldsubjective"] = ""
      res["fldobjective"] = ""
      res["fldassess"] = ""
      res["fldplan"] = ""
      res["flduserid"] = modBasic.$lbluser
      res["fldtime"] = Now()
      res["fldcomp"] = modBasic.$compID
      res["fldsave"] = True
      res["flduptime"] = ""
      res["xyz"] = False
      res.Update()
      ShowProblemList()
      Balloon.Info(("Information saved"), btnplanadd)
      Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

Private Sub ShowProblemList()

  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  sql = "select fldid,fldproblem from tblpatplanning where fldencounterval=&1 and fldplancategory=&2 and fldtime>=&3 and fldtime<=&4"
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Clinician Plan", modDate.StartSqlDate(dtplan.Value), modDate.EndSqlDate(dtplan.Value))

  grdplan.Clear
  grdplan.Columns.Count = res.Fields.Count
  grdplan.Rows.Count = res.Count

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdplan, res.Index, Column)
      grdplan[res.Index, Column].Text = res[fld.Name]
      Column = Column + 1
    Next
  Next
  grdplan.Row = 0

  grdplan.Rows.Height = modBasic.$AppGridRowHeight
  grdplan.Columns[0].Width = 1
  grdplan.Columns[1].Width = 220 * modBasic.$AppWidthRatio

End

Public Sub dctplansubj_Click()

  Dim xx As String

  xx = GetRichTextArea("Subjective Parameters", txtsubject.RichText)
  If xx Then
    txtsubject.RichText = xx
  Endif

End

Public Sub btntemplplansubj_Click()

  txtsubject.RichText = txtsubject.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub dctplanobj_Click()

  Dim xx As String

  xx = GetRichTextArea("Objective Parameters", txtobject.RichText)
  If xx Then
    txtobject.RichText = xx
  Endif

End

Public Sub btntemplplanobj_Click()

  txtobject.RichText = txtobject.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub dctplanasses_Click()

  Dim xx As String

  xx = GetRichTextArea("Therpeutic Assessment", txtmanage.RichText)
  If xx Then
    txtmanage.RichText = xx
  Endif

End

Public Sub btntemplplanasses_Click()

  txtmanage.RichText = txtmanage.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub dctplanplan_Click()

  Dim xx As String

  xx = GetRichTextArea("Therapeutic Planning", txtplan.RichText)
  If xx Then
    txtplan.RichText = xx
  Endif

End

Public Sub btntemplplanplan_Click()

  txtplan.RichText = txtplan.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub grdplan_Click()

  Dim sql As String
  Dim res As Result

  sql = "select fldid,fldproblem,fldsubjective,fldobjective,fldassess,fldplan from tblpatplanning where fldid=&1"
  res = modDatabase.$myConn.Exec(sql, grdplan[grdplan.Row, 0].Text)
  If res.Available Then
    txtplanid.Value = res!fldid
    txtproblem.Text = res!fldproblem
    txtsubject.RichText = res!fldsubjective
    txtobject.RichText = res!fldobjective
    txtmanage.RichText = res!fldassess
    txtplan.RichText = res!fldplan
  Endif

End

Public Sub dtplan_Click()

  If txtencid.Text Then
    lbldtplan.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), dtplan.Value)
    ShowProblemList()
  Endif

End

Public Sub btnaddsubject_Click()

  Dim res As Result

  If txtplanid.Value Then
    If txtproblem.Text Then
      res = modDatabase.$myConn.Edit("tblpatplanning", "fldid=&1", txtplanid.Value)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsubjective"] = txtsubject.RichText
        res["flduserid"] = modBasic.$lbluser
        res["flduptime"] = Now()
        res["fldcomp"] = modBasic.$compID
        res["xyz"] = False
        res.Update()
        ShowProblemList()
        Balloon.Info(("Information saved"), btnaddsubject)
        Balloon.Delay = modBasic.$BalloonDelay
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif
  'don't catch error

End

Public Sub btnaddobject_Click()

  Dim res As Result

  If txtplanid.Value Then
    If txtproblem.Text Then
      res = modDatabase.$myConn.Edit("tblpatplanning", "fldid=&1", txtplanid.Value)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldobjective"] = txtobject.RichText
        res["flduserid"] = modBasic.$lbluser
        res["flduptime"] = Now()
        res["fldcomp"] = modBasic.$compID
        res["xyz"] = False
        res.Update()
        ShowProblemList()
        Balloon.Info(("Information saved"), btnaddobject)
        Balloon.Delay = modBasic.$BalloonDelay
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif
  'don't catch error

End

Public Sub btnaddassess_Click()

  Dim res As Result

  If txtplanid.Value Then
    If txtproblem.Text Then
      res = modDatabase.$myConn.Edit("tblpatplanning", "fldid=&1", txtplanid.Value)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldassess"] = txtmanage.RichText
        res["flduserid"] = modBasic.$lbluser
        res["flduptime"] = Now()
        res["fldcomp"] = modBasic.$compID
        res["xyz"] = False
        res.Update()
        ShowProblemList()
        Balloon.Info(("Information saved"), btnaddassess)
        Balloon.Delay = modBasic.$BalloonDelay
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif
  'don't catch error

End

Public Sub btnaddplan_Click()

  Dim res As Result

  If txtplanid.Value Then
    If txtproblem.Text Then
      res = modDatabase.$myConn.Edit("tblpatplanning", "fldid=&1", txtplanid.Value)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldplan"] = txtplan.RichText
        res["flduserid"] = modBasic.$lbluser
        res["flduptime"] = Now()
        res["fldcomp"] = modBasic.$compID
        res["xyz"] = False
        res.Update()
        ShowProblemList()
        Balloon.Info(("Information saved"), btnaddplan)
        Balloon.Delay = modBasic.$BalloonDelay
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif
  'don't catch error

End

'''---------------------------------------------------------symptom -------------------------------------------------------------
Public Sub btnaddsymptom_Click()

  Dim sName As String[]
  Dim sText As String

  If txtencid.Text Then
    sName = GridListView(("Select Symptoms"), modMedicine.GetSymptomAllTypeList(), grdsymptom, grdsymptom.Height)
    If sName And If sName.Count Then
      For Each sText In sName
        modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Patient Symptoms", sText, "", "", False)
      Next
    Endif
    ShowSymptomData()
  Endif

End

Public Sub btnaddsympfree_Click()

  Dim xx As String

  xx = InputBox(("Enter custom Symptom"), ("Symptoms"), "")
  If xx Then
    modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Patient Symptoms", xx, "", "", False)
    ShowSymptomData()
  Endif

End

Public Sub btndelsymptom_Click()

  Dim res As Result

  If grdsymptom.Rows.Selection.Count > 0 Then
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Delete("tblexamgeneral", "fldid=&1", grdsymptom[grdsymptom.Row, 0].Text)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        ShowSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif

End

Public Sub ShowSymptomData()

  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  sql = "select fldid,fldtime,fldtype,flditem,fldreportquali,fldreportquanti,fldid,fldid,flddetail,flduserid,fldtime from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldsave=&3"
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Patient Symptoms", True)

  grdsymptom.Clear
  grdsymptom.Columns.Count = res.Fields.Count
  grdsymptom.Rows.Count = res.Count

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdsymptom, res.Index, Column)
      If Column = 1 Then
        grdsymptom[res.Index, Column].Text = modReportVar.GetDateTimeReport(res["fldtime"], gb.MediumDate)
      Else If Column = 5 Then
        grdsymptom[res.Index, Column].Text = Round(res[fld.Name] / 24, -1)
      Else If Column = 6 Then
        grdsymptom[res.Index, Column].Picture = Picture["icon:/tiny/lock"]
        grdsymptom[res.Index, Column].Text = ""
      Else If Column = 7 Then
        grdsymptom[res.Index, Column].Picture = Picture["icon:/tiny/info"]
        grdsymptom[res.Index, Column].Text = ""
      Else
        grdsymptom[res.Index, Column].Text = res[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  grdsymptom.Row = 0

  With grdsymptom
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 100 * modBasic.$AppWidthRatio
    .Columns[2].Width = 1
    .Columns[3].Width = 200 * modBasic.$AppWidthRatio
    .Columns[4].Width = 95 * modBasic.$AppWidthRatio
    .Columns[5].Width = 40 * modBasic.$AppWidthRatio
    .Columns[6].Width = 25 * modBasic.$AppWidthRatio
    .Columns[7].Width = 25 * modBasic.$AppWidthRatio
    .Columns[8].Width = 1
    .Columns[9].Width = 1
    .Columns[10].Width = 1

    .Columns[1].Text = "Start"
    .Columns[3].Text = "Symptom"
    .Columns[4].Text = "Severity"
    .Columns[5].Text = "Days"
  End With

End

Public Sub grdsymptom_Click()

  Dim yqualival As Variant[]
  Dim res1 As Result
  Dim xx As String
  Dim xval As Float

  If grdsymptom.Column = 4 Then
    xx = InputCombo(("select severity of symptom"), grdsymptom[grdsymptom.Row, 3].Text, ["Subthreshold", "Mild", "Moderate", "Severe", "Upper threshold"], grdsymptom[grdsymptom.Row, 4].Text, True)
    If xx Then
      res1 = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", grdsymptom[grdsymptom.Row, 0].Text)
      res1["fldreportquali"] = xx
      res1["xyz"] = False
      res1.Update()
      ShowSymptomData()
    Endif

  Else If grdsymptom.Column = 6 Then
    If grdsymptom[grdsymptom.Row, 5].Text = 0 Then
      xval = DateDiff(CDate(grdsymptom[grdsymptom.Row, 10].Text), Now(), gb.Hour)
      If Message.Question(("Are you sure that symptom has resolved in " & CStr(xval) & " Hours"), ("No"), ("Yes")) = 2 Then
        res1 = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", grdsymptom[grdsymptom.Row, 0].Text)
        res1["fldreportquanti"] = xval
        res1["xyz"] = False
        res1.Update()
        ShowSymptomData()
      Endif
    Else
      Message.Warning("Symptom Locked", ("OK"))
    Endif

  Else If grdsymptom.Column = 7 Then
    yqualival = GetQualiValues(grdsymptom[grdsymptom.Row, 3].Text, grdsymptom[grdsymptom.Row, 8].Text, "")
    If yqualival Then
      res1 = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", grdsymptom[grdsymptom.Row, 0].Text)                            ''"
      res1["flddetail"] = yqualival[0]
      res1["flduptime"] = Now()
      res1["xyz"] = False
      res1.Update()
      ShowSymptomData()
    Endif
  Endif

End

''-------------------------------------- Stat/PRN drug ---------------------------------------------------------
Private Sub ShowPRNMedicines()

  If txtencid.Text Then
    If btnshowprn.Value = True Then
      ShowMedPRN("All")
    Else If btnshowprn.Value = False Then
      ShowMedPRN("Current")
    Endif
  Endif

End

Public Sub rbvalueR_Click()

  ShowPRNMedicines()

End

Public Sub rblabelR_Click()

  ShowPRNMedicines()

End

Public Sub btnshowprn_Click()

  ShowPRNMedicines()

End

Private Function DoseFormPRN() As String

  Dim xx As String

  If rblabelR.Value = True Then
    xx = "Label"
  Else
    xx = "Value"
  Endif
  Return xx

End

Private Sub ShowMedPRN(strType As String)

  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  If strType = "Current" Then
    sql = "select fldid,fldstarttime,fldroute,flditem,fldid,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and fldroute<>&5 and flditemtype=&6 and (fldfreq like &7 or fldfreq like &8) ORDER BY fldid DESC"                    ''
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, Now(), DateAdd(Now(), gb.Hour, -3), "fluid", "Medicines", "stat", "PRN")
  Else If strType = "All" Then
    sql = "select fldid,fldstarttime,fldroute,flditem,fldid,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldroute<>&3 and flditemtype=&4 and (fldfreq like &5 or fldfreq like &6) ORDER BY fldid DESC"
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, "fluid", "Medicines", "stat", "PRN")
  Endif

  grdmedprn.Clear
  grdmedprn.Columns.Count = res.Fields.Count
  grdmedprn.Rows.Count = res.Count

  With grdmedprn
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 150 * modBasic.$AppWidthRatio
    .Columns[2].Width = 75 * modBasic.$AppWidthRatio
    .Columns[3].Width = 325 * modBasic.$AppWidthRatio
    .Columns[4].Width = 75 * modBasic.$AppWidthRatio
    .Columns[5].Width = 50 * modBasic.$AppWidthRatio
    .Columns[6].Width = 50 * modBasic.$AppWidthRatio
    .Columns[7].Width = 100 * modBasic.$AppWidthRatio
    .Columns[8].Width = 50 * modBasic.$AppWidthRatio
    .Columns[9].Width = 1
    .Columns[10].Width = 1

    .Columns[1].Text = "StartDate"
    .Columns[2].Text = "Route"
    .Columns[3].Text = "Medicine"
    .Columns[4].Text = "Dose"
    .Columns[5].Text = "Freq"
    .Columns[6].Text = "Days"
    .Columns[7].Text = "Status"
    .Columns[8].Text = "N"
  End With

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdmedprn, res.Index, Column)
      If Column = 1 Then
        grdmedprn[res.Index, Column].Text = modReportVar.GetDateTimeReport(res["fldstarttime"], gb.GeneralDate)
      Else If Column = 4 Then
        grdmedprn[res.Index, Column].Text = modPharmacy.GetMedicineDoseInFormat(res["fldid"], DoseFormPRN())
      Else If Column = 8 Then
        grdmedprn[res.Index, Column].Text = modPharmacy.TotalDoseCount(res["fldid"])
      Else
        grdmedprn[res.Index, Column].Text = res[fld.Name]
      Endif
      grdmedprn.Rows[res.Index].Height = Max(grdmedprn.Rows[res.Index].Height, grdmedprn[res.Index, Column].Font.RichTextHeight(grdmedprn[res.Index, Column].Text, grdmedprn.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (grdmedprn.Rows.Height - grdmedprn.Font.Height))
      grdmedprn[res.Index, Column].WordWrap = True

      Column = Column + 1
    Next
  Next
  grdmedprn.Row = 0

End

Public Sub grdmedprn_Click()

  Dim xx As String[] = ["Continue", "Completed", "Discontinue", "Hold", "Change", "ReWrite", "Cancelled", "Wasted"]
  Dim res As Result
  Dim xval As String
  Dim yval As Integer
  Dim xdate As Date

  If grdmedprn.Column = 1 Then
    xdate = GetDateValue(("Select Start Date for this medicine"), grdmedprn[grdmedprn.Row, 3].Text, grdmedprn[grdmedprn.Row, 9].Text)
    If xdate Then
      modPharmSub.UpdateStartAfterDispensing(grdmedprn[grdmedprn.Row, 0].Text, xdate)
      ShowMedPRN("Current")
    Endif
  Else If grdmedprn.Column = 7 Then
    xval = InputCombo(grdmedprn[grdmedprn.Row, 3].Text, ("Select Current Status"), xx, grdmedprn[grdmedprn.Row, 7].Text, True)
    If xval Then
      res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", grdmedprn[grdmedprn.Row, 0].Text)
      res["fldcurval"] = xval
      res["xyz"] = False
      res.Update()
      ShowMedPRN("Current")
    Endif
  Else If grdmedprn.Column = 6 Then
    yval = InputValue(grdmedprn[grdmedprn.Row, 3].Text, ("Select Number of Days"), grdmedprn[grdmedprn.Row, 6].Text)
    If yval Then
      res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", grdmedprn[grdmedprn.Row, 0].Text)
      res["flddays"] = yval
      res["fldendtime"] = DateAdd(grdmedprn[grdmedprn.Row, 9].Text, gb.Day, CInt(yval))
      res["xyz"] = False
      res.Update()
      ShowMedPRN("Current")
    Endif
  Endif

End

Public Sub btndosingprn_Click()

  Dim hForm As FmDosecount

  If txtencid.Text Then
    hForm = New FmDosecount(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub btndosingroutine_Click()

  Dim hForm As FmDosecount

  If txtencid.Text Then
    hForm = New FmDosecount(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub btnlblstat_Click()

  Dim i As Integer
  Dim dosid As Long[]
  Dim xPath As String

  If txtencid.Text Then
    dosid = New Long[]
    For i = 0 To grdmedprn.Rows.Count - 1
      dosid.Add(grdmedprn[i, 0].Text)
    Next
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowMedicationLabelReport(Trim(txtencid.Text), dosid, "Inpatient")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btncounselstat_Click()

  Dim doslst As Long[]
  Dim i As Integer
  Dim xPath As String

  If txtencid.Text Then
    doslst = New Long[]
    For i = 0 To grdmedprn.Rows.Count - 1
      doslst.Add(grdmedprn[i, 0].Text)
    Next
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowCounselingReport(Trim(txtencid.Text), doslst)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btndrpstat_Click()

  Dim opt As Long[]
  Dim sql As String
  Dim res As Result

  If btnshowprn.Value = False Then
    sql = "select fldid from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and flditemtype=&5 and fldcurval=&6"                    ''
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, modDate.EndSqlDate(Now()), modDate.StartSqlDate(Now()), "Medicines", "Continue")
  Else If btnshowprn.Value = True Then
    sql = "select fldid from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and flditemtype=&3 and fldcurval=&4"
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, "Medicines", "Continue")
  Endif
  If res.Available Then
    opt = New Long[]
    For Each res
      opt.Add(res!fldid)
    Next
    modMedError.ShowMedicationReviewMultipleDosID(Trim(txtencid.Text), opt, "Report")
  Endif

End

''--------------------------------------routine medicines ------------------------------------------------------------------------------------
Public Sub btnmedexpo_Click()
  ''export grid

End

Private Sub ShowRoutineMed()

  If txtencid.Text Then
    If btnshowallmed.Value = True Then
      ShowMedicines("All")
    Else If btnshowallmed.Value = False Then
      ShowMedicines("Current")
    Endif
  Endif

End

Public Sub rbvalue_Click()

  ShowRoutineMed()

End

Public Sub rblabel_Click()

  ShowRoutineMed()

End

Public Sub btnshowallmed_Click()

  ShowRoutineMed()

End

Private Sub ShowMedicines(strType As String)

  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  If strType = "Current" Then
    If rblabel.Value = True Then
      sql = "select fldid,fldstarttime,fldroute,flditem,fldid,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and fldroute<>&5 and flditemtype=&6 and fldfreq<>&7 and fldfreq<>&8 ORDER BY fldid DESC"
    Else
      sql = "select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and fldroute<>&5 and flditemtype=&6 and fldfreq<>&7 and fldfreq<>&8 ORDER BY fldid DESC"                    ''
    Endif
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, Now(), DateAdd(Now(), gb.Hour, -3), "fluid", "Medicines", "stat", "PRN")
  Else If strType = "All" Then
    If rblabel.Value = True Then
      sql = "select fldid,fldstarttime,fldroute,flditem,fldid,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldroute<>&3 and flditemtype=&4 and fldfreq<>&5 and fldfreq<>&6 ORDER BY fldid DESC"
    Else
      sql = "select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldroute<>&3 and flditemtype=&4 and fldfreq<>&5 and fldfreq<>&6 ORDER BY fldid DESC"
    Endif
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, "fluid", "Medicines", "stat", "PRN")
  Endif

  grdmedicine.Clear
  grdmedicine.Columns.Count = res.Fields.Count
  grdmedicine.Rows.Count = res.Count

  With grdmedicine
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 150 * modBasic.$AppWidthRatio
    .Columns[2].Width = 75 * modBasic.$AppWidthRatio
    .Columns[3].Width = 325 * modBasic.$AppWidthRatio
    .Columns[4].Width = 75 * modBasic.$AppWidthRatio
    .Columns[5].Width = 50 * modBasic.$AppWidthRatio
    .Columns[6].Width = 50 * modBasic.$AppWidthRatio
    .Columns[7].Width = 100 * modBasic.$AppWidthRatio
    .Columns[8].Width = 50 * modBasic.$AppWidthRatio
    .Columns[9].Width = 1
    .Columns[10].Width = 1

    .Columns[1].Text = "StartDate"
    .Columns[2].Text = "Route"
    .Columns[3].Text = "Medicine"
    .Columns[4].Text = "Dose"
    .Columns[5].Text = "Freq"
    .Columns[6].Text = "Days"
    .Columns[7].Text = "Status"
    .Columns[8].Text = "N"
  End With

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdmedicine, res.Index, Column)
      If Column = 1 Then
        grdmedicine[res.Index, Column].Text = modReportVar.GetDateTimeReport(res["fldstarttime"], gb.GeneralDate)
      Else If Column = 4 Then
        If rblabel.Value = True Then
          grdmedicine[res.Index, Column].Text = modPharmacy.GetMedicineDoseInFormat(res["fldid"], "Label")
        Else
          grdmedicine[res.Index, Column].Text = res[fld.Name]
        Endif
      Else If Column = 8 Then
        grdmedicine[res.Index, Column].Text = modPharmacy.TotalDoseCount(res["fldid"])
      Else
        grdmedicine[res.Index, Column].Text = res[fld.Name]
      Endif
      grdmedicine.Rows[res.Index].Height = Max(grdmedicine.Rows[res.Index].Height, grdmedicine[res.Index, Column].Font.RichTextHeight(grdmedicine[res.Index, Column].Text, grdmedicine.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (grdmedicine.Rows.Height - grdmedicine.Font.Height))
      grdmedicine[res.Index, Column].WordWrap = True

      Column = Column + 1
    Next
  Next
  grdmedicine.Row = 0

End

Public Sub grdmedicine_Click()

  Dim xx As String[] = ["Continue", "Completed", "Discontinue", "Hold", "Change", "ReWrite", "Cancelled", "Wasted"]
  Dim res As Result
  Dim xval As String
  Dim yval As Integer
  Dim xdate As Date

  If grdmedicine.Column = 1 Then
    xdate = GetDateValue(("Select Start Date for this medicine"), grdmedicine[grdmedicine.Row, 3].Text, grdmedicine[grdmedicine.Row, 9].Text)
    If xdate Then
      modPharmSub.UpdateStartAfterDispensing(grdmedicine[grdmedicine.Row, 0].Text, xdate)
      ShowMedicines("Current")
    Endif
  Else If grdmedicine.Column = 7 Then
    xval = InputCombo(grdmedicine[grdmedicine.Row, 3].Text, ("Select Current Status"), xx, grdmedicine[grdmedicine.Row, 7].Text, True)
    If xval Then
      res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", grdmedicine[grdmedicine.Row, 0].Text)
      res["fldcurval"] = xval
      res["xyz"] = False
      res.Update()
      ShowMedicines("Current")
    Endif
  Else If grdmedicine.Column = 6 Then
    yval = InputValue(grdmedicine[grdmedicine.Row, 3].Text, ("Select Number of Days"), grdmedicine[grdmedicine.Row, 6].Text)
    If yval Then
      res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", grdmedicine[grdmedicine.Row, 0].Text)
      res["flddays"] = yval
      res["fldendtime"] = DateAdd(grdmedicine[grdmedicine.Row, 9].Text, gb.Day, CInt(yval))
      res["xyz"] = False
      res.Update()
      ShowMedicines("Current")
    Endif
  Endif

End

Public Sub btndrp_Click()

  Dim opt As Long[]
  Dim sql As String
  Dim res As Result

  If btnshowallmed.Value = False Then
    sql = "select fldid from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and flditemtype=&5 and fldcurval=&6"                    ''
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, modDate.EndSqlDate(Now()), modDate.StartSqlDate(Now()), "Medicines", "Continue")
  Else If btnshowallmed.Value = True Then
    sql = "select fldid from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and flditemtype=&3 and fldcurval=&4"
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, "Medicines", "Continue")
  Endif
  If res.Available Then
    opt = New Long[]
    For Each res
      opt.Add(res!fldid)
    Next
    modMedError.ShowMedicationReviewMultipleDosID(Trim(txtencid.Text), opt, "Report")
  Endif

End

Public Sub btndosinfo_Click()

  Dim i As Integer
  Dim dosid As Long[]
  Dim xPath As String

  If txtencid.Text Then
    dosid = New Long[]
    For i = 0 To grdmedicine.Rows.Count - 1
      dosid.Add(grdmedicine[i, 0].Text)
    Next
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowMedicationLabelReport(Trim(txtencid.Text), dosid, "Inpatient")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btncounsel_Click()

  Dim doslst As Long[]
  Dim i As Integer
  Dim xPath As String

  If txtencid.Text Then
    doslst = New Long[]
    For i = 0 To grdmedicine.Rows.Count - 1
      doslst.Add(grdmedicine[i, 0].Text)
    Next
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowCounselingReport(Trim(txtencid.Text), doslst)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

''------------------------------------------- Monitoring ----------------------------------------
Public Sub btnmoniadd_Click()

  Dim res As Result

  res = modDatabase.$myConn.Create("tblpatplanning")
  res["fldencounterval"] = Trim(txtencid.Text)
  res["fldplancategory"] = "IP Monitoring"
  res["fldproblem"] = ""
  res["fldsubjective"] = ""
  res["fldobjective"] = ""
  res["fldassess"] = ""
  res["fldplan"] = ""
  res["flduserid"] = modBasic.$lbluser
  res["fldtime"] = Now()
  res["fldcomp"] = modBasic.$compID
  res["fldsave"] = True
  res["flduptime"] = ""
  res["xyz"] = False
  res.Update()
  ShowMonitoring()

End

Public Sub dtmonitor_Click()

  If txtencid.Text Then
    lbldtmonitor.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), dtmonitor.Value)
    ShowMonitoring()
  Endif

End

Private Sub ShowMonitoring()

  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  sql = "select fldid,fldtime,fldid,fldproblem,fldsubjective,fldobjective,fldassess,fldplan from tblpatplanning where fldencounterval=&1 and fldplancategory=&2 and fldtime>=&3 and fldtime<=&4"
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "IP Monitoring", modDate.StartSqlDate(dtmonitor.Value), modDate.EndSqlDate(dtmonitor.Value))

  grdmonitor.Clear
  grdmonitor.Columns.Count = res.Fields.Count
  grdmonitor.Rows.Count = res.Count

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdmonitor, res.Index, Column)
      If Column = 1 Then
        grdmonitor[res.Index, Column].Text = modReportVar.GetDateTimeReport(res["fldtime"], gb.MediumTime)
      Else If Column = 2 Then
        grdmonitor[res.Index, Column].Picture = Picture["icon:/tiny/info"]
        grdmonitor[res.Index, Column].Text = ""
      Else
        grdmonitor[res.Index, Column].Text = res[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next
  grdmonitor.Row = 0

  With grdmonitor
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 100 * modBasic.$AppWidthRatio
    .Columns[2].Width = 1
    .Columns[3].Width = 250 * modBasic.$AppWidthRatio
    .Columns[4].Width = 1
    .Columns[5].Width = 1
    .Columns[6].Width = 1
    .Columns[7].Width = 1
  End With

End

Public Sub grdmonitor_Click()

  txtmonvalue.Value = 0
  TabPanel1.Enabled = True
  txtmonvalue.Value = grdmonitor[grdmonitor.Row, 0].Text
  txtmonimpression.Text = grdmonitor[grdmonitor.Row, 3].Text
  txtmonproblem.RichText = grdmonitor[grdmonitor.Row, 4].Text
  txtmontreatment.RichText = grdmonitor[grdmonitor.Row, 5].Text
  txtmoninout.RichText = grdmonitor[grdmonitor.Row, 6].Text
  txtmonplan.RichText = grdmonitor[grdmonitor.Row, 7].Text
  FillMoniExamtable()

End

Public Sub dctprogproblem_Click()

  Dim xx As String

  xx = GetRichTextArea("Problems", txtmonproblem.RichText)
  If xx Then
    txtmonproblem.RichText = xx
  Endif

End

Public Sub btntemplpprogproblem_Click()

  txtmonproblem.RichText = txtmonproblem.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub dctprogtreat_Click()

  Dim xx As String

  xx = GetRichTextArea("Treatment", txtmontreatment.RichText)
  If xx Then
    txtmontreatment.RichText = xx
  Endif

End

Public Sub btntemplprogtreat_Click()

  txtmontreatment.RichText = txtmontreatment.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub dctproginout_Click()

  Dim xx As String

  xx = GetRichTextArea("Input/Output", txtmoninout.RichText)
  If xx Then
    txtmoninout.RichText = xx
  Endif

End

Public Sub btntemplproginout_Click()

  txtmoninout.RichText = txtmoninout.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub dctprogplan_Click()

  Dim xx As String

  xx = GetRichTextArea("Nursing Plan", txtmonplan.RichText)
  If xx Then
    txtmonplan.RichText = xx
  Endif

End

Public Sub btntemplprogplan_Click()

  txtmonplan.RichText = txtmonplan.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub btnmonproblem_Click()

  Dim res As Result

  res = modDatabase.$myConn.Edit("tblpatplanning", "fldid=&1", txtmonvalue.Value)
  If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
    res["fldsubjective"] = txtmonproblem.RichText
    res["flduserid"] = modBasic.$lbluser
    res["xyz"] = False
    res.Update
    Balloon.Info(("Information saved"), btnmonproblem)
    Balloon.Delay = modBasic.$BalloonDelay
  Else
    Message.Warning("Authorization with " & res["flduserid"], ("OK"))
  Endif

End

Public Sub btnmontreatment_Click()

  Dim res As Result

  res = modDatabase.$myConn.Edit("tblpatplanning", "fldid=&1", txtmonvalue.Value)
  If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
    res["fldobjective"] = txtmontreatment.RichText
    res["flduserid"] = modBasic.$lbluser
    res["xyz"] = False
    res.Update
    Balloon.Info(("Information saved"), btnmontreatment)
    Balloon.Delay = modBasic.$BalloonDelay
  Else
    Message.Warning("Authorization with " & res["flduserid"], ("OK"))
  Endif

End

Public Sub btnmoninout_Click()

  Dim res As Result

  res = modDatabase.$myConn.Edit("tblpatplanning", "fldid=&1", txtmonvalue.Value)
  If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
    res["fldassess"] = txtmoninout.RichText
    res["flduserid"] = modBasic.$lbluser
    res["xyz"] = False
    res.Update
    Balloon.Info(("Information saved"), btnmoninout)
    Balloon.Delay = modBasic.$BalloonDelay
  Else
    Message.Warning("Authorization with " & res["flduserid"], ("OK"))
  Endif

End

Public Sub btnmonplan_Click()

  Dim res As Result

  res = modDatabase.$myConn.Edit("tblpatplanning", "fldid=&1", txtmonvalue.Value)
  If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
    res["fldplan"] = txtmonplan.RichText
    res["flduserid"] = modBasic.$lbluser
    res["xyz"] = False
    res.Update
    Balloon.Info(("Information saved"), btnmonplan)
    Balloon.Delay = modBasic.$BalloonDelay
  Else
    Message.Warning("Authorization with " & res["flduserid"], ("OK"))
  Endif

End

Public Sub btnmonimpression_Click()

  Dim res As Result

  res = modDatabase.$myConn.Edit("tblpatplanning", "fldid=&1", txtmonvalue.Value)
  If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
    res["fldproblem"] = txtmonimpression.Text
    res["flduserid"] = modBasic.$lbluser
    res["xyz"] = False
    res.Update
    Balloon.Info(("Information saved"), btnmonimpression)
    Balloon.Delay = modBasic.$BalloonDelay
  Else
    Message.Warning("Authorization with " & res["flduserid"], ("OK"))
  Endif

End

Public Sub btnaddprogimpression_Click()

  Dim xpath As String

  If Dialog.OpenFile() Then Return
  xpath = Dialog.Path
  If Exist(xpath) Then
    modSettings.SaveSettingsToFile("ClinicForms/ImpressionList", xpath)
    txtmonimpression.List = modString.GetStringArrayFromFile(xpath, True)
  Endif

End

''---------------------------------- IP Monitoring Exam -------------------------------------------
Public Sub cmbmonexam_GotFocus()

  Dim xlist As String[]

  txtmonexam.Enabled = True
  txtmonexam.Clear()
  txtmonexam.Text = ""
  txtmonval.Enabled = True
  txtmonval.Value = 0
  txtmonval.Tag = ""
  If modBasic.$ItemListFormat = "GridView" Then
    If modBasic.$ClinCategoryGrid = "Yes" Then
      xlist = modFixClinic.GetExamWithCategory(modBasic.$ClinNursingComp)
      If xlist.Count Then
        cmbmonexam.Text = GridViewGroup("Select Examination", xlist, modMisc.LockBoolean(modBasic.$LockExamList), cmbmonexam, grdmonexam.Height + cmbmonexam.Height)
        txtmonexam.SetFocus
      Endif
    Else
      xlist = modBasic.$ClinNursingComp
      If xlist.Count Then
        cmbmonexam.Text = GridViewNew("Select Examination", xlist, modMisc.LockBoolean(modBasic.$LockExamList), cmbmonexam, grdmonexam.Height + cmbmonexam.Height)
        txtmonexam.SetFocus
      Endif
    Endif
  Endif

End

Public Sub cmbmonexam_KeyRelease()

  modFillContainer.AutoFillComboBox(cmbmonexam)
  If modBasic.$LockExamList = "No" Then
  Else
    modFillContainer.RestrictComboToContent(cmbmonexam)
  Endif

End

Public Sub txtmonexam_GotFocus()

  Dim sType As String
  Dim xlimit As Float[]
  Dim xType As String
  Dim xscle As String[]
  Dim yqualival As Variant[]

  txtfindmax.Value = 0
  txtfindmin.Value = 0
  sType = modFixClinic.GetExaminationType(cmbmonexam.Text)
  If sType = "Qualitative" Then
    txtmonval.Enabled = False
    txtmonexam.Enabled = True
    pnlquantinurse.Visible = False
    If Not txtmonexam.Text Then
      If cmbmonexam.Text Then
        If modBasic.$DisplayExamOption = "No" Then
          If modBasic.$DisplayQualiArea = "Yes" Then
            txtmonexam.Text = GetTextArea(cmbmonexam.Text, "")
          Endif
        Else
          xType = modFixClinic.GetExamtOptionType(cmbmonexam.Text)
          If xType = "Single Selection" Or If xType = "Dichotomous" Then
            txtmonexam.List = modAllExam.SelectExamOptionList("Exam", cmbmonexam.Text)
            If modBasic.$TabletModeEnable = "Yes" Then
              txtmonexam.Popup()
            Endif
          Else If xType = "Clinical Scale" Then
            xscle = modExamOption.GetClinScalePopUp("Exam", cmbmonexam.Text)
            If xscle Then
              txtmonval.Value = CFloat(xscle[0])
              txtmonexam.Text = xscle[1]
              txtmonexam.Enabled = False
            Endif
          Else If xType = "Left and Right" Then
            yqualival = CLeftRight(cmbmonexam.Text, "", modFixClinic.GetLeftRightMainHeader("Exam", cmbmonexam.Text))
            If yqualival Then
              txtmonexam.Text = yqualival[0]
              txtmonexam.Enabled = False
            Endif
          Else If xType = "Visual Input" Then
            txtmonexam.Text = modExamOption.GetVisualDataExamVal(cmbmonexam.Text)
          Else If xType = "Date Time" Then
            txtmonexam.Text = modDate.DateStringForExam(GetDateValue(cmbmonexam.Text, "Date Value", Now()))
            txtmonexam.Enabled = False
          Else If xType = "BS Date" Then
            txtmonexam.Text = modDate.ConvertToLocaldate(GetDateValue(cmbmonexam.Text, "Date Value", Now()))
            txtmonexam.Enabled = False
          Else
            If modBasic.$DisplayQualiArea = "Yes" Then
              txtmonexam.Text = GetTextArea(cmbmonexam.Text, "")
            Endif
          Endif
        Endif
      Endif
    Endif

  Else If sType = "Quantitative" Then
    xlimit = modClinic.GetBothQuantiExamVal(cmbmonexam.Text, Trim(txtencid.Text))
    txtfindmin.Value = xlimit[0]
    txtfindmax.Value = xlimit[1]
    txtmonval.Enabled = True
    txtmonexam.Enabled = False
    If modBasic.$TabletModeEnable = "Yes" Then
      If cmbmonexam.Text Then
        pnlquantinurse.Visible = True
      Endif
    Endif
    txtmonval.SetFocus
  Else    ''is it good to allow items not in list?
    txtmonval.Enabled = False
    txtmonexam.Enabled = True
    pnlquantinurse.Visible = False
  Endif

End

Public Sub btnmonexam_KeyRelease()

  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
    btnmonexam_Click()
    cmbmonexam.SetFocus
  Endif

End

Public Sub btnaddexamlist_Click()

  Dim hForm As FmEnterGroupExam

  If txtmonvalue.Value Then
    hForm = New FmEnterGroupExam(Trim(txtencid.Text), "IP Monitoring:" & CStr(txtmonvalue.Value), "Group")
    hForm.ShowModal
    FillMoniExamtable()
  Endif

End

Public Sub btnmonexam_Click()

  Dim sType As String
  Dim abn As Boolean
  Dim xsys As String
  Dim OptionType As String
  Dim hForm As CGetExamParam

  If txtencid.Text Then
    If cmbmonexam.Text Then
      hForm = New CGetExamParam(cmbmonexam.Text, "Exam")
      sType = hForm.GetExamDataType()
      xsys = hForm.GetExamConstant()
      OptionType = hForm.GetExamOption()

      If sType = "Quantitative" Then
        If txtfindmin.Value > txtmonval.Value Or If txtfindmax.Value < txtmonval.Value Then
          abn = True
        Else
          abn = False
        Endif
        modClinSub.AddQuantiData(Trim(txtencid.Text), "", cmbmonexam.Text, OptionType, txtmonval.Value, abn, "IP Monitoring:" & CStr(txtmonvalue.Value), xsys)
        pnlquantinurse.Visible = False
      Else
        modClinSub.AddClinicExam(Trim(txtencid.Text), "", cmbmonexam.Text, OptionType, txtmonexam.Text, txtmonval.Value, False, "IP Monitoring:" & CStr(txtmonvalue.Value), xsys, "Regular")
      Endif
      FillMoniExamtable()
      cmbmonexam.Text = ""
      txtmonexam.Enabled = True
      txtmonval.Enabled = True
      txtmonexam.Text = ""
      txtmonexam.Clear()
      txtmonval.Value = 0
      txtmonval.Tag = ""
    Endif
  Endif

End

Public Sub FillMoniExamtable()

  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldid,fldtype,fldhead,fldabnormal,fldid,fldid,fldtime,fldencounterval,flduserid,fldcomp from tblpatientexam where fldencounterval=&1 and fldinput=&2 and fldsave=&3", Trim(txtencid.Text), "IP Monitoring:" & CStr(txtmonvalue.Value), True)
  grdmonexam.Clear
  grdmonexam.Columns.Count = res.Fields.Count
  grdmonexam.Rows.Count = res.Count

  With grdmonexam
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 1
    .Columns[2].Width = 225 * modBasic.$AppWidthRatio
    .Columns[3].Width = 25 * modBasic.$AppWidthRatio
    .Columns[4].Width = 250 * modBasic.$AppWidthRatio
    .Columns[5].Width = 25 * modBasic.$AppWidthRatio
    .Columns[6].Width = 150 * modBasic.$AppWidthRatio
    .Columns[7].Width = 1
    .Columns[8].Width = 100 * modBasic.$AppWidthRatio
    .Columns[9].Width = 100 * modBasic.$AppWidthRatio

    .Columns[2].Text = "Examination"
    .Columns[4].Text = "Observation"
    .Columns[6].Text = "ReportTime"
    .Columns[8].Text = "UserID"
    .Columns[9].Text = "Location"
  End With

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdmonexam, res.Index, Column)
      If Column = 3 Then
        grdmonexam[res.Index, Column].Picture = Picture[modMisc.GetGridIcon(res[fld.Name])]
        grdmonexam[res.Index, Column].Text = ""
      Else If Column = 4 Then
        grdmonexam[res.Index, Column].RichText = modClinic.GetExamValueString(Trim(txtencid.Text), res["fldid"], False)
      Else If Column = 5 Then
        grdmonexam[res.Index, Column].Picture = Picture["icon:/small/cancel"]
        grdmonexam[res.Index, Column].Text = ""
      Else If Column = 6 Then
        grdmonexam[res.Index, Column].Text = modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate)
      Else If Column = 2 Then
        grdmonexam[res.Index, Column].Text = res[fld.Name]
        grdmonexam.Rows[res.Index].Height = Max(grdmonexam.Rows[res.Index].Height, grdmonexam[res.Index, Column].Font.RichTextHeight(grdmonexam[res.Index, Column].Text, grdmonexam.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (grdmonexam.Rows.Height - grdmonexam.Font.Height))
      Else
        grdmonexam[res.Index, Column].Text = res[fld.Name]
      Endif
      grdmonexam[res.Index, Column].WordWrap = True

      Column = Column + 1
    Next
  Next
  grdmonexam.Row = 0

End

Public Sub grdmonexam_Click()

  Dim hForm2 As FmEnterMultiple
  Dim hForm22 As FmEnterMultipleVer
  Dim hFormTwo As FmEnterMultipleTwo
  Dim res As Result
  Dim xData As Variant[]
  Dim Row As Integer
  Dim yyy As String[]
  Dim xx As String

  Dim xquantival As Variant[]
  Dim yqualival As Variant[]
  Dim xlimit As Float[]
  Dim xType As String
  Dim xdate As Date

  Row = grdmonexam.Row
  If grdmonexam.Column = 4 Then
    If grdmonexam[grdmonexam.Row, 1].Text = "Qualitative" Then
      xType = modFixClinic.GetExamtOptionType(grdmonexam[grdmonexam.Row, 2].Text)
      If modClinic.GetSubExamBool(grdmonexam[grdmonexam.Row, 0].Text, Trim(txtencid.Text)) = False Then
        If xType = "Fixed Components" Or If xType = "Left/Right Components" Then
          yyy = modFixClinic.GetSubExamArray(grdmonexam[grdmonexam.Row, 2].Text)  'modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldsubexam as col from tblexamquali where fldexamid=&1", grdmonexam[grdmonexam.Row, 2].Text))
          If yyy.Count Then
            modClinSub.InsertExamSubExam(grdmonexam[grdmonexam.Row, 7].Text, grdmonexam[grdmonexam.Row, 0].Text, grdmonexam[grdmonexam.Row, 2].Text, yyy)
          Endif
        Endif
      Endif

      res = modDatabase.$myConn.Exec("select fldid,fldsubtexam,fldreport,fldtanswertype,fldabnormal,fldindex from tblpatientsubexam where fldheadid=&1", grdmonexam[grdmonexam.Row, 0].Text)
      If res.Available = False Then
        If xType = "Clinical Scale" Then
          yqualival = modExamOption.GetClinScalePopUp("Exam", grdmonexam[grdmonexam.Row, 2].Text)
          If yqualival Then
            modClinSub.UpdateQualiQuantiData(grdmonexam[grdmonexam.Row, 0].Text, yqualival[1], CFloat(yqualival[0]), False)
          Endif
        Else If xType = "Left and Right" Then
          yqualival = CLeftRight(grdmonexam[grdmonexam.Row, 2].Text, grdmonexam[grdmonexam.Row, 4].RichText, modFixClinic.GetLeftRightMainHeader("Exam", grdmonexam[grdmonexam.Row, 2].Text))
          If yqualival Then
            modClinSub.UpdateClinicQualiData(grdmonexam[grdmonexam.Row, 0].Text, yqualival[0], yqualival[1], "")
          Endif
        Else If xType = "Date Time" Then
          xdate = GetDateValue(grdmonexam[grdmonexam.Row, 2].Text, ("Select Date Time"), Val(grdmonexam[grdmonexam.Row, 4].RichText))
          If xdate Then
            modClinSub.UpdateClinicQualiData(grdmonexam[grdmonexam.Row, 0].Text, modDate.DateStringForExam(xdate), False, "")
          Endif
        Else If xType = "BS Date" Then
          xdate = GetDateValue(grdmonexam[grdmonexam.Row, 2].Text, ("Select Date Time"), modDate.ConvertToEnglishdate(grdmonexam[grdmonexam.Row, 4].RichText))
          If xdate Then
            modClinSub.UpdateClinicQualiData(grdmonexam[grdmonexam.Row, 0].Text, modDate.ConvertToLocaldate(xdate), False, "")
          Endif
        Else If xType = "Qualitative" Then
          yqualival = GetQualiString(grdmonexam[grdmonexam.Row, 2].Text, grdmonexam[grdmonexam.Row, 4].RichText, "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData(grdmonexam[grdmonexam.Row, 0].Text, yqualival[0], yqualival[1])
          Endif
        Else If xType = "RichText Area" Then
          yqualival = GetQualiRich(grdmonexam[grdmonexam.Row, 2].Text, grdmonexam[grdmonexam.Row, 4].RichText, "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData(grdmonexam[grdmonexam.Row, 0].Text, yqualival[0], yqualival[1], yqualival[2])
          Endif
        Else
          yqualival = GetQualiValues(grdmonexam[grdmonexam.Row, 2].Text, grdmonexam[grdmonexam.Row, 4].RichText, "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData(grdmonexam[grdmonexam.Row, 0].Text, yqualival[0], yqualival[1], yqualival[2])
          Endif
        Endif

      Else If res.Available = True Then
        xData = New Variant[]
        For Each res
          xData.Add([res["fldsubtexam"], res["fldreport"], res["fldid"], res["fldtanswertype"], res["fldabnormal"], res["fldindex"]])
        Next
        xData.Add(["Final Impression", grdmonexam[grdmonexam.Row, 4].RichText, 0, "RichText Area", False, ""])
        If xType = "Left/Right Components" Then
          hFormTwo = New FmEnterMultipleTwo(grdmonexam[grdmonexam.Row, 0].Text, "Exam", grdmonexam[grdmonexam.Row, 2].Text, xData, "", "Current")
          hFormTwo.ShowModal
        Else
          If modBasic.$FactorForm = "Vertical" Then
            hForm22 = New FmEnterMultipleVer(grdmonexam[grdmonexam.Row, 0].Text, "Exam", grdmonexam[grdmonexam.Row, 2].Text, xData, "", "Current")
            hForm22.ShowModal
          Else
            hForm2 = New FmEnterMultiple(grdmonexam[grdmonexam.Row, 0].Text, "Exam", grdmonexam[grdmonexam.Row, 2].Text, xData, "", "Current")
            hForm2.ShowModal
          Endif
        Endif
      Endif

    Else If grdmonexam[grdmonexam.Row, 1].Text = "Quantitative" Then
      xlimit = modClinic.GetBothQuantiExamVal(grdmonexam[grdmonexam.Row, 2].Text, grdmonexam[grdmonexam.Row, 7].Text)
      xquantival = GetQuantiValues("Exam", Trim(txtencid.Text), grdmonexam[grdmonexam.Row, 2].Text, xlimit[0], xlimit[1], modClinic.GetExamValueByID(grdmonexam[grdmonexam.Row, 0].Text))                                       '
      If xquantival Then
        modClinSub.UpdateQuantiData(grdmonexam[grdmonexam.Row, 0].Text, xquantival[0], xquantival[1])
      Endif

    Endif
    FillMoniExamtable()

  Else If grdmonexam.Column = 3 Then
    xx = InputCombo("Select Flag for observation", "Change Flag", ["Normal", "Abnormal"], modMisc.GetIconValue(grdmonexam[grdmonexam.Row, 3].Picture), True)
    If xx Then
      modClinSub.UpdateExamFlag(grdmonexam[grdmonexam.Row, 0].Text, xx)
      FillMoniExamtable()
    Endif

  Else If grdmonexam.Column = 5 Then
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblpatientexam", "fldid=&1", grdmonexam[grdmonexam.Row, 0].Text)
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        FillMoniExamtable()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif

  Endif
  grdmonexam.Row = Row

End

''--------------------------- IV Fluids --------------------------------------------------------
Public Sub btnshowallfluid_Click()

  If txtencid.Text Then
    If btnshowallfluid.Value = True Then
      ShowMedFluids("All")
    Else If btnshowallfluid.Value = False Then
      ShowMedFluids("Current")
    Endif
  Endif

End

Private Sub ShowMedFluids(strType As String)

  Dim sql As String
  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  If strType = "Current" Then
    sql = "select fldid,fldstarttime,flditem,flddose,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and fldroute=&5 ORDER BY fldid DESC"                    ''
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, modDate.EndSqlDate(Now()), modDate.StartSqlDate(Now()), "fluid")
  Else If strType = "All" Then
    sql = "select fldid,fldstarttime,flditem,flddose,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldroute=&3 ORDER BY fldid DESC"
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, "fluid")
  Endif

  grdfluid.Clear
  grdfluid.Columns.Count = res.Fields.Count
  grdfluid.Rows.Count = res.Count

  With grdfluid
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 150 * modBasic.$AppWidthRatio
    .Columns[2].Width = 400 * modBasic.$AppWidthRatio
    .Columns[3].Width = 75 * modBasic.$AppWidthRatio
    .Columns[4].Width = 75 * modBasic.$AppWidthRatio
    .Columns[5].Width = 50 * modBasic.$AppWidthRatio
    .Columns[6].Width = 100 * modBasic.$AppWidthRatio
    .Columns[7].Width = 25 * modBasic.$AppWidthRatio
    .Columns[8].Width = 1
    .Columns[9].Width = 1

    .Columns[1].Text = "StartDate"
    .Columns[2].Text = "Medicine"
    .Columns[3].Text = "Dose"
    .Columns[4].Text = "Freq"
    .Columns[5].Text = "Days"
    .Columns[6].Text = "Status"
  End With

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdfluid, res.Index, Column)
      If Column = 1 Then
        grdfluid[res.Index, Column].Text = modReportVar.GetDateTimeReport(res["fldstarttime"], gb.GeneralDate)
      Else If Column = 7 Then
        grdfluid[res.Index, Column].Picture = Picture[GetFluidAdminStatusCode(res[fld.Name])]
        grdfluid[res.Index, Column].Text = ""
      Else
        grdfluid[res.Index, Column].Text = res[fld.Name]
      Endif
      grdfluid.Rows[res.Index].Height = Max(grdfluid.Rows[res.Index].Height, grdfluid[res.Index, Column].Font.RichTextHeight(grdfluid[res.Index, Column].Text, grdfluid.Columns[Column].Width - 5 * modBasic.$AppWidthRatio) + (grdfluid.Rows.Height - grdfluid.Font.Height))
      grdfluid[res.Index, Column].WordWrap = True

      Column = Column + 1
    Next
  Next
  grdfluid.Row = 0

End

Public Sub grdfluid_Click()

  Dim xx As String[] = ["Continue", "Completed", "Discontinue", "Hold", "Change", "ReWrite", "Cancelled", "Wasted"]
  Dim res As Result
  Dim xval As String
  Dim yval As Integer
  Dim xdate As Date
  Dim Row As Integer

  If btnshowallfluid.Value = False Then
    Row = grdfluid.Row
    FillFluidGridView(grdfluid[grdfluid.Row, 0].Text, grdfluid[grdfluid.Row, 2].Text)
    If grdfluid.Column = 1 Then
      xdate = GetDateValue(("Select Start Date for this medicine"), grdfluid[grdfluid.Row, 2].Text, grdfluid[grdfluid.Row, 8].Text)
      If xdate Then
        modPharmSub.UpdateStartAfterDispensing(grdfluid[grdfluid.Row, 0].Text, xdate)
        ShowMedFluids("Current")
      Endif

    Else If grdfluid.Column = 6 Then
      xval = InputCombo(grdfluid[grdfluid.Row, 2].Text, ("Select Current Status"), xx, grdfluid[grdfluid.Row, 6].Text, True)
      If xval Then
        res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", grdfluid[grdfluid.Row, 0].Text)
        res["fldcurval"] = xval
        res["xyz"] = False
        res.Update()
        ShowMedFluids("Current")
      Endif

    Else If grdfluid.Column = 5 Then
      yval = InputValue(grdfluid[grdfluid.Row, 2].Text, ("Select Number of Days"), grdfluid[grdfluid.Row, 5].Text)
      If yval Then
        res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", grdfluid[grdfluid.Row, 0].Text)
        res["flddays"] = yval
        res["fldendtime"] = DateAdd(grdfluid[grdfluid.Row, 8].Text, gb.Day, CInt(yval))
        res["xyz"] = False
        res.Update()
        ShowMedFluids("Current")
      Endif

    Else If grdfluid.Column = 7 Then
      If grdfluid[grdfluid.Row, 6].Text = "Continue" Then
        If grdfluid[grdfluid.Row, 7].Picture = Picture["icon:/small/next"] Then
          yval = InputValue(("Enter Rate of Administration in mL/Hour"), grdfluid[grdfluid.Row, 2].Text, 0)
          If yval Then
            modPharmSub.InsertNurDosing(grdfluid[grdfluid.Row, 0].Text, Trim(txtencid.Text), yval, "mL/Hour", Now())
            FillFluidGridView(grdfluid[grdfluid.Row, 0].Text, grdfluid[grdfluid.Row, 2].Text)
            ShowMedFluids("Current")
          Endif
        Endif
      Endif

    Endif
    grdfluid.Row = Row
  Endif

End

Public Sub btndosinfoivdrip_Click()

  Dim i As Integer
  Dim dosid As Long[]
  Dim xPath As String

  If txtencid.Text Then
    dosid = New Long[]
    For i = 0 To grdfluid.Rows.Count - 1
      dosid.Add(grdfluid[i, 0].Text)
    Next
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowMedicationLabelReport(Trim(txtencid.Text), dosid, "Inpatient")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btnfluidinfo_Click()

  Dim doslst As Long[]
  Dim i As Integer
  Dim xPath As String

  If txtencid.Text Then
    doslst = New Long[]
    For i = 0 To grdfluid.Rows.Count - 1
      doslst.Add(grdfluid[i, 0].Text)
    Next
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowCounselingReport(Trim(txtencid.Text), doslst)
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btncompatinfo_Click()

  Dim strDrug As String
  Dim hForm As FmListDOuble

  If grdfluid.Rows.Selection.Count Then
    strDrug = modMedConstant.GetDrugFromStockID(grdfluid[grdfluid.Row, 2].Text)
    hForm = New FmListDOuble(strDrug, "Compatible Drugs", "Incompatible Drugs", "Drug Compatibility", False)
    hForm.ShowModal
  Endif

End

Public Sub btnfluidcompat_Click()

  Dim sql As String
  Dim res As Result
  Dim opt As String[]
  Dim xval As String

  If grdfluid.Rows.Selection.Count > 0 Then
    opt = New String[]
    sql = "select fldid,fldroute,flditem from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and flditemtype=&5 and fldcurval=&6"                    ''
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, modDate.EndSqlDate(Now()), modDate.StartSqlDate(Now()), "Medicines", "Continue")
    If res.Available Then
      For Each res
        If res["fldroute"] = "topical" Then
        Else
          xval = modMedConstant.GetDrugFromStockID(res["flditem"])
          If opt.Count = 0 Then
            opt.Add(xval)
          Else
            If opt.Exist(xval) = False Then
              opt.Add(xval)
            Endif
          Endif
        Endif
      Next
    Endif
    modMedError.ShowMedCompatibleSingleDosID(grdfluid[grdfluid.Row, 0].Text, opt, "Message Box")
  Endif

End

Private Sub FillFluidGridView(dosno As Long, sItem As String)

  Dim Column As Integer
  Dim fld As ResultField
  Dim res As Result

  res = modDatabase.$syConn.Exec("select fldid,fldid,fldvalue,fldunit,fldfromtime,fldtotime,fldid,flddoseno from tblnurdosing where fldencounterval=&1 and flddoseno=&2 and fldfromtime IS NOT NULL ORDER BY fldid DESC", Trim(txtencid.Text), dosno)
  grdfluiddata.Clear
  grdfluiddata.Columns.Count = res.Fields.Count
  grdfluiddata.Rows.Count = res.Count

  For Each res
    Column = 0
    For Each fld In res.Fields
      modGeneralMain.GridExplicitDecoration(grdfluiddata, res.Index, Column)
      If Column = 1 Then
        grdfluiddata[res.Index, Column].Text = sItem
      Else If Column = 4 Then
        grdfluiddata[res.Index, Column].Text = modReportVar.GetDateTimeReport(res[fld.Name], gb.GeneralDate)
      Else If Column = 5 Then
        grdfluiddata[res.Index, Column].Text = modReportVar.GetDateTimeReport(res[fld.Name], gb.GeneralDate)
      Else If Column = 6 Then
        grdfluiddata[res.Index, Column].Picture = Picture[GetPictureDosing(res[fld.Name])]
      Else
        grdfluiddata[res.Index, Column].Text = res[fld.Name]
      Endif
      Column = Column + 1
    Next
  Next

  With grdfluiddata
    .Rows.Height = modBasic.$AppGridRowHeight
    .Columns[0].Width = 1
    .Columns[1].Width = 400 * modBasic.$AppWidthRatio
    .Columns[2].Width = 50 * modBasic.$AppWidthRatio
    .Columns[3].Width = 75 * modBasic.$AppWidthRatio
    .Columns[4].Width = 150 * modBasic.$AppWidthRatio
    .Columns[5].Width = 150 * modBasic.$AppWidthRatio
    .Columns[6].Width = 25 * modBasic.$AppWidthRatio
    .Columns[7].Width = 1

    .Columns[1].Text = "Particulars"
    .Columns[2].Text = "Rate"
    .Columns[3].Text = "Unit"
    .Columns[4].Text = "Start"
    .Columns[5].Text = "End"
  End With

End

Public Sub grdfluiddata_Click()

  Dim res As Result
  Dim Row As Integer

  If grdfluiddata.Column = 6 Then
    If grdfluiddata[grdfluiddata.Row, 6].Picture = Picture["icon:/small/stop"] Then
      Row = grdfluid.Row
      res = modDatabase.$myConn.Edit("tblnurdosing", "fldid=&1", grdfluiddata[grdfluiddata.Row, 0].Text)
      res["fldtotime"] = Now()
      res["xyz"] = False
      res.Update
      FillFluidGridView(grdfluiddata[grdfluiddata.Row, 7].Text, grdfluiddata[grdfluiddata.Row, 1].Text)
      ShowMedFluids("Current")
      grdfluid.Row = Row
    Endif
  Endif

End

Private Function GetPictureDosing(dosid As Long) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select flddoseno,fldfromtime,fldtotime from tblnurdosing where fldid=&1", dosid)
  If res.Available Then
    If res["fldfromtime"] And If Not res["fldtotime"] Then
      xx = "icon:/small/stop"
    Else If res["fldfromtime"] And If res["fldtotime"] Then
      xx = "icon:/small/lock"
    Endif
  Endif
  Return xx

End

Private Function GetFluidAdminStatusCode(dosno As Long) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$syConn.Exec("select fldid,fldfromtime,fldtotime from tblnurdosing where fldencounterval=&1 and flddoseno=&2 ORDER BY fldid DESC", Trim(txtencid.Text), dosno)
  If res.Available Then
    If res["fldfromtime"] And If Not res["fldtotime"] Then
      xx = "icon:/small/stop"
    Else
      xx = "icon:/small/next"
    Endif
  Else
    xx = "icon:/small/next"
  Endif
  Return xx

End

''--------------------------General calculation -------------------------------------------------------
Public Sub grpwt_Click()

  Dim hForm As FmClinChart

  If txtencid.Text Then
    hForm = New FmClinChart("SetA", "Wt", Trim(txtencid.Text), "")
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub tlbibw_Click()

  If txtencid.Text Then
    txtibw.Value = modSysCons.GetCalculationAValue("Ideal_Body_Weight", Trim(txtencid.Text))
  Endif

End

Public Sub grpibw_Click()

  Dim hForm As FmClinChart

  If txtencid.Text Then
    hForm = New FmClinChart("SetA", "Ideal_Body_Weight", Trim(txtencid.Text), "")
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub tlbsa_Click()

  If txtencid.Text Then
    txtbsa.Value = modSysCons.GetCalculationAValue("Body_Surface_Area", Trim(txtencid.Text))
  Endif

End

Public Sub grpbsa_Click()

  Dim hForm As FmClinChart

  If txtencid.Text Then
    hForm = New FmClinChart("SetA", "Body_Surface_Area", Trim(txtencid.Text), "")
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub tlbtbmi_Click()

  If txtencid.Text Then
    txtbmi.Value = modSysCons.GetCalculationAValue("Body_Mass_Index", Trim(txtencid.Text))
  Endif

End

Public Sub grpbmi_Click()

  Dim hForm As FmClinChart

  If txtencid.Text Then
    hForm = New FmClinChart("SetA", "Body_Mass_Index", Trim(txtencid.Text), "")
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub tlbcreclr_Click()

  If txtencid.Text Then
    txtcrclr.Value = modSysCons.GetCreatinineClearance(Trim(txtencid.Text))
  Endif

End

Public Sub grpcclr_Click()

End

Public Sub tlbtosmol_Click()

  If txtencid.Text Then
    txtserosmol.Value = modSysCons.GetConstantValue("Osmolality_Serum", Trim(txtencid.Text))
  Endif

End

Public Sub grposmol_Click()

End

''---------------------------File Menus ---------------------------------------------
Public Sub mnublank_Click()

  Dim hForm As FmPatientMain

  hForm = New FmPatientMain("", True)
  Me.Close
  modWorkSpace.Add(hForm)

End

Public Sub mnuscanfile_Click()

  Dim hForm As FmScanForm

  If txtencid.Text Then
    hForm = New FmScanForm(Trim(txtencid.Text), "Past Documents", "")
    hForm.ShowModal
  Endif

End

Public Sub mnudevice_Click()

  Dim xdev As String
  Dim lstdev As String[]
  Dim i As Integer

  lstdev = New String[]
  For i = 0 To 10
    lstdev.Add("/dev/video" & CStr(i))
  Next
  xdev = InputListView(("Select device for patient"), "Device", lstdev)
  If xdev Then
    modPatientSub.SetPatientDevice(Trim(txtencid.Text), "Webcam", xdev)
    Message.Info(("Setting saved"), ("OK"))
  Endif

End

Public Sub mnuhistory_Click()

  modPatReports.GetVisitHistoryResult($PatientNum)

End

Public Sub mnuvisitremore_Click()

  modPatReports.GetRepoVisitHistoryResult($PatientNum)

End

Public Sub mnulastencid_Click()

  txtencid.Text = modSettings.ShowLogValues("LastValue/Encounter")

End

Public Sub mnupatlock_Click()

  If txtencid.Text Then
    modPatientSub.LockPatientActivity(Me.Name, Trim(txtencid.Text))
  Endif

End

''---------------------------------------- Request Menu ------------------------------------
Public Sub btnlabs_Click()

  Dim hForm As FmTestList

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Test") = True Then
      hForm = New FmTestList(Trim(txtencid.Text), $billModeTest)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub btnradio_Click()

  Dim hForm As FmRadioList

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Radio") = True Then
      hForm = New FmRadioList(Trim(txtencid.Text), $billModeRadio)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub btnpharm_Click()

  Dim hForm As FmMedOrder

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Pharmacy") = True Then
      If modBasic.$MedRequestForm = "Separate" Then
      Else
        hForm = New FmMedOrder(Trim(txtencid.Text), $sTatus, $billModePharmacy)
        hForm.ShowModal
      Endif
    Endif
  Endif

End

Public Sub mnuequipment_Click()

  Dim hForm As FmEquipment

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Equipment") = True Then
      hForm = New FmEquipment(Trim(txtencid.Text), $billModeEquipment)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnumajor_Click()

  Dim hForm As FmMajorProced

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Procedure") = True Then
      hForm = New FmMajorProced(Trim(txtencid.Text), $billModeProcedure)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnuminiproc_Click()

  Dim hForm As FmMiniProcedure

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Procedure") = True Then
      hForm = New FmMiniProcedure(Trim(txtencid.Text), $billModeProcedure)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnugenservice_Click()

  Dim hForm As FmMiniService

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Service") = True Then
      hForm = New FmMiniService(Trim(txtencid.Text), $billModeService, $billModeProcedure, $billModeOthers)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnuextprocedure_Click()

  Dim hForm As FmAddExtraProced

  If txtencid.Text Then
    hForm = New FmAddExtraProced(Trim(txtencid.Text), $billModeProcedure)
    hForm.ShowModal
  Endif

End

Public Sub mnuconsult_Click()

  Dim hForm As FmMiniConsult

  If txtencid.Text Then
    hForm = New FmMiniConsult(Trim(txtencid.Text), $billModeService)
    hForm.ShowModal
  Endif

End

Public Sub mnumedproduct_Click()

  Dim hForm As FmMedItemList

  If txtencid.Text Then
    hForm = New FmMedItemList(Trim(txtencid.Text), "Blood")
    hForm.ShowModal
  Endif

End

Public Sub mnumonitor_Click()

  Dim hForm As FmReqVital

  If txtencid.Text Then
    hForm = New FmReqVital(Trim(txtencid.Text), $sTatus)
    hForm.ShowModal
  Endif

End

Public Sub btnintake_Click()

  Dim hForm As FmFoodPlan

  If txtencid.Text Then
    hForm = New FmFoodPlan(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub mnucloudai_Click()

  Dim hForm As FmPatCloudAI

  If txtencid.Text Then
    hForm = New FmPatCloudAI(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

''------------------------------------------------- Data Entry Menu -------------------------------
Public Sub mnudemograph_Click()

  Dim hForm As FmPatdemograph

  If txtencid.Text Then
    hForm = New FmPatdemograph(Trim(txtencid.Text), "Clinical")
    hForm.ShowModal
  Endif

End

Public Sub btnimage_Click()

  Dim hForm As FmPatImage

  If txtencid.Text Then
    hForm = New FmPatImage("IMAGE", Trim(txtencid.Text), "")
    hForm.ShowModal
  Endif

End

Public Sub mnuimagepat_Click()

  btnimage_Click()

End

Public Sub mnudicomimage_Click()

  Dim hForm As FmPatImage

  If txtencid.Text Then
    hForm = New FmPatImage("DICOM", Trim(txtencid.Text), "")
    hForm.ShowModal
  Endif

End

Public Sub mnupacsimage_Click()

  btnpacs_Click()

End

Public Sub mnupacshist_Click()

  Dim hForm As FmPacsFind

  If txtencid.Text Then
    hForm = New FmPacsFind(Trim(txtencid.Text), "History")
    hForm.ShowModal
  Endif

End

Public Sub btnpacs_Click()

  Dim hForm As FmPacsFind

  If txtencid.Text Then
    hForm = New FmPacsFind(Trim(txtencid.Text), "Visit")
    hForm.ShowModal
  Endif

End

Public Sub mnuvideodata_Click()

  Dim hForm8 As FmPatVideo

  If txtencid.Text Then
    hForm8 = New FmPatVideo("VIDEO", Trim(txtencid.Text), "")
    hForm8.ShowModal
  Endif

End

Public Sub mnuscreendraw_Click()

  Dim sPath As String
  Dim xxx As String[]
  Dim xval As String

  If txtencid.Text Then
    xxx = CustomDraw()
    If xxx Then
      sPath = xxx[0]
      If sPath Then
        xval = modImage.SaveClinicScreenDraw(Trim(txtencid.Text), xxx[1], sPath)
      Endif
    Endif
  Endif

End

Public Sub btnivdrip_Click()

  Dim hForm As FmIVInfusion

  If txtencid.Text Then
    hForm = New FmIVInfusion(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub mnuevent_Click()

  Dim hForm As FmEventTime

  If txtencid.Text Then
    hForm = New FmEventTime(Trim(txtencid.Text), "Events")
    hForm.ShowModal
  Endif

End

Public Sub mnudeviceuse_Click()

  Dim hForm As FmDeviceUse

  If txtencid.Text Then
    hForm = New FmDeviceUse(Trim(txtencid.Text), "Devices")
    hForm.ShowModal
  Endif

End

Public Sub mnuexam_Click()

  Dim hForm As FmVital

  If txtencid.Text
    hForm = New FmVital(Trim(txtencid.Text))
    hForm.ShowModal
    txtcolor.Background = modPatient.GetPatientColor(Trim(txtencid.Text))
  Endif

End

Public Sub mnutriage_Click()

  Dim hForm As FmTriage

  If txtencid.Text
    hForm = New FmTriage("Triage Examinations", Trim(txtencid.Text))
    hForm.ShowModal
    txtcolor.Background = modPatient.GetPatientColor(Trim(txtencid.Text))
  Endif

End

''------------------------------------- Status Menu ----------------------------
Private Sub CopyProvisToFinalDiagnosis()

  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldcode,fldcodeid,fldcodenew from tblpatfindings where fldencounterval=&1 and fldtype=&2 and fldsave=&3", Trim(txtencid.Text), "Provisional Diagnosis", True)
  If res.Available Then
    For Each res
      modPatientGeneral.AddPatientFindings("Final Diagnosis", Trim(txtencid.Text), res["fldcode"], res["fldcodenew"], res["fldcodeid"])
    Next
    lsticdisease.List = modPathoSub.GetFinalDiagnosisList(Trim(txtencid.Text))
  Endif

End

Public Sub mnuadmission_Click()

  Dim hCls As CReportCustom
  Dim xPath As String

  If txtencid.Text Then
    If $sTatus = "Admitted" Then
      If modSettings.ShowSettingFromFIle("Admission Report/Name") Then
        hCls = New CReportCustom(Trim(txtencid.Text), "Admission Report", "ReportSize", LabUnitForm())
        hCls.Preview()
      Else
        Inc Application.Busy
        xPath = modPatReports.ShowAdmissionSheet(Trim(txtencid.Text))
        Dec Application.Busy
        modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
      Endif
    Endif
  Endif

End

Private Function GetSiblingAdmission(encid As String) As String[]

  Dim res As Result
  Dim res1 As Result
  Dim xxx As String[]

  xxx = New String[]
  If txtgender.Text = "Female" Then
    res = modDatabase.$myConn.Exec("select fldencounterval from tblencounter where fldadmission=&1 and fldpatientval in(select fldbabypatno from tblconfinement where fldencounterval=&2)", "Admitted", encid)
    If res.Available Then
      For Each res
        xxx.Add(res["fldencounterval"])
      Next
    Endif
  Endif

  res1 = modDatabase.$myConn.Exec("select fldencounterval from tblconfinement where fldbabypatno in(select fldpatientval from tblencounter where fldencounterval=&1) and fldencounterval in(select fldencounterval from tblencounter where fldadmission=&2)", encid, "Admitted")
  If res1.Available Then
    xxx.Add(res1["fldencounterval"])
  Endif

  Return xxx

End

Public Sub mnudischarge_Click()

  Dim xx As String
  Dim xmsg As String
  Dim xinfnt As String[]
  Dim xdisch As String

  If txtencid.Text Then
    If Not lsticdisease.Count Then
      If Message.Question(("Final Diagnosis is not provided. <b>Do you want to copy Provisional Diagnosis to Final DIagnosis?</b>"), ("No"), ("Yes")) = 2 Then
        If lstsyndrome.Count Then
          CopyProvisToFinalDiagnosis()
        Endif
      Endif
    Else

      If modPatientSub.GetClearanceForExit(Trim(txtencid.Text)) = True Then
        xdisch = ""
        xinfnt = GetSiblingAdmission(Trim(txtencid.Text))
        If xinfnt And If xinfnt.Count Then
          xdisch = xdisch & "Mother/Newborns currently admitted are: " & xinfnt.Join(" , ") & "<br><br>"
        Endif
        xdisch = xdisch & "Patient information will be locked. <b>Do you want to initiate discharge process?</b>"
        If Message.Question((xdisch), ("No"), ("Yes")) = 2 Then
          xx = InputCombo("Current Condition of Patient", Trim(txtencid.Text), ["Recovered", "Improved", "Unchanged", "Worse"], "", True)
          If xx Then
            Inc Application.Busy
            modDatabase.$myConn.Begin
            xmsg = modBillings.ExitPatientWithBillingOfBed(Trim(txtencid.Text))
            modPatientSub.UpdateCurrentStatus(Trim(txtencid.Text), "Discharged", xx)
            modDatabase.$myConn.Commit
            Dec Application.Busy
            If xmsg Then
              Message.Warning(xmsg, "OK")
            Endif
          Endif
          mnublank_Click()
        Endif
      Endif

    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

Public Sub mnustartlama_Click()

  Dim xx As String
  Dim xmsg As String

  If txtencid.Text Then
    If Not lsticdisease.Count Then
      If Message.Question(("Final Diagnosis is not provided. <b>Do you want to copy Provisional Diagnosis to Final DIagnosis?</b>"), ("No"), ("Yes")) = 2 Then
        If lstsyndrome.Count Then
          CopyProvisToFinalDiagnosis()
        Endif
      Endif
    Else

      If modPatientSub.GetClearanceForExit(Trim(txtencid.Text)) = True Then
        If Message.Question(("Patient information will be locked. <b>Do you want to mark as LAMA?</b>"), ("No"), ("Yes")) = 2 Then
          xx = GetTextArea(("Reason for LAMA"), "")
          If xx Then
            Inc Application.Busy
            modDatabase.$myConn.Begin
            xmsg = modBillings.ExitPatientWithBillingOfBed(Trim(txtencid.Text))
            modPatientSub.UpdateCurrentStatus(Trim(txtencid.Text), "LAMA", xx)
            modDatabase.$myConn.Commit
            Dec Application.Busy
            If xmsg Then
              Message.Warning(xmsg, "OK")
            Endif
          Endif
          mnublank_Click()
        Endif
      Endif

    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

Public Sub mnurefer_Click()

  Dim xList As String[]
  Dim xrefer As String
  Dim xmsg As String

  If txtencid.Text Then
    If Not lsticdisease.Count Then
      If Message.Question(("Final Diagnosis is not provided. <b>Do you want to copy Provisional Diagnosis to Final DIagnosis?</b>"), ("No"), ("Yes")) = 2 Then
        If lstsyndrome.Count Then
          CopyProvisToFinalDiagnosis()
        Endif
      Endif
    Else

      If modPatientSub.GetClearanceForExit(Trim(txtencid.Text)) = True Then
        If Message.Question(("Patient information will be locked. <b>Do you want to mark as Referred?</b>"), ("No"), ("Yes")) = 2 Then
          xList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldlocation from tblreferlist"))
          xrefer = InputCombo("Select Refer Location from List", "Refer To", xList, "", False)
          If xrefer Then
            Inc Application.Busy
            modDatabase.$myConn.Begin
            xmsg = modBillings.ExitPatientWithBillingOfBed(Trim(txtencid.Text))
            modPatientSub.UpdateCurrentStatus(Trim(txtencid.Text), "Refer", xrefer)
            modDatabase.$myConn.Commit
            Dec Application.Busy
            If xmsg Then
              Message.Warning(xmsg, "OK")
            Endif
          Endif
          mnublank_Click()
        Endif
      Endif

    Endif

    If Message.Question("Upload Data to Repository now?", ("No"), ("Yes")) = 2 Then
      Inc Application.Busy
      modDataRepo.GetRepoUploadEncounterData(Trim(txtencid.Text))
      Dec Application.Busy
    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

Public Sub mnustartdeath_Click()

  Dim xx As String
  Dim xmsg As String

  If txtencid.Text Then
    If Not lsticdisease.Count Then
      If Message.Question(("Final Diagnosis is not provided. <b>Do you want to copy Provisional Diagnosis to Final DIagnosis?</b>"), ("No"), ("Yes")) = 2 Then
        If lstsyndrome.Count Then
          CopyProvisToFinalDiagnosis()
        Endif
      Endif
    Else

      If modPatientSub.GetClearanceForExit(Trim(txtencid.Text)) = True Then
        If Message.Question(("Patient information will be locked. <b>Do you want to mark as Death?</b>"), ("No"), ("Yes")) = 2 Then
          xx = GetTextArea(("Reason for Death"), "")
          If xx Then
            Inc Application.Busy
            modDatabase.$myConn.Begin
            xmsg = modBillings.ExitPatientWithBillingOfBed(Trim(txtencid.Text))
            modPatientSub.UpdateCurrentStatus(Trim(txtencid.Text), "Death", xx)
            modDatabase.$myConn.Commit
            Dec Application.Busy
            If xmsg Then
              Message.Warning(xmsg, "OK")
            Endif
          Endif
          mnublank_Click()
        Endif
      Endif

    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

Public Sub mnuabsconder_Click()

  Dim xmsg As String

  If txtencid.Text Then
    If modPatientSub.GetClearanceForExit(Trim(txtencid.Text)) = True Then
      If Message.Question(("Patient information will be locked. <b>Do you want to mark as Absconder?</b>"), ("No"), ("Yes")) = 2 Then
        Inc Application.Busy
        modDatabase.$myConn.Begin
        xmsg = modBillings.ExitPatientWithBillingOfBed(Trim(txtencid.Text))
        modPatientSub.UpdateCurrentStatus(Trim(txtencid.Text), "Absconder", "")
        modDatabase.$myConn.Commit
        Dec Application.Busy
        If xmsg Then
          Message.Warning(xmsg, "OK")
        Endif
        mnublank_Click()
      Endif
    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  Dec Application.Busy
  modHelpVariable.CreateErrorReport()

End

Public Sub mnudiscexam_Click()

  Dim hForm As FmTriage

  If txtencid.Text
    If modBasic.$ClinDischargeComp And If modBasic.$ClinDischargeComp.Count Then
      hForm = New FmTriage("Discharge Examinations", Trim(txtencid.Text))
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnudiscrollback_Click()

  If Message.Question("Are you sure to rollback the outcome ?", ("No"), ("Yes")) = 2 Then
    If $xFinClear = False Then
      modPatientSub.RollbackDischarge(Trim(txtencid.Text))
      Message.Info("Outcome rollback completed", "OK")
      mnublank_Click()
    Else
      Message.Warning("Finance Lock", "OK")
    Endif
  Endif

End

Public Sub mnuexitpass_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    If $xFinClear = True Then
      hCls = New CReportCustom(Trim(txtencid.Text), "Exit Paper", "ReportSize", MMain.$defUnit)
      hCls.Preview()
    Else
      Message.Warning("Clearance not complete", ("OK"))
    Endif
  Endif

End

''------------------------------------- Certificate Menu -----------------------------------
Private Function AllowDischargePrint() As Boolean

  Dim xAllow As Boolean
  Dim xexpense As Integer
  Dim xlock As Boolean

  If modBasic.$DichargeOnClear = "No Due" Then
    xexpense = modNonMedical.TotalUnpaidCountPatient(modDatabase.$myConn, Trim(txtencid.Text))
    If xexpense = 0 Then
      xAllow = True
    Else
      xAllow = False
    Endif
  Else If modBasic.$DichargeOnClear = "Fin Lock" Then
    xlock = $xFinClear
    If xlock = True Then
      xAllow = True
    Else
      xAllow = False
    Endif
  Else
    xAllow = True
  Endif
  Return xAllow

End

Public Sub mnudiscrep_Click()

  Dim xvarList As Variant[]
  Dim hCls As CReportCustom
  Dim xPath As String

  If txtencid.Text Then
    If $sTatus = "Discharged" Then
      If AllowDischargePrint() = True Then

        If modSettings.ShowSettingFromFIle("Discharge Letter/Name") Then
          hCls = New CReportCustom(Trim(txtencid.Text), "Discharge Letter", "ReportSize", LabUnitForm())
          hCls.Preview()
        Else
          xvarList = ListViewMulti(Trim(txtencid.Text))
          If xvarList Then
            Inc Application.Busy
            xPath = modPatReports.ShowDischargeReport(Trim(txtencid.Text), xvarList[0], xvarList[2], xvarList[1], LabUnitForm())
            Dec Application.Busy
            modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
          Endif
        Endif

      Endif
    Endif
  Endif

End

Public Sub mnulama_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    If $sTatus = "LAMA" Then
      If AllowDischargePrint() = True Then

        hCls = New CReportCustom(Trim(txtencid.Text), "LAMA Letter", "ReportSize", MMain.$defUnit)
        hCls.Preview()

      Endif
    Endif
  Endif

End

Public Sub mnudeath_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    If $sTatus = "Death" Then
      If AllowDischargePrint() = True Then

        hCls = New CReportCustom(Trim(txtencid.Text), "Death Certificate", "ReportSize", MMain.$defUnit)
        hCls.Preview()

      Endif
    Endif
  Endif

End

Public Sub mnurefercert_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    If $sTatus = "Refer" Then
      If AllowDischargePrint() = True Then

        hCls = New CReportCustom(Trim(txtencid.Text), "Referral Letter", "ReportSize", MMain.$defUnit)
        hCls.Preview()

      Endif
    Endif
  Endif

End

''--------------------------------------- Billing Menu ----------------------------------
Public Sub mnumedbill_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Medicines")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnusurgbill_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Surgicals")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuextrabill_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Extra Items")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnubilltest_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Diagnostic Tests")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuradio_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Radio Diagnostics")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnubillproced_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Procedures")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnubillservice_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "General Services")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnubillequip_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Equipment")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuother_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Other Items")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexpense_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowTotalExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Complete")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnubill_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowTotalInvoicebyPatient(Trim(txtencid.Text), "Complete")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnunoninvoiced_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowPendingExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Complete", ["Credit", "Cash"])
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnusumcombined_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLInvoice.ShowCombinedInPatientExp(modDatabase.$syConn, Trim(txtencid.Text), "Complete", ["Credit", "Cash"])
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

''------------------------------ Chart Menu ----------------------------------------
Public Sub mnucompexam_Click()

  Dim hForm As FmTPR

  hForm = New FmTPR(Trim(txtencid.Text), modBasic.$ClinEssentialComp)
  hForm.ShowModal()

End

Public Sub mnureqexam_Click()

  Dim hForm As FmTPR

  hForm = New FmTPR(Trim(txtencid.Text), modPatPatho.GetMonitorList(Trim(txtencid.Text), "Exam", "Continue", "%"))
  hForm.ShowModal()

End

Public Sub mnucomptest_Click()

  Dim res As Result
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    yy = New String[]

    res = modDatabase.$myConn.Exec("select distinct(fldtestid) as col from tblpatlabtest where fldencounterval=&1 and fldtest_type=&2 and (fldstatus=&3 or fldstatus=&4) and flvisible=&5", Trim(txtencid.Text), "Quantitative", "Reported", "Verified", "Visible")
    xx = modControlSub.GetDirectFillresult(res)
    If xx.Count Then
      hForm = New FmMultiChart(Trim(txtencid.Text), yy, xx, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
      modWorkSpace.Add(hForm)
    Endif
  Endif

End

Public Sub mnuchartdosing_Click()

  ''dosing chart

End

''------------------------------------- Report Menu -------------------------------------
Public Sub mnucurarchive_Click()

  Dim xxx As String[]

  If txtencid.Text Then
    xxx = AddReports(Trim(txtencid.Text), False)
  Endif

End

Public Sub mnunurcheck_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.NursingCheckReport(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btnnursing_Click()

  mnunurcheck_Click()

End

Public Sub mnumedreturn_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.PatientMedicationForReturn(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnucancelitem_Click()

  Dim sql As String
  Dim res As Result
  Dim hForm As FRequest

  sql = "select fldid,fldtime_order,flditem,flddose,fldfreq,flddays,fldqtydisp,fldlevel,flduserid_order,fldcomp_order,flduserid,fldcomp,fldtime from tblpatdosing where fldencounterval=&1 and fldcurval=&2"
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Cancelled")
  If res.Available Then
    hForm = New FRequest(res, "Cancelled Medicines", "Pharmacy:Cancelled", True)
    hForm.ShowModal
  Endif

End

Public Sub mnubedtransit_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowBedTransitionReport(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnudiagnosis_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.GetProvisionalDiagnosis(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnusymptoms_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatientSymptomReport(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexamboth_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatientExaminationgReport(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnutestreport_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatientLaboratoryReport(Trim(txtencid.Text), LabUnitForm())
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuradiorep_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatRadioReportbyEncID(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuinputfood_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatientInputReport(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuhistreport_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatientHistoryReport(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuclinote_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatientNoteReport(Trim(txtencid.Text), "Inpatient Notes")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnudischnote_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatientNoteReport(Trim(txtencid.Text), "Discharge Notes")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnudosing_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowNursingDosing(Trim(txtencid.Text))
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuipmonitoring_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatientPlanningReport(Trim(txtencid.Text), "IP Monitoring")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuplan_Click()

  Dim xPath As String

  If txtencid.Text Then
    Inc Application.Busy
    xPath = modCHTMLPatient.ShowPatientPlanningReport(Trim(txtencid.Text), "Clinician Plan")
    Dec Application.Busy
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnucomprep_Click()

  If txtencid.Text Then
    modPatReports.GetSelectedPatientValues(Trim(txtencid.Text), LabUnitForm())
  Endif

End

Public Sub btntriage_Click()

  Dim xcol As String

  If txtencid.Text Then
    xcol = InputColor("Triage", txtcolor.Background)
    If xcol Then
      txtcolor.Background = CInt(xcol)
      modPatient.SetPatientColor(Trim(txtencid.Text), xcol)
    Endif
  Endif

End

Public Sub mnuexamlocal_Click()

  modPatReports.GetPatHistoryLocalResult("Examination", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnulablocal_Click()

  modPatReports.GetPatHistoryLocalResult("Laboratory", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuradiolocal_Click()

  modPatReports.GetPatHistoryLocalResult("Radiology", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuprescrlocal_Click()

  modPatReports.GetPatHistoryLocalResult("Medicines", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuarchgeneral_Click()

  modPatReports.GetArchiveReportResult("General Reports", $PatientNum)

End

Public Sub mnuarchgenerlrepo_Click()

  modPatReports.GetRepoArchiveReportResult("General Reports", $PatientNum)

End

Public Sub mnuscanimg_Click()

  modPatReports.GetArchiveReportResult("Scanned Images", $PatientNum)

End

Public Sub mnuscanimgrepo_Click()

  modPatReports.GetRepoArchiveReportResult("Scanned Images", $PatientNum)

End

Public Sub mnupastdocs_Click()

  modPatReports.GetArchiveReportResult("Past Documents", $PatientNum)

End

Public Sub mnupastdocsrepo_Click()

  modPatReports.GetRepoArchiveReportResult("Past Documents", $PatientNum)

End

''History
Public Sub mnuexamrepo_Click()

  modPatReports.GetRepoHistoryLocalResult("Examination", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnulabremote_Click()

  modPatReports.GetRepoHistoryLocalResult("Laboratory", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuarchlab_Click()

  modPatReports.GetArchiveReportResult("Diagnostic Tests", $PatientNum)

End

Public Sub mnuarchlabrepo_Click()

  modPatReports.GetRepoArchiveReportResult("Diagnostic Tests", $PatientNum)

End

Public Sub mnuradioremote_Click()

  modPatReports.GetRepoHistoryLocalResult("Radiology", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuarchradio_Click()

  modPatReports.GetArchiveReportResult("Radio Diagnostics", $PatientNum)

End

Public Sub mnuarchradiorepo_Click()

  modPatReports.GetRepoArchiveReportResult("Radio Diagnostics", $PatientNum)

End

Public Sub mnupresremote_Click()

  modPatReports.GetRepoHistoryLocalResult("Medicines", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuallhist_Click()

  modPatReports.GetSelectHistoryResult(Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuremoreport_Click()

  modPatReports.GetRepoSelectHistoryResult(Trim(txtencid.Text), LabUnitForm())

End

''''------------------------------- custom report menu ---------------------------------------------------
Private Sub FillCustomMenu()

  Dim xform1 As String
  Dim xform2 As String
  Dim xform3 As String
  Dim xform4 As String
  Dim xform5 As String
  Dim xform6 As String
  Dim xform7 As String
  Dim xform8 As String
  Dim xform9 As String
  Dim xform10 As String

  xform1 = modSettings.ShowSettingFromFIle("CustomReport1/Name")
  xform2 = modSettings.ShowSettingFromFIle("CustomReport2/Name")
  xform3 = modSettings.ShowSettingFromFIle("CustomReport3/Name")
  xform4 = modSettings.ShowSettingFromFIle("CustomReport4/Name")
  xform5 = modSettings.ShowSettingFromFIle("CustomReport5/Name")
  xform6 = modSettings.ShowSettingFromFIle("CustomReport6/Name")
  xform7 = modSettings.ShowSettingFromFIle("CustomReport7/Name")
  xform8 = modSettings.ShowSettingFromFIle("CustomReport8/Name")
  xform9 = modSettings.ShowSettingFromFIle("CustomReport9/Name")
  xform10 = modSettings.ShowSettingFromFIle("CustomReport10/Name")

  If xform1 Then
    mnucust1.Caption = xform1
    mnucust1.Tag = "CustomReport1"
    mnucust1.Enabled = True
  Endif

  If xform2 Then
    mnucust2.Caption = xform2
    mnucust2.Tag = "CustomReport2"
    mnucust2.Enabled = True
  Endif

  If xform3 Then
    mnucust3.Caption = xform3
    mnucust3.Tag = "CustomReport3"
    mnucust3.Enabled = True
  Endif

  If xform4 Then
    mnucust4.Caption = xform4
    mnucust4.Tag = "CustomReport4"
    mnucust4.Enabled = True
  Endif

  If xform5 Then
    mnucust5.Caption = xform5
    mnucust5.Tag = "CustomReport5"
    mnucust5.Enabled = True
  Endif

  If xform6 Then
    mnucust6.Caption = xform6
    mnucust6.Tag = "CustomReport6"
    mnucust6.Enabled = True
  Endif

  If xform7 Then
    mnucust7.Caption = xform7
    mnucust7.Tag = "CustomReport7"
    mnucust7.Enabled = True
  Endif

  If xform8 Then
    mnucust8.Text = xform8
    mnucust8.Tag = "CustomReport8"
    mnucust8.Enabled = True
  Endif

  If xform9 Then
    mnucust9.Caption = xform9
    mnucust9.Tag = "CustomReport9"
    mnucust9.Enabled = True
  Endif

  If xform10 Then
    mnucust10.Caption = xform10
    mnucust10.Tag = "CustomReport10"
    mnucust10.Enabled = True
  Endif

End

Private Sub FillCustomFormMenu()

  Dim xform1 As String
  Dim xform2 As String
  Dim xform3 As String
  Dim xform4 As String
  Dim xform5 As String
  Dim xform6 As String
  Dim xform7 As String
  Dim xform8 As String
  Dim xform9 As String
  Dim xform10 As String

  xform1 = modSettings.ShowSettingForReport("CustomForm1/Form_Name")
  xform2 = modSettings.ShowSettingForReport("CustomForm2/Form_Name")
  xform3 = modSettings.ShowSettingForReport("CustomForm3/Form_Name")
  xform4 = modSettings.ShowSettingForReport("CustomForm4/Form_Name")
  xform5 = modSettings.ShowSettingForReport("CustomForm5/Form_Name")
  xform6 = modSettings.ShowSettingForReport("CustomForm6/Form_Name")
  xform7 = modSettings.ShowSettingForReport("CustomForm7/Form_Name")
  xform8 = modSettings.ShowSettingForReport("CustomForm8/Form_Name")
  xform9 = modSettings.ShowSettingForReport("CustomForm9/Form_Name")
  xform10 = modSettings.ShowSettingForReport("CustomForm10/Form_Name")

  If xform1 Then
    mnucustform1.Caption = xform1
    mnucustform1.Tag = "CustomForm1"
    mnucustform1.Enabled = True
  Endif

  If xform2 Then
    mnucustform2.Caption = xform2
    mnucustform2.Tag = "CustomForm2"
    mnucustform2.Enabled = True
  Endif

  If xform3 Then
    mnucustform3.Caption = xform3
    mnucustform3.Tag = "CustomForm3"
    mnucustform3.Enabled = True
  Endif

  If xform4 Then
    mnucustform4.Caption = xform4
    mnucustform4.Tag = "CustomForm4"
    mnucustform4.Enabled = True
  Endif

  If xform5 Then
    mnucustform5.Caption = xform5
    mnucustform5.Tag = "CustomForm5"
    mnucustform5.Enabled = True
  Endif

  If xform6 Then
    mnucustform6.Caption = xform6
    mnucustform6.Tag = "CustomForm6"
    mnucustform6.Enabled = True
  Endif

  If xform7 Then
    mnucustform7.Caption = xform7
    mnucustform7.Tag = "CustomForm7"
    mnucustform7.Enabled = True
  Endif

  If xform8 Then
    mnucustform8.Caption = xform8
    mnucustform8.Tag = "CustomForm8"
    mnucustform8.Enabled = True
  Endif

  If xform9 Then
    mnucustform9.Caption = xform9
    mnucustform9.Tag = "CustomForm9"
    mnucustform9.Enabled = True
  Endif

  If xform10 Then
    mnucustform10.Caption = xform10
    mnucustform10.Tag = "CustomForm10"
    mnucustform10.Enabled = True
  Endif

End

Public Sub mnucust1_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust1.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust2_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust2.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust3_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust3.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust4_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust4.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust5_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust5.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust6_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust6.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust7_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust7.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust8_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust8.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust9_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust9.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust10_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust10.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnuessenexam_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = modClinic.GetFullVitalList(Trim(txtencid.Text))
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub mnucustform1_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform1.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform1.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub mnucustform2_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform2.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform2.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub mnucustform3_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform3.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform3.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub mnucustform4_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform4.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform4.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub mnucustform5_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform5.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform5.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub mnucustform6_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform6.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform6.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub mnucustform7_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform7.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform7.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub mnucustform8_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform8.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform8.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub mnucustform9_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform9.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform9.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif

End

Public Sub mnucustform10_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform10.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform10.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    modWorkSpace.Add(hForm)
  Endif

End

''------------------------ Algorithms ---------------------------------------------
Private Sub SHowALgorithmList()

  Dim xform1 As String
  Dim xform2 As String
  Dim xform3 As String
  Dim xform4 As String
  Dim xform5 As String
  Dim xform6 As String
  Dim xform7 As String
  Dim xform8 As String
  Dim xform9 As String
  Dim xform10 As String

  xform1 = modSettings.ShowSettingForReport("ClinAlgorithm1/AlgorithmName")
  xform2 = modSettings.ShowSettingForReport("ClinAlgorithm2/AlgorithmName")
  xform3 = modSettings.ShowSettingForReport("ClinAlgorithm3/AlgorithmName")
  xform4 = modSettings.ShowSettingForReport("ClinAlgorithm4/AlgorithmName")
  xform5 = modSettings.ShowSettingForReport("ClinAlgorithm5/AlgorithmName")
  xform6 = modSettings.ShowSettingForReport("ClinAlgorithm6/AlgorithmName")
  xform7 = modSettings.ShowSettingForReport("ClinAlgorithm7/AlgorithmName")
  xform8 = modSettings.ShowSettingForReport("ClinAlgorithm8/AlgorithmName")
  xform9 = modSettings.ShowSettingForReport("ClinAlgorithm9/AlgorithmName")
  xform10 = modSettings.ShowSettingForReport("ClinAlgorithm10/AlgorithmName")

  If xform1 Then
    mnualgo1.Caption = xform1
    mnualgo1.Tag = "ClinAlgorithm1"
    mnualgo1.Enabled = True
  Endif

  If xform2 Then
    mnualgo2.Caption = xform2
    mnualgo2.Tag = "ClinAlgorithm2"
    mnualgo2.Enabled = True
  Endif

  If xform3 Then
    mnualgo3.Caption = xform3
    mnualgo3.Tag = "ClinAlgorithm3"
    mnualgo3.Enabled = True
  Endif

  If xform4 Then
    mnualgo4.Caption = xform4
    mnualgo4.Tag = "ClinAlgorithm4"
    mnualgo4.Enabled = True
  Endif

  If xform5 Then
    mnualgo5.Caption = xform5
    mnualgo5.Tag = "ClinAlgorithm5"
    mnualgo5.Enabled = True
  Endif

  If xform6 Then
    mnualgo6.Caption = xform6
    mnualgo6.Tag = "ClinAlgorithm6"
    mnualgo6.Enabled = True
  Endif

  If xform7 Then
    mnualgo7.Caption = xform7
    mnualgo7.Tag = "ClinAlgorithm7"
    mnualgo7.Enabled = True
  Endif

  If xform8 Then
    mnualgo8.Caption = xform8
    mnualgo8.Tag = "ClinAlgorithm8"
    mnualgo8.Enabled = True
  Endif

  If xform9 Then
    mnualgo9.Caption = xform9
    mnualgo9.Tag = "ClinAlgorithm9"
    mnualgo9.Enabled = True
  Endif

  If xform10 Then
    mnualgo10.Caption = xform10
    mnualgo10.Tag = "ClinAlgorithm10"
    mnualgo10.Enabled = True
  Endif

End

Public Sub mnualgo1_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo1.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo2_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo2.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo3_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo3.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo4_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo4.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo5_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo5.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo6_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo6.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo7_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo7.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo8_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo8.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo9_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo9.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo10_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo10.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

''------------------------ User Access -------------------------------
Private Sub RestrictUserAccess()

  If $UserRestrict.Exist("Presenting Complaints") Then
    btnaddsymplist.Enabled = False
    btnsympadd.Enabled = False
    grdchiefsymptom.Enabled = False
  Endif
  If $UserRestrict.Exist("General Complaints") Then
    ''
  Endif
  If $UserRestrict.Exist("Cause of Admission") Then
    btnadmitcause.Enabled = False
  Endif
  If $UserRestrict.Exist("Patient History") Then
    tlbtnhistory.Enabled = False
  Endif
  If $UserRestrict.Exist("Clinical Findings") Then
    btnfinadd.Enabled = False
    GridView1.Enabled = False
    btnaddexamlistmain.Enabled = False
    btnaddexamlistmainall.Enabled = False
    btnaddscales.Enabled = False
    btntriage.Enabled = False
  Endif
  If $UserRestrict.Exist("Body Weight") Then
    tlbtnadwt.Enabled = False
    btnaddwt.Enabled = False
    grdwt.Enabled = False
  Endif
  If $UserRestrict.Exist("Body Height") Then
    btnaddheit.Enabled = False
  Endif
  If $UserRestrict.Exist("Input Output") Then
    btnaddinput.Enabled = False
    btaddoutput.Enabled = False
    grdintake.Enabled = False
    grdoutput.Enabled = False
  Endif
  If $UserRestrict.Exist("Progress Notes") Then
    btnmoniadd.Enabled = False
    btnmonproblem.Enabled = False
    btnmontreatment.Enabled = False
    btnmoninout.Enabled = False
    btnmonplan.Enabled = False
    btnmonimpression.Enabled = False
  Endif
  If $UserRestrict.Exist("Clinical Notes") Then
    btnoteadd.Enabled = False
    btnotedit.Enabled = False
  Endif
  If $UserRestrict.Exist("Therapeutic Planning") Then
    btnplanadd.Enabled = False
    btnaddsubject.Enabled = False
    btnaddobject.Enabled = False
    btnaddassess.Enabled = False
    btnaddplan.Enabled = False
  Endif
  If $UserRestrict.Exist("Symptoms Addition") Then
    btnaddsympfree.Enabled = False
    btnaddsymptom.Enabled = False
    btndelsymptom.Enabled = False
    grdsymptom.Enabled = False
  Endif

  If $UserRestrict.Exist("Provisional Diagnosis") Then
    tlbtndelprov.Enabled = False
    btnprovcustom.Enabled = False
    tbnprovdisease.Enabled = False
    btnprovsyndro.Enabled = False
  Endif
  If $UserRestrict.Exist("Final Diagnosis") Then
    tlbtndelfinal.Enabled = False
    btnfinalcustom.Enabled = False
    tbnfinaldisease.Enabled = False
    btnfinalsyndro.Enabled = False
  Endif
  If $UserRestrict.Exist("Drug Allergy") Then
    tlbtndelallergy.Enabled = False
    btnallergy.Enabled = False
    btnallergymanual.Enabled = False
  Endif
  If $UserRestrict.Exist("Change Status") Then
    mnupatappl.Enabled = False
  Endif
  If $UserRestrict.Exist("Bed Assignment") Then
    tlbtnaddbed.Enabled = False
  Endif
  If $UserRestrict.Exist("Hepatic Status") Then
    tlbthepatic.Enabled = False
  Endif
  If $UserRestrict.Exist("Pregnancy Status") Then
    tlbtpregnancy.Enabled = False
  Endif

  If $UserRestrict.Exist("Laboratory Request") Then
    btnlabs.Enabled = False
  Endif
  If $UserRestrict.Exist("Radiology Request") Then
    btnradio.Enabled = False
  Endif
  If $UserRestrict.Exist("Pharmacy Request") Then
    grdfluid.Enabled = False
    grdmedicine.Enabled = False
    grdmedprn.Enabled = False
    btnpharm.Enabled = False
  Endif
  If $UserRestrict.Exist("Products Request") Then
    mnumedproduct.Enabled = False
    btnivdrip.Enabled = False
  Endif

  If $UserRestrict.Exist("Procedure Plan") Then
    mnumajor.Enabled = False
  Endif
  If $UserRestrict.Exist("Extra Procedure Plan") Then
    mnuextprocedure.Enabled = False
  Endif
  If $UserRestrict.Exist("Consultation Plan") Then
    mnuconsult.Enabled = False
  Endif
  If $UserRestrict.Exist("PO Intake Plan") Then
    btnintake.Enabled = False
  Endif
  If $UserRestrict.Exist("Monitoring Plan") Then
    mnumonitor.Enabled = False
  Endif

  If $UserRestrict.Exist("Demographics") Then
    mnudemograph.Enabled = False
  Endif
  If $UserRestrict.Exist("General Images") Then
    mnuscreendraw.Enabled = False
    mnuimagepat.Enabled = False
    btnimage.Enabled = False
  Endif
  If $UserRestrict.Exist("Video Data") Then
    mnuvideodata.Enabled = False
  Endif
  If $UserRestrict.Exist("DICOM Images") Then
    mnudicomimage.Enabled = False
  Endif
  If $UserRestrict.Exist("PACS Images") Then
    mnupacsimage.Enabled = False
  Endif
  If $UserRestrict.Exist("Equipments Used") Then
    mnuequipment.Enabled = False
  Endif
  If $UserRestrict.Exist("Minor Procedure") Then
    mnuminiproc.Enabled = False
  Endif
  If $UserRestrict.Exist("General Services") Then
    mnugenservice.Enabled = False
  Endif
  If $UserRestrict.Exist("Medicine Dosing") Then
    grdfluiddata.Enabled = False
    btndosingroutine.Enabled = False
    btndosingprn.Enabled = False
    grdfluid.Enabled = False
  Endif
  If $UserRestrict.Exist("IV Infusion") Then
    btnivdrip.Enabled = False
    btnpacs.Enabled = False
    grdfluid.Enabled = False
    grdfluiddata.Enabled = False
  Endif
  If $UserRestrict.Exist("Event Timing") Then
    mnuevent.Enabled = False
  Endif
  If $UserRestrict.Exist("Devices Used") Then
    mnudeviceuse.Enabled = False
  Endif
  If $UserRestrict.Exist("Essential Examinations") Then
    btnvital.Enabled = False
    mnuexam.Enabled = False
  Endif
  If $UserRestrict.Exist("Triage Examinations") Then
    mnutriage.Enabled = False
  Endif

End

Public Sub btnhelphistory_Click()

  txthistory.RichText = txthistory.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))

End

Public Sub btnprogproblem_Click()

  txtmonproblem.RichText = txtmonproblem.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))

End

Public Sub btnhelpnote_Click()

  txtnote.RichText = txtnote.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))

End

Public Sub btnhelpcause_Click()

  txtadmitcause.Text = txtadmitcause.Text & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))

End

Public Sub btnprogtreat_Click()

  txtmontreatment.RichText = txtmontreatment.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))

End

Public Sub btnproginout_Click()

  txtmoninout.RichText = txtmoninout.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))

End

Public Sub btnprogplan_Click()

  txtmonplan.RichText = txtmonplan.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))

End

Public Sub btnplansubj_Click()

  txtsubject.RichText = txtsubject.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))

End

Public Sub btnplanobj_Click()

  txtobject.RichText = txtobject.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))

End

Public Sub btnplanasses_Click()

  txtmanage.RichText = txtmanage.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))

End

Public Sub btnplanplan_Click()

  txtplan.RichText = txtplan.RichText & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text))

End

Public Sub txtfinval_GotFocus()

  txtfinval.SelectAll

End

Public Sub txtmonval_GotFocus()

  txtmonval.SelectAll

End
